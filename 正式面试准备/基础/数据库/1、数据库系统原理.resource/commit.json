{"compress":true,"commitItems":[["7e935e9f-fcd6-4da3-92f5-14706736e15e",1571576277236,"",[[1571576230270,["28447@DESKTOP-BE7HQ26",[[1,0,"# 数据库系统原理\n\n\n\n"]],[0,0],[12,12]]],[1571576234987,["28447@DESKTOP-BE7HQ26",[[-1,12,"\n"],[1,13,"#"]],[12,12],[13,13]]],[1571576238015,["28447@DESKTOP-BE7HQ26",[[1,13,"# 事务"]],[13,13],[17,17]]],[1571576238270,["28447@DESKTOP-BE7HQ26",[[1,17,"\n\n"]],[17,17],[18,18]]],[1571576246623,["28447@DESKTOP-BE7HQ26",[[1,19,"\n"]],[17,17],[18,18]]],[1571576247170,["28447@DESKTOP-BE7HQ26",[[1,20,"\n"]],[18,18],[19,19]]],[1571576358653,["28447@DESKTOP-BE7HQ26",[[1,19,"####"]],[19,19],[23,23]]],[1571576359413,["28447@DESKTOP-BE7HQ26",[[-1,22,"#"]],[23,23],[22,22]]],[1571576361735,["28447@DESKTOP-BE7HQ26",[[1,22," ACID"]],[22,22],[27,27]]],[1571576361956,["28447@DESKTOP-BE7HQ26",[[1,29,"\n"]],[27,27],[28,28]]],[1571576367708,["28447@DESKTOP-BE7HQ26",[[1,28,"1. yuan"]],[28,28],[35,35]]],[1571576368483,["28447@DESKTOP-BE7HQ26",[[-1,31,"yuan"]],[35,35],[31,31]]],[1571576376149,["28447@DESKTOP-BE7HQ26",[[1,31,"原子性（）"]],[31,31],[36,36]]],[1571576380453,["28447@DESKTOP-BE7HQ26",[[1,35,"Atomicity"]],[35,35],[44,44]]],[1571576381371,["28447@DESKTOP-BE7HQ26",[[1,46,"2. \n"]],[45,45],[49,49]]],[1571576383814,["28447@DESKTOP-BE7HQ26",[[1,49,"yi"]],[49,49],[51,51]]],[1571576384311,["28447@DESKTOP-BE7HQ26",[[-1,49,"yi"]],[51,51],[49,49]]],[1571576387186,["28447@DESKTOP-BE7HQ26",[[1,49,"一致性"]],[49,49],[52,52]]],[1571576387559,["28447@DESKTOP-BE7HQ26",[[1,53,"3. \n"]],[52,52],[56,56]]],[1571576390700,["28447@DESKTOP-BE7HQ26",[[1,56,"隔离性"]],[56,56],[59,59]]],[1571576390891,["28447@DESKTOP-BE7HQ26",[[1,60,"4. \n"]],[59,59],[63,63]]],[1571576394019,["28447@DESKTOP-BE7HQ26",[[1,63,"吃机型"]],[63,63],[66,66]]],[1571576395423,["28447@DESKTOP-BE7HQ26",[[-1,63,"吃机型"]],[66,66],[63,63]]],[1571576398156,["28447@DESKTOP-BE7HQ26",[[1,63,"持久性"]],[63,63],[66,66]]],[1571576400024,["28447@DESKTOP-BE7HQ26",[[1,52,"（）"]],[52,52],[54,54]]],[1571576401852,["28447@DESKTOP-BE7HQ26",[[1,61,"（）"]],[61,61],[63,63]]],[1571576403242,["28447@DESKTOP-BE7HQ26",[[1,70,"（）"]],[70,70],[72,72]]],[1571576408260,["28447@DESKTOP-BE7HQ26",[[1,53,"Consistency"]],[53,53],[64,64]]],[1571576414699,["28447@DESKTOP-BE7HQ26",[[1,73,"lsolation"]],[73,73],[82,82]]],[1571576419746,["28447@DESKTOP-BE7HQ26",[[1,91,"Durability"]],[91,91],[101,101]]],[1571576421678,["28447@DESKTOP-BE7HQ26",[[1,49,"\n2. "]],[45,45],[49,49]]],[1571576421973,["28447@DESKTOP-BE7HQ26",[[1,46,"  "]],[49,49],[51,51]]],[1571576423867,["28447@DESKTOP-BE7HQ26",[[-1,48,"2. "]],[51,51],[48,48]]],[1571576434313,["28447@DESKTOP-BE7HQ26",[[1,48,"事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。\n\n回滚可以用回滚日志来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。"]],[48,48],[138,138]]],[1571576438650,["28447@DESKTOP-BE7HQ26",[[-1,46,"  "]],[46,48],[46,46]]],[1571576439626,["28447@DESKTOP-BE7HQ26",[[-1,87,"\n"]],[87,87],[86,86]]],[1571576456418,["28447@DESKTOP-BE7HQ26",[[1,87,"\n"]],[86,86],[87,87]]],[1571576458434,["28447@DESKTOP-BE7HQ26",[[1,46,"2. \n"]],[45,45],[49,49]]],[1571576459867,["28447@DESKTOP-BE7HQ26",[[-1,46,"2. "]],[49,49],[46,46]]],[1571576467313,["28447@DESKTOP-BE7HQ26",[[-1,46,"\n"]],[46,46],[45,45]]],[1571576471446,["28447@DESKTOP-BE7HQ26",[[-1,87,"\n"]],[87,87],[86,86]]],[1571576476418,["28447@DESKTOP-BE7HQ26",[[1,159,"\n3. "]],[155,155],[159,159]]],[1571576477024,["28447@DESKTOP-BE7HQ26",[[-1,156,"3. "]],[159,159],[157,157]]],[1571576492161,["28447@DESKTOP-BE7HQ26",[[1,28,"### "],[1,29,"\\"],[1,45,"\n"],[1,87,"\n"],[1,136,"\n### [](https://github.com/CyC"],[1,137,"018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md#2-%E4%B8%80%E8%87%B4%E6%80%A7consistency)2\\"],[1,157,"数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。\n\n### [](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%9"],[1,158,"%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md#3-%E9%9A%94%E7%A6%BB%E6%80%A7isolation)3\\"],[-1,164,"l"],[1,165,"I"],[1,175,"\n一个事务所做的修改在最终提交以前，对其它事务是不可见的。\n\n### [](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md#"],[1,176,"-%E6%8C%81%E4%B9%85%E6%80%A7durability)4\\"],[1,195,"一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。\n\n使用重做日志来保证持久性。\n"]],[28,194],[853,853]]],[1571576504531,["28447@DESKTOP-BE7HQ26",[[-1,144,"### [](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md#2-%E4%B8%80%E8%87%B4%E6%80%A7consistency)"]],[313,313],[144,144]]],[1571576508993,["28447@DESKTOP-BE7HQ26",[[-1,28,"### "]],[32,32],[28,28]]],[1571576511882,["28447@DESKTOP-BE7HQ26",[[-1,29,"\\"]],[30,30],[29,29]]],[1571576514509,["28447@DESKTOP-BE7HQ26",[[-1,141,"."]],[142,142],[141,141]]],[1571576516311,["28447@DESKTOP-BE7HQ26",[[-1,140,"\\"]],[141,141],[140,140]]],[1571576517281,["28447@DESKTOP-BE7HQ26",[[1,140,"."]],[140,140],[141,141]]],[1571576522245,["28447@DESKTOP-BE7HQ26",[[-1,209,"### [](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md#3-%E9%9A%94%E7%A6%BB%E6%80%A7isolation)3"]],[209,377],[209,209]]],[1571576523238,["28447@DESKTOP-BE7HQ26",[[1,209,"3"]],[209,209],[210,210]]],[1571576523885,["28447@DESKTOP-BE7HQ26",[[-1,210,"\\"]],[211,211],[210,210]]],[1571576527418,["28447@DESKTOP-BE7HQ26",[[-1,258,"### [](https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md#4-%E6%8C%81%E4%B9%85%E6%80%A7durability)4\\"]],[258,428],[258,258]]],[1571576528718,["28447@DESKTOP-BE7HQ26",[[1,258,"4"]],[258,258],[259,259]]],[1571577409306,["28447@DESKTOP-BE7HQ26",[[-1,29,"."]],[30,30],[29,29]]],[1571577411141,["28447@DESKTOP-BE7HQ26",[[1,30," "]],[29,29],[30,30]]],[1571577412314,["28447@DESKTOP-BE7HQ26",[[-1,28,"1 "]],[30,30],[28,28]]],[1571577413233,["28447@DESKTOP-BE7HQ26",[[1,28,"-"]],[28,28],[29,29]]],[1571577415545,["28447@DESKTOP-BE7HQ26",[[-1,27,"\n"]],[28,28],[27,27]]],[1571577416401,["28447@DESKTOP-BE7HQ26",[[1,27,"\n"]],[27,27],[28,28]]],[1571577417679,["28447@DESKTOP-BE7HQ26",[[1,28,"\n"]],[27,27],[28,28]]],[1571577420951,["28447@DESKTOP-BE7HQ26",[[-1,139,"2."]],[139,141],[139,139]]],[1571577421505,["28447@DESKTOP-BE7HQ26",[[1,139,"-"]],[139,139],[140,140]]],[1571577423640,["28447@DESKTOP-BE7HQ26",[[-1,208,"3."],[1,210,"-"]],[208,210],[209,209]]],[1571577425261,["28447@DESKTOP-BE7HQ26",[[-1,256,"4."]],[256,258],[256,256]]],[1571577426067,["28447@DESKTOP-BE7HQ26",[[1,256,"-"]],[256,256],[257,257]]],[1571577461034,["28447@DESKTOP-BE7HQ26",[[1,339,"\n"]],[338,338],[339,339]]],[1571577461517,["28447@DESKTOP-BE7HQ26",[[1,340,"\n"]],[339,339],[340,340]]],[1571577464732,["28447@DESKTOP-BE7HQ26",[[1,258,"4. "]],[258,258],[261,261]]],[1571577467433,["28447@DESKTOP-BE7HQ26",[[1,210,"3. "]],[210,210],[213,213]]],[1571577471858,["28447@DESKTOP-BE7HQ26",[[1,141,"2. "]],[141,141],[144,144]]],[1571577474223,["28447@DESKTOP-BE7HQ26",[[1,31,"1. "]],[31,31],[34,34]]],[1571579289381,["28447@DESKTOP-BE7HQ26",[[1,146,"\\"]],[146,146],[147,147]]],[1571579289724,["28447@DESKTOP-BE7HQ26",[[-1,145,".\\"]],[147,147],[145,145]]],[1571579358414,["28447@DESKTOP-BE7HQ26",[[1,234,"  "]],[234,234],[236,236]]],[1571579360469,["28447@DESKTOP-BE7HQ26",[[-1,234,"  "]],[234,236],[234,234]]],[1571579360781,["28447@DESKTOP-BE7HQ26",[[1,234,"  "]],[234,234],[236,236]]],[1571579361605,["28447@DESKTOP-BE7HQ26",[[-1,235," "]],[236,236],[235,235]]],[1571579362019,["28447@DESKTOP-BE7HQ26",[[1,235,"  "]],[235,235],[237,237]]],[1571579368676,["28447@DESKTOP-BE7HQ26",[[-1,215,"3. "]],[215,218],[215,215]]],[1571579370563,["28447@DESKTOP-BE7HQ26",[[-1,144,"2 "]],[144,146],[144,144]]],[1571579372860,["28447@DESKTOP-BE7HQ26",[[-1,31,"1. "]],[31,34],[31,31]]],[1571579374725,["28447@DESKTOP-BE7HQ26",[[-1,261,"4."]],[261,263],[261,261]]],[1571579381423,["28447@DESKTOP-BE7HQ26",[[1,279,"  "]],[279,279],[281,281]]],[1571579384435,["28447@DESKTOP-BE7HQ26",[[1,331,"    "]],[331,331],[335,335]]],[1571579386142,["28447@DESKTOP-BE7HQ26",[[-1,331,"    "]],[335,335],[331,331]]],[1571579387243,["28447@DESKTOP-BE7HQ26",[[1,331,"  "]],[331,331],[333,333]]],[1571579388652,["28447@DESKTOP-BE7HQ26",[[1,159,"  "]],[159,159],[161,161]]],[1571579389823,["28447@DESKTOP-BE7HQ26",[[1,89,"  "]],[89,89],[91,91]]],[1571579390622,["28447@DESKTOP-BE7HQ26",[[1,47,"  "]],[47,47],[49,49]]],[1571579449641,["28447@DESKTOP-BE7HQ26",[[1,353,"  \n"]],[352,352],[355,355]]],[1571579450078,["28447@DESKTOP-BE7HQ26",[[-1,353,"  "],[1,355,"\n"]],[355,355],[354,354]]],[1571579461357,["28447@DESKTOP-BE7HQ26",[[1,354,"wadh "]],[354,354],[359,359]]],[1571579462792,["28447@DESKTOP-BE7HQ26",[[-1,354,"wadh "]],[359,359],[354,354]]],[1571579473878,["28447@DESKTOP-BE7HQ26",[[1,354,"asd "]],[354,354],[358,358]]],[1571579474944,["28447@DESKTOP-BE7HQ26",[[-1,354,"asd "]],[358,358],[354,354]]],[1571579476655,["28447@DESKTOP-BE7HQ26",[[1,354,"- asnd "]],[354,354],[361,361]]],[1571579480994,["28447@DESKTOP-BE7HQ26",[[-1,336,"\n"]],[336,336],[335,335]]],[1571579482743,["28447@DESKTOP-BE7HQ26",[[1,338,"\n  "]],[335,335],[338,338]]],[1571579514969,["28447@DESKTOP-BE7HQ26",[[-1,358,"asnd "],[1,363,"隔离性（Isolation）\n\n   一个事务所做的修改在最终提交以前，对其它事务是不可见的。"]],[356,363],[405,405]]],[1571579531573,["28447@DESKTOP-BE7HQ26",[[-1,267," "]],[268,268],[267,267]]],[1571579536947,["28447@DESKTOP-BE7HQ26",[[-1,355,"- 隔离性（Isolation）\n\n   一个事务所做的修改在最终提交以前，对其它事务是不可见的。\n\n"]],[354,405],[354,354]]],[1571579736624,["28447@DESKTOP-BE7HQ26",[[1,354,"  \n"]],[353,353],[356,356]]],[1571579736799,["28447@DESKTOP-BE7HQ26",[[-1,354,"  "],[1,356,"\n"]],[356,356],[355,355]]],[1571579893172,["28447@DESKTOP-BE7HQ26",[[1,356,"### fen"]],[356,356],[363,363]]],[1571579893824,["28447@DESKTOP-BE7HQ26",[[-1,360,"fen"]],[363,363],[360,360]]],[1571579896419,["28447@DESKTOP-BE7HQ26",[[1,360,"封锁"]],[360,360],[362,362]]],[1571579896496,["28447@DESKTOP-BE7HQ26",[[1,364,"\n"]],[362,362],[363,363]]],[1571579896694,["28447@DESKTOP-BE7HQ26",[[1,365,"\n"]],[363,363],[364,364]]],[1571579919605,["28447@DESKTOP-BE7HQ26",[[1,355,"### 并发一致性问题"]],[355,355],[366,366]]],[1571579919920,["28447@DESKTOP-BE7HQ26",[[1,367,"\n"]],[366,366],[367,367]]],[1571579928169,["28447@DESKTOP-BE7HQ26",[[1,378,"\n"]],[374,374],[375,375]]],[1571579928713,["28447@DESKTOP-BE7HQ26",[[1,379,"\n"]],[375,375],[376,376]]],[1571586229511,["28447@DESKTOP-BE7HQ26",[[-1,0,"# 数据库系统原理\n\n\n## 事务\n\n### ACID\n\n- 原子性（Atomicity）\n\n  事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。\n\n  回滚可以用回滚日志来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。\n\n- 一致性（Consistency）\n\n  数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。\n\n- 隔离性（Isolation）\n\n   一个事务所做的修改在最终提交以前，对其它事务是不可见的。\n\n- 持久性（Durability）\n\n  一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。\n  \n  使用重做日志来保证持久性。\n\n### 并发一致性问题\n\n### 封锁\n\n\n\n\n\n"]],[0,380],[0,0]]],[1571586229814,["28447@DESKTOP-BE7HQ26",[[1,0,"<!-- GFM-TOC -->\n* [一、事务](#一事务)\n    * [概念](#概念)\n    * [ACID](#acid)\n    * [AUTOCOMMIT](#autocommit)\n* [二、并发一致性问题](#二并发一致性问题)\n    * [丢失修改](#丢失修改)\n    * [读脏数据](#读脏数据)\n    * [不可重复读](#不可重复读)\n    * [幻影读](#幻影读)\n* [三、封锁](#三封锁)\n    * [封锁粒度](#封锁粒度)\n    * [封锁类型](#封锁类型)\n    * [封锁协议](#封锁协议)\n    * [MySQL 隐式与显示锁定](#mysql-隐式与显示锁定)\n* [四、隔离级别](#四隔离级别)\n    * [未提交读（READ UNCOMMITTED）](#未提交读read-uncommitted)\n    * [提交读（READ COMMITTED）](#提交读read-committed)\n    * [可重复读（REPEATABLE READ）](#可重复读repeatable-read)\n    * [可串行化（SERIALIZABLE）](#可串行化serializable)\n* [五、多版本并发控制](#五多版本并发控制)\n    * [版本号](#版本号)\n    * [隐藏的列](#隐藏的列)\n    * [Undo 日志](#undo-日志)\n    * [实现过程](#实现过程)\n    * [快照读与当前读](#快照读与当前读)\n* [六、Next-Key Locks](#六next-key-locks)\n    * [Record Locks](#record-locks)\n    * [Gap Locks](#gap-locks)\n    * [Next-Key Locks](#next-key-locks)\n* [七、关系数据库设计理论](#七关系数据库设计理论)\n    * [函数依赖](#函数依赖)\n    * [异常](#异常)\n    * [范式](#范式)\n* [八、ER 图](#八er-图)\n    * [实体的三种联系](#实体的三种联系)\n    * [表示出现多次的关系](#表示出现多次的关系)\n    * [联系的多向性](#联系的多向性)\n    * [表示子类](#表示子类)\n* [参考资料](#参考资料)\n<!-- GFM-TOC -->\n\n\n# 一、事务\n\n## 概念\n\n事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。\n\n<div align=\"center\"> <img src=\"pics/f74144be-857a-40cd-8ec7-87626ef4e20b.png\" width=\"400px\"> </div><br>\n\n## ACID\n\n### 1. 原子性（Atomicity）\n\n事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。\n\n回滚可以用回滚日志来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。\n\n### 2. 一致性（Consistency）\n\n数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。\n\n### 3. 隔离性（Isolation）\n\n一个事务所做的修改在最终提交以前，对其它事务是不可见的。\n\n### 4. 持久性（Durability）\n\n一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。\n\n使用重做日志来保证持久性。\n\n----\n\n事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：\n\n- 只有满足一致性，事务的执行结果才是正确的。\n- 在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。\n- 在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。\n- 事务满足持久化是为了能应对数据库崩溃的情况。\n\n<div align=\"center\"> <img src=\"pics/417bc315-4409-48c6-83e0-59e8d405429e.jpg\" width=\"400px\"> </div><br>\n\n## AUTOCOMMIT\n\nMySQL 默认采用自动提交模式。也就是说，如果不显式使用`START TRANSACTION`语句来开始一个事务，那么每个查询都会被当做一个事务自动提交。\n\n# 二、并发一致性问题\n\n在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。\n\n## 丢失修改\n\nT<sub>1</sub> 和 T<sub>2</sub> 两个事务都对一个数据进行修改，T<sub>1</sub> 先修改，T<sub>2</sub> 随后修改，T<sub>2</sub> 的修改覆盖了 T<sub>1</sub> 的修改。\n\n<div align=\"center\"> <img src=\"pics/75184b58-c627-4edc-8dcf-605762ebb733.png\" width=\"320px\"> </div><br>\n\n## 读脏数据\n\nT<sub>1</sub> 修改一个数据，T<sub>2</sub> 随后读取这个数据。如果 T<sub>1</sub> 撤销了这次修改，那么 T<sub>2</sub> 读取的数据是脏数据。\n\n<div align=\"center\"> <img src=\"pics/af0e94d9-502d-4531-938f-d46dd29de52d.png\" width=\"360px\"> </div><br>\n\n## 不可重复读\n\nT<sub>2</sub> 读取一个数据，T<sub>1</sub> 对该数据做了修改。如果 T<sub>2</sub> 再次读取这个数据，此时读取的结果和第一次读取的结果不同。\n\n<div align=\"center\"> <img src=\"pics/66ae164c-ad47-4905-895e-51fe38ce797a.png\" width=\"360px\"> </div><br>\n\n## 幻影读\n\nT<sub>1</sub> 读取某个范围的数据，T<sub>2</sub> 在这个范围内插入新的数据，T<sub>1</sub> 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。\n\n<div align=\"center\"> <img src=\"pics/8fdc577d-552d-4b43-b5e4-a8f98bc2cb51.png\" width=\"340px\"> </div><br>\n\n----\n\n产生并发不一致性问题主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。\n\n# 三、封锁\n\n## 封锁粒度\n\nMySQL 中提供了两种封锁粒度：行级锁以及表级锁。\n\n应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。\n\n但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。\n\n在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。\n\n\n## 封锁类型\n\n### 1. 读写锁\n\n- 排它锁（Exclusive），简写为 X 锁，又称写锁。\n- 共享锁（Shared），简写为 S 锁，又称读锁。\n\n有以下两个规定：\n\n- 一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。\n- 一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。\n\n锁的兼容关系如下：\n\n| - | X | S |\n| :--: | :--: | :--: |\n| **X** |×|×|\n| **S** |×|√|\n\n### 2. 意向锁\n\n使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。\n\n在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。\n\n意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：\n\n- 一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；\n- 一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。\n\n通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。\n\n各种锁的兼容关系如下：\n\n| - | X | IX | S | IS |\n| :--: | :--: | :--: | :--: | :--: |\n|  **X**      |×    |×    |×   | ×|\n|  **IX**     |×    |√   |×   | √|\n|  **S**      |×    |×    |√  | √|\n|  **IS**     |×    |√  |√  | √|\n\n解释如下：\n\n- 任意 IS/IX 锁之间都是兼容的，因为它们只是表示想要对表加锁，而不是真正加锁；\n- 这里的 X/IX/S/IS 锁都是表级锁，IX 锁和行级的 X 锁兼容，两个事务可以对两个数据行加 X 锁。（事务 T<sub>1</sub> 想要对数据行 R<sub>1</sub> 加 X 锁，事务 T<sub>2</sub> 想要对同一个表的数据行 R<sub>2</sub> 加 X 锁，两个事务都需要对该表加 IX 锁，但是 IX 锁是兼容的，并且 IX 锁与行级的 X 锁也是兼容的，因此两个事务都能加锁成功，对同一个表中的两个数据行做修改。）\n\n## 封锁协议\n\n### 1. 三级封锁协议\n\n**一级封锁协议** \n\n事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。\n\n可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。\n\n| T<sub>1</sub> | T<sub>2</sub> |\n| :--: | :--: |\n| lock-x(A) | |\n| read A=20 | |\n| | lock-x(A) |\n|  | wait |\n| write A=19 |. |\n| commit |. |\n| unlock-x(A) |. |\n| | obtain |\n| | read A=19 |\n| | write A=21 |\n| | commit |\n| | unlock-x(A)|\n\n**二级封锁协议** \n\n在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。\n\n可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。\n\n| T<sub>1</sub> | T<sub>2</sub> |\n| :--: | :--: |\n| lock-x(A) | |\n| read A=20 | |\n| write A=19 | |\n| | lock-s(A) |\n|  | wait |\n| rollback | .|\n| A=20 |. |\n| unlock-x(A) |. |\n| | obtain |\n| | read A=20 |\n| | unlock-s(A)|\n| | commit |\n\n**三级封锁协议** \n\n在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。\n\n可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。\n\n| T<sub>1</sub> | T<sub>2</sub> |\n| :--: | :--: |\n| lock-s(A) | |\n| read A=20 | |\n|  |lock-x(A) |\n| | wait |\n|  read A=20| . |\n| commit | .|\n| unlock-s(A) |. |\n| | obtain |\n| | read A=20 |\n| | write A=19|\n| | commit |\n| | unlock-X(A)|\n\n### 2. 两段锁协议\n\n加锁和解锁分为两个阶段进行。\n\n可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。\n\n事务遵循两段锁协议是保证可串行化调度的充分条件。例如以下操作满足两段锁协议，它是可串行化调度。\n\n```html\nlock-x(A)...lock-s(B)...lock-s(C)...unlock(A)...unlock(C)...unlock(B)\n```\n\n但不是必要条件，例如以下操作不满足两段锁协议，但是它还是可串行化调度。\n\n```html\nlock-x(A)...unlock(A)...lock-s(B)...unlock(B)...lock-s(C)...unlock(C)\n```\n\n## MySQL 隐式与显示锁定\n\nMySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。\n\nInnoDB 也可以使用特定的语句进行显示锁定：\n\n```sql\nSELECT ... LOCK In SHARE MODE;\nSELECT ... FOR UPDATE;\n```\n\n# 四、隔离级别\n\n## 未提交读（READ UNCOMMITTED）\n\n事务中的修改，即使没有提交，对其它事务也是可见的。\n\n## 提交读（READ COMMITTED）\n\n一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。\n\n## 可重复读（REPEATABLE READ）\n\n保证在同一个事务中多次读取同样数据的结果是一样的。\n\n## 可串行化（SERIALIZABLE）\n\n强制事务串行执行。\n\n需要加锁实现，而其它隔离级别通常不需要。\n\n----\n\n| 隔离级别 | 脏读 | 不可重复读 | 幻影读 |\n| :---: | :---: | :---:| :---: |\n| 未提交读 | √ | √ | √ |\n| 提交读 | × | √ | √ |\n| 可重复读 | × | × | √ |\n| 可串行化 | × | × | × |\n\n# 五、多版本并发控制\n\n多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。\n\n## 版本号\n\n- 系统版本号：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。\n- 事务版本号：事务开始时的系统版本号。\n\n## 隐藏的列\n\nMVCC 在每行记录后面都保存着两个隐藏的列，用来存储两个版本号：\n\n- 创建版本号：指示创建一个数据行的快照时的系统版本号；\n- 删除版本号：如果该快照的删除版本未定义或删除版本号大于当前事务版本号表示该快照有效\n\n## Undo 日志\n\nMVCC 使用到的快照存储在 Undo 日志中，该日志通过回滚指针把一个数据行（Record）的所有快照连接起来。\n\n<div align=\"center\"> <img src=\"pics/e41405a8-7c05-4f70-8092-e961e28d3112.jpg\" width=\"\"/> </div><br>\n\n## 实现过程\n\n以下实现过程针对可重复读隔离级别。\n\n当开始一个事务时，该事务的版本号肯定大于当前所有数据行快照的创建版本号，理解这一点很关键。数据行快照的创建版本号是创建数据行快照时的系统版本号，系统版本号随着创建事务而递增，因此新创建一个事务时，这个事务的系统版本号比之前的系统版本号都大，也就是比所有数据行快照的创建版本号都大。\n\n### 1. SELECT\n\n多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果有一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。\n\n把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于等于 T 的版本号，因为如果大于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。除此之外，T 所要读取的数据行快照的删除版本号必须是未定义或者大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。\n\n### 2. INSERT\n\n将当前系统版本号作为数据行快照的创建版本号。\n\n### 3. DELETE\n\n将当前系统版本号作为数据行快照的删除版本号。\n\n### 4. UPDATE\n\n将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行 DELETE 后执行 INSERT。\n\n## 快照读与当前读\n\n### 1. 快照读\n\n使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销。\n\n```sql\nselect * from table ...;\n```\n\n### 2. 当前读\n\n读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁。\n\n```sql\nselect * from table where ? lock in share mode;\nselect * from table where ? for update;\ninsert;\nupdate;\ndelete;\n```\n\n# 六、Next-Key Locks\n\nNext-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。\n\nMVCC 不能解决幻影读问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。\n\n## Record Locks\n\n锁定一个记录上的索引，而不是记录本身。\n\n如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。\n\n## Gap Locks\n\n锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。\n\n```sql\nSELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;\n```\n\n## Next-Key Locks\n\n它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙，是一个前开后闭区间。例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：\n\n```sql\n(-∞, 10]\n(10, 11]\n(11, 13]\n(13, 20]\n(20, +supremum)\n```\n\n# 七、关系数据库设计理论\n\n## 函数依赖\n\n记 A->B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。\n\n如果 {A1，A2，... ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。\n\n对于 A->B，如果能找到 A 的真子集 A'，使得 A'-> B，那么 A->B 就是部分函数依赖，否则就是完全函数依赖。\n\n对于 A->B，B->C，则 A->C 是一个传递函数依赖。\n\n## 异常\n\n以下的学生课程关系的函数依赖为 {Sno, Cname} -> {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。\n\n| Sno | Sname | Sdept | Mname | Cname | Grade |\n| :---: | :---: | :---: | :---: | :---: |:---:|\n| 1 | 学生-1 | 学院-1 | 院长-1 | 课程-1 | 90 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-2 | 80 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-1 | 100 |\n| 3 | 学生-3 | 学院-2 | 院长-2 | 课程-2 | 95 |\n\n不符合范式的关系，会产生很多异常，主要有以下四种异常：\n\n- 冗余数据：例如 `学生-2` 出现了两次。\n- 修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。\n- 删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 `课程-1` 需要删除第一行和第三行，那么 `学生-1` 的信息就会丢失。\n- 插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。\n\n## 范式\n\n范式理论是为了解决以上提到四种异常。\n\n高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。\n\n### 1. 第一范式 (1NF)\n\n属性不可分。\n\n### 2. 第二范式 (2NF)\n\n每个非主属性完全函数依赖于键码。\n\n可以通过分解来满足。\n\n<font size=4> **分解前** </font><br>\n\n| Sno | Sname | Sdept | Mname | Cname | Grade |\n| :---: | :---: | :---: | :---: | :---: |:---:|\n| 1 | 学生-1 | 学院-1 | 院长-1 | 课程-1 | 90 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-2 | 80 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-1 | 100 |\n| 3 | 学生-3 | 学院-2 | 院长-2 | 课程-2 | 95 |\n\n以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：\n\n- Sno -> Sname, Sdept\n- Sdept -> Mname\n- Sno, Cname-> Grade\n\nGrade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。\n\nSname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。\n\n<font size=4> **分解后** </font><br>\n\n关系-1\n\n| Sno | Sname | Sdept | Mname |\n| :---: | :---: | :---: | :---: |\n| 1 | 学生-1 | 学院-1 | 院长-1 |\n| 2 | 学生-2 | 学院-2 | 院长-2 |\n| 3 | 学生-3 | 学院-2 | 院长-2 |\n\n有以下函数依赖：\n\n- Sno -> Sname, Sdept\n- Sdept -> Mname\n\n关系-2\n\n| Sno | Cname | Grade |\n| :---: | :---: |:---:|\n| 1 | 课程-1 | 90 |\n| 2 | 课程-2 | 80 |\n| 2 | 课程-1 | 100 |\n| 3 | 课程-2 | 95 |\n\n有以下函数依赖：\n\n- Sno, Cname ->  Grade\n\n### 3. 第三范式 (3NF)\n\n非主属性不传递函数依赖于键码。\n\n上面的 关系-1 中存在以下传递函数依赖：\n\n- Sno -> Sdept -> Mname\n\n可以进行以下分解：\n\n关系-11\n\n| Sno | Sname | Sdept |\n| :---: | :---: | :---: |\n| 1 | 学生-1 | 学院-1 |\n| 2 | 学生-2 | 学院-2 |\n| 3 | 学生-3 | 学院-2 |\n\n关系-12\n\n| Sdept | Mname |\n| :---: | :---: |\n| 学院-1 | 院长-1 |\n| 学院-2 | 院长-2 |\n\n# 八、ER 图\n\nEntity-Relationship，有三个组成部分：实体、属性、联系。\n\n用来进行关系型数据库系统的概念设计。\n\n## 实体的三种联系\n\n包含一对一，一对多，多对多三种。\n\n- 如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B；\n- 如果是一对一，画两个带箭头的线段；\n- 如果是多对多，画两个不带箭头的线段。\n\n下图的 Course 和 Student 是一对多的关系。\n\n<div align=\"center\"> <img src=\"pics/1d28ad05-39e5-49a2-a6a1-a6f496adba6a.png\" width=\"380px\"/> </div><br>\n\n## 表示出现多次的关系\n\n一个实体在联系出现几次，就要用几条线连接。\n\n下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。\n\n<div align=\"center\"> <img src=\"pics/ac929ea3-daca-40ec-9e95-4b2fa6678243.png\" width=\"250px\"/> </div><br>\n\n## 联系的多向性\n\n虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。\n\n<div align=\"center\"> <img src=\"pics/5bb1b38a-527e-4802-a385-267dadbd30ba.png\" width=\"350px\"/> </div><br>\n\n## 表示子类\n\n用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。\n\n<div align=\"center\"> <img src=\"pics/14389ea4-8d96-4e96-9f76-564ca3324c1e.png\" width=\"450px\"/> </div><br>\n\n# 参考资料\n\n- AbrahamSilberschatz, HenryF.Korth, S.Sudarshan, 等. 数据库系统概念 [M]. 机械工业出版社, 2006.\n- 施瓦茨. 高性能 MYSQL(第3版)[M]. 电子工业出版社, 2013.\n- 史嘉权. 数据库系统概论[M]. 清华大学出版社有限公司, 2006.\n- [The InnoDB Storage Engine](https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html)\n- [Transaction isolation levels](https://www.slideshare.net/ErnestoHernandezRodriguez/transaction-isolation-levels)\n- [Concurrency Control](http://scanftree.com/dbms/2-phase-locking-protocol)\n- [The Nightmare of Locking, Blocking and Isolation Levels!](https://www.slideshare.net/brshristov/the-nightmare-of-locking-blocking-and-isolation-levels-46391666)\n- [Database Normalization and Normal Forms with an Example](https://aksakalli.github.io/2012/03/12/database-normalization-and-normal-forms-with-an-example.html)\n- [The basics of the InnoDB undo logging and history system](https://blog.jcole.us/2014/04/16/the-basics-of-the-innodb-undo-logging-and-history-system/)\n- [MySQL locking for the busy web developer](https://www.brightbox.com/blog/2013/10/31/on-mysql-locks/)\n- [浅入浅出 MySQL 和 InnoDB](https://draveness.me/mysql-innodb)\n- [Innodb 中的事务隔离级别和锁的关系](https://tech.meituan.com/2014/08/20/innodb-lock.html)\n\n\n\n\n# 微信公众号\n\n\n更多精彩内容将发布在微信公众号 CyC2018 上，你也可以在公众号后台和我交流学习和求职相关的问题。另外，公众号提供了该项目的 PDF 等离线阅读版本，后台回复 \"下载\" 即可领取。公众号也提供了一份技术面试复习大纲，不仅系统整理了面试知识点，而且标注了各个知识点的重要程度，从而帮你理清多而杂的面试知识点，后台回复 \"大纲\" 即可领取。我基本是按照这个大纲来进行复习的，对我拿到了 BAT 头条等 Offer 起到很大的帮助。你们完全可以和我一样根据大纲上列的知识点来进行复习，就不用看很多不重要的内容，也可以知道哪些内容很重要从而多安排一些复习时间。\n\n\n<br><div align=\"center\"><img width=\"510px\" src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/githubio/公众号海报7.png\"></img></div>\n\n"]],[0,0],[13062,13062]]],[1571586265774,["28447@DESKTOP-BE7HQ26",[[-1,909,"#八er-图"]],[909,915],[909,909]]],[1571586271416,["28447@DESKTOP-BE7HQ26",[[1,909,"#八er-图"]],[909,909],[909,915]]]],null,"28447@DESKTOP-BE7HQ26"],["c05c0868-d747-4e9b-b289-1bde5e8509b8",1571626983060,"<!-- GFM-TOC -->\n* [一、事务](#一事务)\n    * [概念](#概念)\n    * [ACID](#acid)\n    * [AUTOCOMMIT](#autocommit)\n* [二、并发一致性问题](#二并发一致性问题)\n    * [丢失修改](#丢失修改)\n    * [读脏数据](#读脏数据)\n    * [不可重复读](#不可重复读)\n    * [幻影读](#幻影读)\n* [三、封锁](#三封锁)\n    * [封锁粒度](#封锁粒度)\n    * [封锁类型](#封锁类型)\n    * [封锁协议](#封锁协议)\n    * [MySQL 隐式与显示锁定](#mysql-隐式与显示锁定)\n* [四、隔离级别](#四隔离级别)\n    * [未提交读（READ UNCOMMITTED）](#未提交读read-uncommitted)\n    * [提交读（READ COMMITTED）](#提交读read-committed)\n    * [可重复读（REPEATABLE READ）](#可重复读repeatable-read)\n    * [可串行化（SERIALIZABLE）](#可串行化serializable)\n* [五、多版本并发控制](#五多版本并发控制)\n    * [版本号](#版本号)\n    * [隐藏的列](#隐藏的列)\n    * [Undo 日志](#undo-日志)\n    * [实现过程](#实现过程)\n    * [快照读与当前读](#快照读与当前读)\n* [六、Next-Key Locks](#六next-key-locks)\n    * [Record Locks](#record-locks)\n    * [Gap Locks](#gap-locks)\n    * [Next-Key Locks](#next-key-locks)\n* [七、关系数据库设计理论](#七关系数据库设计理论)\n    * [函数依赖](#函数依赖)\n    * [异常](#异常)\n    * [范式](#范式)\n* [八、ER 图](#八er-图)\n    * [实体的三种联系](#实体的三种联系)\n    * [表示出现多次的关系](#表示出现多次的关系)\n    * [联系的多向性](#联系的多向性)\n    * [表示子类](#表示子类)\n* [参考资料](#参考资料)\n<!-- GFM-TOC -->\n\n\n# 一、事务\n\n## 概念\n\n事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。\n\n<div align=\"center\"> <img src=\"pics/f74144be-857a-40cd-8ec7-87626ef4e20b.png\" width=\"400px\"> </div><br>\n\n## ACID\n\n### 1. 原子性（Atomicity）\n\n事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。\n\n回滚可以用回滚日志来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。\n\n### 2. 一致性（Consistency）\n\n数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。\n\n### 3. 隔离性（Isolation）\n\n一个事务所做的修改在最终提交以前，对其它事务是不可见的。\n\n### 4. 持久性（Durability）\n\n一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。\n\n使用重做日志来保证持久性。\n\n----\n\n事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：\n\n- 只有满足一致性，事务的执行结果才是正确的。\n- 在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。\n- 在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。\n- 事务满足持久化是为了能应对数据库崩溃的情况。\n\n<div align=\"center\"> <img src=\"pics/417bc315-4409-48c6-83e0-59e8d405429e.jpg\" width=\"400px\"> </div><br>\n\n## AUTOCOMMIT\n\nMySQL 默认采用自动提交模式。也就是说，如果不显式使用`START TRANSACTION`语句来开始一个事务，那么每个查询都会被当做一个事务自动提交。\n\n# 二、并发一致性问题\n\n在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。\n\n## 丢失修改\n\nT<sub>1</sub> 和 T<sub>2</sub> 两个事务都对一个数据进行修改，T<sub>1</sub> 先修改，T<sub>2</sub> 随后修改，T<sub>2</sub> 的修改覆盖了 T<sub>1</sub> 的修改。\n\n<div align=\"center\"> <img src=\"pics/75184b58-c627-4edc-8dcf-605762ebb733.png\" width=\"320px\"> </div><br>\n\n## 读脏数据\n\nT<sub>1</sub> 修改一个数据，T<sub>2</sub> 随后读取这个数据。如果 T<sub>1</sub> 撤销了这次修改，那么 T<sub>2</sub> 读取的数据是脏数据。\n\n<div align=\"center\"> <img src=\"pics/af0e94d9-502d-4531-938f-d46dd29de52d.png\" width=\"360px\"> </div><br>\n\n## 不可重复读\n\nT<sub>2</sub> 读取一个数据，T<sub>1</sub> 对该数据做了修改。如果 T<sub>2</sub> 再次读取这个数据，此时读取的结果和第一次读取的结果不同。\n\n<div align=\"center\"> <img src=\"pics/66ae164c-ad47-4905-895e-51fe38ce797a.png\" width=\"360px\"> </div><br>\n\n## 幻影读\n\nT<sub>1</sub> 读取某个范围的数据，T<sub>2</sub> 在这个范围内插入新的数据，T<sub>1</sub> 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。\n\n<div align=\"center\"> <img src=\"pics/8fdc577d-552d-4b43-b5e4-a8f98bc2cb51.png\" width=\"340px\"> </div><br>\n\n----\n\n产生并发不一致性问题主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。\n\n# 三、封锁\n\n## 封锁粒度\n\nMySQL 中提供了两种封锁粒度：行级锁以及表级锁。\n\n应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。\n\n但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。\n\n在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。\n\n\n## 封锁类型\n\n### 1. 读写锁\n\n- 排它锁（Exclusive），简写为 X 锁，又称写锁。\n- 共享锁（Shared），简写为 S 锁，又称读锁。\n\n有以下两个规定：\n\n- 一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。\n- 一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。\n\n锁的兼容关系如下：\n\n| - | X | S |\n| :--: | :--: | :--: |\n| **X** |×|×|\n| **S** |×|√|\n\n### 2. 意向锁\n\n使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。\n\n在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。\n\n意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：\n\n- 一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；\n- 一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。\n\n通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。\n\n各种锁的兼容关系如下：\n\n| - | X | IX | S | IS |\n| :--: | :--: | :--: | :--: | :--: |\n|  **X**      |×    |×    |×   | ×|\n|  **IX**     |×    |√   |×   | √|\n|  **S**      |×    |×    |√  | √|\n|  **IS**     |×    |√  |√  | √|\n\n解释如下：\n\n- 任意 IS/IX 锁之间都是兼容的，因为它们只是表示想要对表加锁，而不是真正加锁；\n- 这里的 X/IX/S/IS 锁都是表级锁，IX 锁和行级的 X 锁兼容，两个事务可以对两个数据行加 X 锁。（事务 T<sub>1</sub> 想要对数据行 R<sub>1</sub> 加 X 锁，事务 T<sub>2</sub> 想要对同一个表的数据行 R<sub>2</sub> 加 X 锁，两个事务都需要对该表加 IX 锁，但是 IX 锁是兼容的，并且 IX 锁与行级的 X 锁也是兼容的，因此两个事务都能加锁成功，对同一个表中的两个数据行做修改。）\n\n## 封锁协议\n\n### 1. 三级封锁协议\n\n**一级封锁协议** \n\n事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。\n\n可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。\n\n| T<sub>1</sub> | T<sub>2</sub> |\n| :--: | :--: |\n| lock-x(A) | |\n| read A=20 | |\n| | lock-x(A) |\n|  | wait |\n| write A=19 |. |\n| commit |. |\n| unlock-x(A) |. |\n| | obtain |\n| | read A=19 |\n| | write A=21 |\n| | commit |\n| | unlock-x(A)|\n\n**二级封锁协议** \n\n在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。\n\n可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。\n\n| T<sub>1</sub> | T<sub>2</sub> |\n| :--: | :--: |\n| lock-x(A) | |\n| read A=20 | |\n| write A=19 | |\n| | lock-s(A) |\n|  | wait |\n| rollback | .|\n| A=20 |. |\n| unlock-x(A) |. |\n| | obtain |\n| | read A=20 |\n| | unlock-s(A)|\n| | commit |\n\n**三级封锁协议** \n\n在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。\n\n可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。\n\n| T<sub>1</sub> | T<sub>2</sub> |\n| :--: | :--: |\n| lock-s(A) | |\n| read A=20 | |\n|  |lock-x(A) |\n| | wait |\n|  read A=20| . |\n| commit | .|\n| unlock-s(A) |. |\n| | obtain |\n| | read A=20 |\n| | write A=19|\n| | commit |\n| | unlock-X(A)|\n\n### 2. 两段锁协议\n\n加锁和解锁分为两个阶段进行。\n\n可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。\n\n事务遵循两段锁协议是保证可串行化调度的充分条件。例如以下操作满足两段锁协议，它是可串行化调度。\n\n```html\nlock-x(A)...lock-s(B)...lock-s(C)...unlock(A)...unlock(C)...unlock(B)\n```\n\n但不是必要条件，例如以下操作不满足两段锁协议，但是它还是可串行化调度。\n\n```html\nlock-x(A)...unlock(A)...lock-s(B)...unlock(B)...lock-s(C)...unlock(C)\n```\n\n## MySQL 隐式与显示锁定\n\nMySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。\n\nInnoDB 也可以使用特定的语句进行显示锁定：\n\n```sql\nSELECT ... LOCK In SHARE MODE;\nSELECT ... FOR UPDATE;\n```\n\n# 四、隔离级别\n\n## 未提交读（READ UNCOMMITTED）\n\n事务中的修改，即使没有提交，对其它事务也是可见的。\n\n## 提交读（READ COMMITTED）\n\n一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。\n\n## 可重复读（REPEATABLE READ）\n\n保证在同一个事务中多次读取同样数据的结果是一样的。\n\n## 可串行化（SERIALIZABLE）\n\n强制事务串行执行。\n\n需要加锁实现，而其它隔离级别通常不需要。\n\n----\n\n| 隔离级别 | 脏读 | 不可重复读 | 幻影读 |\n| :---: | :---: | :---:| :---: |\n| 未提交读 | √ | √ | √ |\n| 提交读 | × | √ | √ |\n| 可重复读 | × | × | √ |\n| 可串行化 | × | × | × |\n\n# 五、多版本并发控制\n\n多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。\n\n## 版本号\n\n- 系统版本号：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。\n- 事务版本号：事务开始时的系统版本号。\n\n## 隐藏的列\n\nMVCC 在每行记录后面都保存着两个隐藏的列，用来存储两个版本号：\n\n- 创建版本号：指示创建一个数据行的快照时的系统版本号；\n- 删除版本号：如果该快照的删除版本未定义或删除版本号大于当前事务版本号表示该快照有效\n\n## Undo 日志\n\nMVCC 使用到的快照存储在 Undo 日志中，该日志通过回滚指针把一个数据行（Record）的所有快照连接起来。\n\n<div align=\"center\"> <img src=\"pics/e41405a8-7c05-4f70-8092-e961e28d3112.jpg\" width=\"\"/> </div><br>\n\n## 实现过程\n\n以下实现过程针对可重复读隔离级别。\n\n当开始一个事务时，该事务的版本号肯定大于当前所有数据行快照的创建版本号，理解这一点很关键。数据行快照的创建版本号是创建数据行快照时的系统版本号，系统版本号随着创建事务而递增，因此新创建一个事务时，这个事务的系统版本号比之前的系统版本号都大，也就是比所有数据行快照的创建版本号都大。\n\n### 1. SELECT\n\n多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果有一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。\n\n把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于等于 T 的版本号，因为如果大于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。除此之外，T 所要读取的数据行快照的删除版本号必须是未定义或者大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。\n\n### 2. INSERT\n\n将当前系统版本号作为数据行快照的创建版本号。\n\n### 3. DELETE\n\n将当前系统版本号作为数据行快照的删除版本号。\n\n### 4. UPDATE\n\n将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行 DELETE 后执行 INSERT。\n\n## 快照读与当前读\n\n### 1. 快照读\n\n使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销。\n\n```sql\nselect * from table ...;\n```\n\n### 2. 当前读\n\n读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁。\n\n```sql\nselect * from table where ? lock in share mode;\nselect * from table where ? for update;\ninsert;\nupdate;\ndelete;\n```\n\n# 六、Next-Key Locks\n\nNext-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。\n\nMVCC 不能解决幻影读问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。\n\n## Record Locks\n\n锁定一个记录上的索引，而不是记录本身。\n\n如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。\n\n## Gap Locks\n\n锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。\n\n```sql\nSELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;\n```\n\n## Next-Key Locks\n\n它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙，是一个前开后闭区间。例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：\n\n```sql\n(-∞, 10]\n(10, 11]\n(11, 13]\n(13, 20]\n(20, +supremum)\n```\n\n# 七、关系数据库设计理论\n\n## 函数依赖\n\n记 A->B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。\n\n如果 {A1，A2，... ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。\n\n对于 A->B，如果能找到 A 的真子集 A'，使得 A'-> B，那么 A->B 就是部分函数依赖，否则就是完全函数依赖。\n\n对于 A->B，B->C，则 A->C 是一个传递函数依赖。\n\n## 异常\n\n以下的学生课程关系的函数依赖为 {Sno, Cname} -> {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。\n\n| Sno | Sname | Sdept | Mname | Cname | Grade |\n| :---: | :---: | :---: | :---: | :---: |:---:|\n| 1 | 学生-1 | 学院-1 | 院长-1 | 课程-1 | 90 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-2 | 80 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-1 | 100 |\n| 3 | 学生-3 | 学院-2 | 院长-2 | 课程-2 | 95 |\n\n不符合范式的关系，会产生很多异常，主要有以下四种异常：\n\n- 冗余数据：例如 `学生-2` 出现了两次。\n- 修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。\n- 删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 `课程-1` 需要删除第一行和第三行，那么 `学生-1` 的信息就会丢失。\n- 插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。\n\n## 范式\n\n范式理论是为了解决以上提到四种异常。\n\n高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。\n\n### 1. 第一范式 (1NF)\n\n属性不可分。\n\n### 2. 第二范式 (2NF)\n\n每个非主属性完全函数依赖于键码。\n\n可以通过分解来满足。\n\n<font size=4> **分解前** </font><br>\n\n| Sno | Sname | Sdept | Mname | Cname | Grade |\n| :---: | :---: | :---: | :---: | :---: |:---:|\n| 1 | 学生-1 | 学院-1 | 院长-1 | 课程-1 | 90 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-2 | 80 |\n| 2 | 学生-2 | 学院-2 | 院长-2 | 课程-1 | 100 |\n| 3 | 学生-3 | 学院-2 | 院长-2 | 课程-2 | 95 |\n\n以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：\n\n- Sno -> Sname, Sdept\n- Sdept -> Mname\n- Sno, Cname-> Grade\n\nGrade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。\n\nSname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。\n\n<font size=4> **分解后** </font><br>\n\n关系-1\n\n| Sno | Sname | Sdept | Mname |\n| :---: | :---: | :---: | :---: |\n| 1 | 学生-1 | 学院-1 | 院长-1 |\n| 2 | 学生-2 | 学院-2 | 院长-2 |\n| 3 | 学生-3 | 学院-2 | 院长-2 |\n\n有以下函数依赖：\n\n- Sno -> Sname, Sdept\n- Sdept -> Mname\n\n关系-2\n\n| Sno | Cname | Grade |\n| :---: | :---: |:---:|\n| 1 | 课程-1 | 90 |\n| 2 | 课程-2 | 80 |\n| 2 | 课程-1 | 100 |\n| 3 | 课程-2 | 95 |\n\n有以下函数依赖：\n\n- Sno, Cname ->  Grade\n\n### 3. 第三范式 (3NF)\n\n非主属性不传递函数依赖于键码。\n\n上面的 关系-1 中存在以下传递函数依赖：\n\n- Sno -> Sdept -> Mname\n\n可以进行以下分解：\n\n关系-11\n\n| Sno | Sname | Sdept |\n| :---: | :---: | :---: |\n| 1 | 学生-1 | 学院-1 |\n| 2 | 学生-2 | 学院-2 |\n| 3 | 学生-3 | 学院-2 |\n\n关系-12\n\n| Sdept | Mname |\n| :---: | :---: |\n| 学院-1 | 院长-1 |\n| 学院-2 | 院长-2 |\n\n# 八、ER 图\n\nEntity-Relationship，有三个组成部分：实体、属性、联系。\n\n用来进行关系型数据库系统的概念设计。\n\n## 实体的三种联系\n\n包含一对一，一对多，多对多三种。\n\n- 如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B；\n- 如果是一对一，画两个带箭头的线段；\n- 如果是多对多，画两个不带箭头的线段。\n\n下图的 Course 和 Student 是一对多的关系。\n\n<div align=\"center\"> <img src=\"pics/1d28ad05-39e5-49a2-a6a1-a6f496adba6a.png\" width=\"380px\"/> </div><br>\n\n## 表示出现多次的关系\n\n一个实体在联系出现几次，就要用几条线连接。\n\n下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。\n\n<div align=\"center\"> <img src=\"pics/ac929ea3-daca-40ec-9e95-4b2fa6678243.png\" width=\"250px\"/> </div><br>\n\n## 联系的多向性\n\n虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。\n\n<div align=\"center\"> <img src=\"pics/5bb1b38a-527e-4802-a385-267dadbd30ba.png\" width=\"350px\"/> </div><br>\n\n## 表示子类\n\n用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。\n\n<div align=\"center\"> <img src=\"pics/14389ea4-8d96-4e96-9f76-564ca3324c1e.png\" width=\"450px\"/> </div><br>\n\n# 参考资料\n\n- AbrahamSilberschatz, HenryF.Korth, S.Sudarshan, 等. 数据库系统概念 [M]. 机械工业出版社, 2006.\n- 施瓦茨. 高性能 MYSQL(第3版)[M]. 电子工业出版社, 2013.\n- 史嘉权. 数据库系统概论[M]. 清华大学出版社有限公司, 2006.\n- [The InnoDB Storage Engine](https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html)\n- [Transaction isolation levels](https://www.slideshare.net/ErnestoHernandezRodriguez/transaction-isolation-levels)\n- [Concurrency Control](http://scanftree.com/dbms/2-phase-locking-protocol)\n- [The Nightmare of Locking, Blocking and Isolation Levels!](https://www.slideshare.net/brshristov/the-nightmare-of-locking-blocking-and-isolation-levels-46391666)\n- [Database Normalization and Normal Forms with an Example](https://aksakalli.github.io/2012/03/12/database-normalization-and-normal-forms-with-an-example.html)\n- [The basics of the InnoDB undo logging and history system](https://blog.jcole.us/2014/04/16/the-basics-of-the-innodb-undo-logging-and-history-system/)\n- [MySQL locking for the busy web developer](https://www.brightbox.com/blog/2013/10/31/on-mysql-locks/)\n- [浅入浅出 MySQL 和 InnoDB](https://draveness.me/mysql-innodb)\n- [Innodb 中的事务隔离级别和锁的关系](https://tech.meituan.com/2014/08/20/innodb-lock.html)\n\n\n\n\n# 微信公众号\n\n\n更多精彩内容将发布在微信公众号 CyC2018 上，你也可以在公众号后台和我交流学习和求职相关的问题。另外，公众号提供了该项目的 PDF 等离线阅读版本，后台回复 \"下载\" 即可领取。公众号也提供了一份技术面试复习大纲，不仅系统整理了面试知识点，而且标注了各个知识点的重要程度，从而帮你理清多而杂的面试知识点，后台回复 \"大纲\" 即可领取。我基本是按照这个大纲来进行复习的，对我拿到了 BAT 头条等 Offer 起到很大的帮助。你们完全可以和我一样根据大纲上列的知识点来进行复习，就不用看很多不重要的内容，也可以知道哪些内容很重要从而多安排一些复习时间。\n\n\n<br><div align=\"center\"><img width=\"510px\" src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/githubio/公众号海报7.png\"></img></div>\n\n",[[1571626926299,["28447@DESKTOP-BE7HQ26",[[1,10905,"  "],[1,10927,"  "],[1,10928,"  "],[1,10996,"  "],[1,10997,"  "]],[10905,11101],[10905,11111]]],[1571626926637,["28447@DESKTOP-BE7HQ26",[[1,10907,"  "],[1,10931,"  "],[1,10932,"  "],[1,11004,"  "],[1,11005,"  "]],[10905,11111],[10905,11121]]],[1571626927015,["28447@DESKTOP-BE7HQ26",[[1,10909,"  "],[1,10935,"  "],[1,10936,"  "],[1,11012,"  "],[1,11013,"  "]],[10905,11121],[10905,11131]]],[1571636416763,["28447@DESKTOP-BE7HQ26",[[-1,12661,"# 微信公众号\n\n\n更多精彩内容将发布在微信公众号 CyC2018 上，你也可以在公众号后台和我交流学习和求职相关的问题。另外，公众号提供了该项目的 PDF 等离线阅读版本，后台回复 \"下载\" 即可领取。公众号也提供了一份技术面试复习大纲，不仅系统整理了面试知识点，而且标注了各个知识点的重要程度，从而帮你理清多而杂的面试知识点，后台回复 \"大纲\" 即可领取。我基本是按照这个大纲来进行复习的，对我拿到了 BAT 头条等 Offer 起到很大的帮助。你们完全可以和我一样根据大纲上列的知识点来进行复习，就不用看很多不重要的内容，也可以知道哪些内容很重要从而多安排一些复习时间。\n\n\n<br><div align=\"center\"><img width=\"510px\" src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/githubio/公众号海报7.png\"></img></div>\n"]],[12661,13092],[12661,12661]]],[1571636420536,["28447@DESKTOP-BE7HQ26",[[1,11479,"\n"]],[11477,11477],[11478,11478]]],[1571636421048,["28447@DESKTOP-BE7HQ26",[[1,11480,"\n"]],[11478,11478],[11479,11479]]],[1571636421264,["28447@DESKTOP-BE7HQ26",[[1,11481,"\n"]],[11479,11479],[11480,11480]]],[1571636421516,["28447@DESKTOP-BE7HQ26",[[1,11482,"\n"]],[11480,11480],[11481,11481]]],[1571636445830,["28447@DESKTOP-BE7HQ26",[[1,6403,"\n"]],[6402,6402],[6403,6403]]],[1571636446027,["28447@DESKTOP-BE7HQ26",[[1,6404,"\n"]],[6403,6403],[6404,6404]]],[1571636446209,["28447@DESKTOP-BE7HQ26",[[1,6405,"\n"]],[6404,6404],[6405,6405]]],[1571636448126,["28447@DESKTOP-BE7HQ26",[[1,6404,"##"]],[6404,6404],[6406,6406]]],[1571636448809,["28447@DESKTOP-BE7HQ26",[[-1,6405,"#"]],[6406,6406],[6405,6405]]],[1571636449273,["28447@DESKTOP-BE7HQ26",[[1,6405,"  "]],[6405,6405],[6407,6407]]],[1571636452081,["28447@DESKTOP-BE7HQ26",[[1,6407,"四"]],[6407,6407],[6408,6408]]],[1571636452625,["28447@DESKTOP-BE7HQ26",[[-1,6407,"四"]],[6408,6408],[6407,6407]]],[1571636453676,["28447@DESKTOP-BE7HQ26",[[1,6407,"吴"]],[6407,6407],[6408,6408]]],[1571636454102,["28447@DESKTOP-BE7HQ26",[[-1,6407,"吴"]],[6408,6408],[6407,6407]]],[1571636465959,["28447@DESKTOP-BE7HQ26",[[1,6407,"五、 乐观锁&&悲观所"]],[6407,6407],[6418,6418]]],[1571636466943,["28447@DESKTOP-BE7HQ26",[[-1,6417,"所"]],[6418,6418],[6417,6417]]],[1571636468043,["28447@DESKTOP-BE7HQ26",[[1,6417,"锁"]],[6417,6417],[6418,6418]]],[1571636468204,["28447@DESKTOP-BE7HQ26",[[1,6420,"\n"]],[6418,6418],[6419,6419]]],[1571636468399,["28447@DESKTOP-BE7HQ26",[[1,6421,"\n"]],[6419,6419],[6420,6420]]],[1571636468602,["28447@DESKTOP-BE7HQ26",[[1,6422,"\n"]],[6420,6420],[6421,6421]]],[1571636480988,["28447@DESKTOP-BE7HQ26",[[1,6420,"何谓乐观锁和悲观所"]],[6420,6420],[6429,6429]]],[1571636481428,["28447@DESKTOP-BE7HQ26",[[-1,6428,"所"]],[6429,6429],[6428,6428]]],[1571636482550,["28447@DESKTOP-BE7HQ26",[[1,6428,"锁"]],[6428,6428],[6429,6429]]],[1571636482708,["28447@DESKTOP-BE7HQ26",[[1,6432,"\n"]],[6429,6429],[6430,6430]]],[1571636484563,["28447@DESKTOP-BE7HQ26",[[1,6430,"》"]],[6430,6430],[6431,6431]]],[1571636485137,["28447@DESKTOP-BE7HQ26",[[-1,6430,"》"]],[6431,6431],[6430,6430]]],[1571636487624,["28447@DESKTOP-BE7HQ26",[[1,6430,"> ash "]],[6430,6430],[6436,6436]]],[1571636505677,["28447@DESKTOP-BE7HQ26",[[-1,6432,"ash "]],[6436,6436],[6432,6432]]],[1571636508198,["28447@DESKTOP-BE7HQ26",[[1,6432,"leguansuo "]],[6432,6432],[6442,6442]]],[1571636511371,["28447@DESKTOP-BE7HQ26",[[-1,6431," leguansuo "]],[6442,6442],[6431,6431]]],[1571636516293,["28447@DESKTOP-BE7HQ26",[[1,6431," 悲观所"]],[6431,6431],[6435,6435]]],[1571636517384,["28447@DESKTOP-BE7HQ26",[[-1,6434,"所"]],[6435,6435],[6434,6434]]],[1571636536317,["28447@DESKTOP-BE7HQ26",[[1,6434,"锁： 总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。\n————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[6434,6434],[6793,6793]]],[1571636539290,["28447@DESKTOP-BE7HQ26",[[-1,6638,"————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[6638,6793],[6638,6638]]],[1571636542148,["28447@DESKTOP-BE7HQ26",[[1,6641,"\n"]],[6637,6637],[6638,6638]]],[1571636543570,["28447@DESKTOP-BE7HQ26",[[1,6638,"》 "]],[6638,6638],[6640,6640]]],[1571636544223,["28447@DESKTOP-BE7HQ26",[[-1,6638,"》 "]],[6640,6640],[6638,6638]]],[1571636559359,["28447@DESKTOP-BE7HQ26",[[1,6638,"> leg"]],[6638,6638],[6643,6643]]],[1571636560173,["28447@DESKTOP-BE7HQ26",[[-1,6640,"leg"]],[6643,6643],[6640,6640]]],[1571636571528,["28447@DESKTOP-BE7HQ26",[[1,6640,"乐观锁：总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。\n————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[6640,6640],[7011,7011]]],[1571636577351,["28447@DESKTOP-BE7HQ26",[[-1,6856,"————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[6856,7011],[6856,6856]]],[1571636578572,["28447@DESKTOP-BE7HQ26",[[-1,6859,"\n"]],[6856,6856],[6855,6855]]],[1571636580192,["28447@DESKTOP-BE7HQ26",[[-1,6858,"\n"]],[6858,6858],[6857,6857]]],[1571636618456,["28447@DESKTOP-BE7HQ26",[[1,6638,"\n"]],[6637,6637],[6638,6638]]],[1571636688478,["28447@DESKTOP-BE7HQ26",[[-1,6641,"乐观锁："]],[6641,6645],[6641,6641]]],[1571636691120,["28447@DESKTOP-BE7HQ26",[[1,6639,"\n"]],[6638,6638],[6639,6639]]],[1571636691531,["28447@DESKTOP-BE7HQ26",[[1,6639,"乐观锁："]],[6639,6639],[6643,6643]]],[1571636694636,["28447@DESKTOP-BE7HQ26",[[-1,6420,"何谓乐观锁和"]],[6420,6426],[6420,6420]]],[1571636696211,["28447@DESKTOP-BE7HQ26",[[1,6423,"："]],[6423,6423],[6424,6424]]],[1571636698641,["28447@DESKTOP-BE7HQ26",[[-1,6427,"悲观锁： "]],[6427,6432],[6427,6427]]],[1571636736356,["28447@DESKTOP-BE7HQ26",[[1,6789,"****"]],[6789,6789],[6791,6791]]],[1571636739511,["28447@DESKTOP-BE7HQ26",[[1,6820,"****"]],[6820,6820],[6822,6822]]],[1571636741965,["28447@DESKTOP-BE7HQ26",[[-1,6822,"**"]],[6822,6822],[6820,6820]]],[1571636743816,["28447@DESKTOP-BE7HQ26",[[-1,6792,"*"]],[6793,6793],[6792,6792]]],[1571636744041,["28447@DESKTOP-BE7HQ26",[[-1,6791,"*"]],[6792,6792],[6791,6791]]],[1571636749850,["28447@DESKTOP-BE7HQ26",[[-1,6788,"中"]],[6789,6789],[6788,6788]]],[1571636751877,["28447@DESKTOP-BE7HQ26",[[1,6788,"zho"]],[6788,6788],[6791,6791]]],[1571636752683,["28447@DESKTOP-BE7HQ26",[[-1,6788,"zho"]],[6791,6791],[6788,6788]]],[1571636754093,["28447@DESKTOP-BE7HQ26",[[1,6788,"中"]],[6788,6788],[6789,6789]]],[1571636793036,["28447@DESKTOP-BE7HQ26",[[1,6586,"****"]],[6586,6586],[6588,6588]]],[1571636795616,["28447@DESKTOP-BE7HQ26",[[-1,6590,"synchronized"]],[6590,6602],[6590,6590]]],[1571636796820,["28447@DESKTOP-BE7HQ26",[[1,6588,"synchronized"]],[6588,6588],[6600,6600]]],[1571636799561,["28447@DESKTOP-BE7HQ26",[[1,6603,"****"]],[6603,6603],[6605,6605]]],[1571636802952,["28447@DESKTOP-BE7HQ26",[[-1,6607,"ReentrantLock"]],[6607,6620],[6607,6607]]],[1571636805126,["28447@DESKTOP-BE7HQ26",[[1,6606,"ReentrantLock"]],[6606,6606],[6619,6619]]],[1571636805878,["28447@DESKTOP-BE7HQ26",[[-1,6606,"ReentrantLock"]],[6619,6619],[6606,6606]]],[1571636807181,["28447@DESKTOP-BE7HQ26",[[1,6605,"ReentrantLock"]],[6605,6605],[6618,6618]]],[1571636835632,["28447@DESKTOP-BE7HQ26",[[1,6862,"\n"]],[6860,6860],[6861,6861]]],[1571636845971,["28447@DESKTOP-BE7HQ26",[[1,6861,"两种锁的使用场景****"]],[6861,6861],[6871,6871]]],[1571636847991,["28447@DESKTOP-BE7HQ26",[[-1,6871,"**"]],[6871,6871],[6869,6869]]],[1571636850942,["28447@DESKTOP-BE7HQ26",[[1,6861,"**"]],[6861,6861],[6863,6863]]],[1571636861744,["28447@DESKTOP-BE7HQ26",[[-1,6861,"**"]],[6863,6863],[6861,6861]]],[1571636863835,["28447@DESKTOP-BE7HQ26",[[1,6861,"￥"]],[6861,6861],[6862,6862]]],[1571636864353,["28447@DESKTOP-BE7HQ26",[[-1,6861,"￥"]],[6862,6862],[6861,6861]]],[1571636865284,["28447@DESKTOP-BE7HQ26",[[1,6861,"￥￥"]],[6861,6861],[6863,6863]]],[1571636865843,["28447@DESKTOP-BE7HQ26",[[-1,6861,"￥￥"]],[6863,6863],[6861,6861]]],[1571636866909,["28447@DESKTOP-BE7HQ26",[[1,6861,"## "]],[6861,6861],[6864,6864]]],[1571636868398,["28447@DESKTOP-BE7HQ26",[[-1,6872,"**"]],[6874,6874],[6872,6872]]],[1571636869313,["28447@DESKTOP-BE7HQ26",[[1,6874,"\n"]],[6872,6872],[6873,6873]]],[1571639292693,["28447@DESKTOP-BE7HQ26",[[1,6875,"\n"]],[6872,6872],[6873,6873]]],[1571639292942,["28447@DESKTOP-BE7HQ26",[[1,6876,"\n"]],[6873,6873],[6874,6874]]],[1571639336687,["28447@DESKTOP-BE7HQ26",[[1,6873,"le"]],[6873,6873],[6875,6875]]],[1571639337694,["28447@DESKTOP-BE7HQ26",[[-1,6873,"le"]],[6875,6875],[6873,6873]]],[1571639340676,["28447@DESKTOP-BE7HQ26",[[1,6877,"\n"]],[6873,6873],[6874,6874]]],[1571639361171,["28447@DESKTOP-BE7HQ26",[[1,6874,"乐观锁适用于写比较少的情况下（）"]],[6874,6874],[6890,6890]]],[1571639365962,["28447@DESKTOP-BE7HQ26",[[1,6889,"多读场景"]],[6889,6889],[6893,6893]]],[1571639368476,["28447@DESKTOP-BE7HQ26",[[-1,6874,"乐观锁适用于写比较少的情况下（多读场景）"]],[6874,6894],[6874,6874]]],[1571639369742,["28447@DESKTOP-BE7HQ26",[[1,6874,"****"]],[6874,6874],[6876,6876]]],[1571639370015,["28447@DESKTOP-BE7HQ26",[[1,6876,"乐观锁适用于写比较少的情况下（多读场景）"]],[6876,6876],[6896,6896]]],[1571639397606,["28447@DESKTOP-BE7HQ26",[[1,6898,"，即冲突很少的情况下，这样可以省去所得"]],[6898,6898],[6917,6917]]],[1571639398724,["28447@DESKTOP-BE7HQ26",[[-1,6915,"所得"]],[6917,6917],[6915,6915]]],[1571639403600,["28447@DESKTOP-BE7HQ26",[[1,6915,"锁的开销，"]],[6915,6915],[6920,6920]]],[1571639431760,["28447@DESKTOP-BE7HQ26",[[1,6922,"系统的整个吞吐量"]],[6922,6922],[6930,6930]]],[1571639435439,["28447@DESKTOP-BE7HQ26",[[1,6934,"\n"]],[6930,6930],[6931,6931]]],[1571639437308,["28447@DESKTOP-BE7HQ26",[[1,6874,"- "]],[6874,6874],[6876,6876]]],[1571639447308,["28447@DESKTOP-BE7HQ26",[[1,6933,"- ****"]],[6933,6933],[6937,6937]]],[1571639454582,["28447@DESKTOP-BE7HQ26",[[1,6937,"悲观锁适用于i"]],[6937,6937],[6944,6944]]],[1571639456167,["28447@DESKTOP-BE7HQ26",[[-1,6943,"i"]],[6944,6944],[6943,6943]]],[1571639549937,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[1,6946,"\n\n\n"],[-1,6948,"\n"]],[6922,6922],[6948,6948]]],[1571639549937,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[-1,6946,"\n\n\n"],[1,6951,"\n"]],[6948,6948],[6922,6922]]],[1571639481214,["28447@DESKTOP-BE7HQ26",[[1,6943,"多写的场景下（）"]],[6943,6943],[6951,6951]]],[1571639486306,["28447@DESKTOP-BE7HQ26",[[1,6950,"多写场景"]],[6950,6950],[6954,6954]]],[1571639500651,["28447@DESKTOP-BE7HQ26",[[1,6957,"，因为多谢"]],[6957,6957],[6962,6962]]],[1571639500970,["28447@DESKTOP-BE7HQ26",[[-1,6961,"谢"]],[6962,6962],[6961,6961]]],[1571639522004,["28447@DESKTOP-BE7HQ26",[[1,6961,"写的情况下，一般会经常发生冲突，着就会导致"]],[6961,6961],[6982,6982]]],[1571639526316,["28447@DESKTOP-BE7HQ26",[[-1,6977,"着"]],[6978,6978],[6977,6977]]],[1571639527539,["28447@DESKTOP-BE7HQ26",[[1,6977,"这"]],[6977,6977],[6978,6978]]],[1571639530665,["28447@DESKTOP-BE7HQ26",[[1,6982,"长曾"]],[6982,6982],[6984,6984]]],[1571639532042,["28447@DESKTOP-BE7HQ26",[[-1,6982,"长曾"]],[6984,6984],[6982,6982]]],[1571639535719,["28447@DESKTOP-BE7HQ26",[[1,6982,"上层应用"]],[6982,6982],[6986,6986]]],[1571639894937,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[1,6987,"\n\n\n"],[-1,6989,"\n"]],[6922,6922],[6989,6989]]],[1571639894937,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[-1,6987,"\n\n\n"],[1,6992,"\n"]],[6989,6989],[6922,6922]]],[1571639563168,["28447@DESKTOP-BE7HQ26",[[1,6986,"会不断地进行retry，fabn"]],[6986,6986],[7002,7002]]],[1571639564568,["28447@DESKTOP-BE7HQ26",[[-1,6998,"fabn"]],[7002,7002],[6998,6998]]],[1571639570926,["28447@DESKTOP-BE7HQ26",[[1,6998,"反而吉纳谷地了性能"]],[6998,6998],[7007,7007]]],[1571639574995,["28447@DESKTOP-BE7HQ26",[[-1,7000,"吉纳谷地"]],[7004,7004],[7000,7000]]],[1571639577217,["28447@DESKTOP-BE7HQ26",[[1,7000,"降低"]],[7000,7000],[7002,7002]]],[1571639579629,["28447@DESKTOP-BE7HQ26",[[1,7005,"。"]],[7005,7005],[7006,7006]]],[1571639580278,["28447@DESKTOP-BE7HQ26",[[1,7007,"- \n"]],[7006,7006],[7009,7009]]],[1571639580547,["28447@DESKTOP-BE7HQ26",[[-1,7007,"- "]],[7009,7009],[7008,7008]]],[1571639591528,["28447@DESKTOP-BE7HQ26",[[1,7008,"## 乐观锁的"]],[7008,7008],[7015,7015]]],[1571639592669,["28447@DESKTOP-BE7HQ26",[[-1,7014,"的"]],[7015,7015],[7014,7014]]],[1571639598706,["28447@DESKTOP-BE7HQ26",[[1,7014,"的两种实现方式"]],[7014,7014],[7021,7021]]],[1571639599002,["28447@DESKTOP-BE7HQ26",[[1,7024,"\n"]],[7021,7021],[7022,7022]]],[1571639600778,["28447@DESKTOP-BE7HQ26",[[1,7022,"》 "]],[7022,7022],[7024,7024]]],[1571639601392,["28447@DESKTOP-BE7HQ26",[[-1,7022,"》 "]],[7024,7024],[7022,7022]]],[1571639602189,["28447@DESKTOP-BE7HQ26",[[1,7022,"》"]],[7022,7022],[7023,7023]]],[1571639602657,["28447@DESKTOP-BE7HQ26",[[-1,7022,"》"]],[7023,7023],[7022,7022]]],[1571639606712,["28447@DESKTOP-BE7HQ26",[[1,7022,"> leguansuo "]],[7022,7022],[7034,7034]]],[1571639609256,["28447@DESKTOP-BE7HQ26",[[-1,7022,"> leguansuo "]],[7034,7034],[7022,7022]]],[1571639611064,["28447@DESKTOP-BE7HQ26",[[1,7022,"》"]],[7022,7022],[7023,7023]]],[1571639611969,["28447@DESKTOP-BE7HQ26",[[-1,7022,"》"]],[7023,7023],[7022,7022]]],[1571639624899,["28447@DESKTOP-BE7HQ26",[[1,7022,"> 乐观锁一般会使用把那本好"]],[7022,7022],[7036,7036]]],[1571639626217,["28447@DESKTOP-BE7HQ26",[[-1,7032,"把那本好"]],[7036,7036],[7032,7032]]],[1571639637636,["28447@DESKTOP-BE7HQ26",[[1,7032,"版本号控制或者CAS算法实现"]],[7032,7032],[7046,7046]]],[1571639638261,["28447@DESKTOP-BE7HQ26",[[1,7049,"\n"]],[7046,7046],[7047,7047]]],[1571639638447,["28447@DESKTOP-BE7HQ26",[[1,7050,"\n"]],[7047,7047],[7048,7048]]],[1571639647371,["28447@DESKTOP-BE7HQ26",[[1,7048,"1. 版本号控制"]],[7048,7048],[7056,7056]]],[1571639647605,["28447@DESKTOP-BE7HQ26",[[1,7057,"2. \n"]],[7056,7056],[7060,7060]]],[1571639651766,["28447@DESKTOP-BE7HQ26",[[1,7060,"CAS算法"]],[7060,7060],[7065,7065]]],[1571639655144,["28447@DESKTOP-BE7HQ26",[[1,7060,"\n2. "]],[7056,7056],[7060,7060]]],[1571639657000,["28447@DESKTOP-BE7HQ26",[[-1,7057,"2. "]],[7060,7060],[7057,7057]]],[1571639766261,["28447@DESKTOP-BE7HQ26",[[1,7057,"一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。\n————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[7057,7057],[7365,7365]]],[1571639768605,["28447@DESKTOP-BE7HQ26",[[-1,7210,"————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[7210,7365],[7210,7210]]],[1571639775362,["28447@DESKTOP-BE7HQ26",[[1,7220,"3. \n"]],[7219,7219],[7223,7223]]],[1571639776239,["28447@DESKTOP-BE7HQ26",[[-1,7220,"3. "]],[7223,7223],[7221,7221]]],[1571639776809,["28447@DESKTOP-BE7HQ26",[[-1,7222,"\n"]],[7221,7221],[7220,7220]]],[1571639829226,["28447@DESKTOP-BE7HQ26",[[1,7211,"\n"]],[7210,7210],[7211,7211]]],[1571639840671,["28447@DESKTOP-BE7HQ26",[[1,7211,"举例： 当需要修改"]],[7211,7211],[7220,7220]]],[1571639856083,["28447@DESKTOP-BE7HQ26",[[-1,7211,"举例： 当需要修改"]],[7220,7220],[7211,7211]]],[1571639856408,["28447@DESKTOP-BE7HQ26",[[-1,7211,"\n"]],[7211,7211],[7210,7210]]],[1571640168923,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7222,"# "]],[6922,6922],[7224,7224]]],[1571640168923,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7222,"# "]],[7224,7224],[6922,6922]]],[1571640131974,["28447@DESKTOP-BE7HQ26",[[1,7056,"（）"]],[7056,7056],[7058,7058]]],[1571640134306,["28447@DESKTOP-BE7HQ26",[[1,7057,"MVCC"]],[7057,7057],[7061,7061]]],[1571640150649,["28447@DESKTOP-BE7HQ26",[[1,7051,"duo"]],[7051,7051],[7054,7054]]],[1571640151587,["28447@DESKTOP-BE7HQ26",[[-1,7051,"duo"]],[7054,7054],[7051,7051]]],[1571640153061,["28447@DESKTOP-BE7HQ26",[[1,7051,"多"]],[7051,7051],[7052,7052]]],[1571640155360,["28447@DESKTOP-BE7HQ26",[[-1,7054,"号"]],[7055,7055],[7054,7054]]],[1571640157343,["28447@DESKTOP-BE7HQ26",[[1,7054,"并发"]],[7054,7054],[7056,7056]]],[1571640162991,["28447@DESKTOP-BE7HQ26",[[1,7059,"举一个简单的例子：\n\n假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。当需要对账户信息表进行更新的时候，需要首先读取version字段。\n\n操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。\n在操作员 A 操作的过程中，操作员B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。\n操作员 A 完成了修改工作，提交更新之前会先看数据库的版本和自己读取到的版本是否一致，一致的话，就会将数据版本号加1（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。\n操作员 B 完成了操作，提交更新之前会先看数据库的版本和自己读取到的版本是否一致，但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，而自己读取到的版本号为1 ，不满足 “ 当前最后更新的version与操作员第一次读取的版本号相等 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。\n这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。\n————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[7059,7059],[7808,7808]]],[1571640164222,["28447@DESKTOP-BE7HQ26",[[-1,7059,"举一个简单的例子：\n\n假设数据库中帐户信息表中有一个 version 字段，当前值为 1 ；而当前帐户余额字段（ balance ）为 $100 。当需要对账户信息表进行更新的时候，需要首先读取version字段。\n\n操作员 A 此时将其读出（ version=1 ），并从其帐户余额中扣除 $50（ $100-$50 ）。\n在操作员 A 操作的过程中，操作员B 也读入此用户信息（ version=1 ），并从其帐户余额中扣除 $20 （ $100-$20 ）。\n操作员 A 完成了修改工作，提交更新之前会先看数据库的版本和自己读取到的版本是否一致，一致的话，就会将数据版本号加1（ version=2 ），连同帐户扣除后余额（ balance=$50 ），提交至数据库更新，此时由于提交数据版本大于数据库记录当前版本，数据被更新，数据库记录 version 更新为 2 。\n操作员 B 完成了操作，提交更新之前会先看数据库的版本和自己读取到的版本是否一致，但此时比对数据库记录版本时发现，操作员 B 提交的数据版本号为 2 ，而自己读取到的版本号为1 ，不满足 “ 当前最后更新的version与操作员第一次读取的版本号相等 “ 的乐观锁策略，因此，操作员 B 的提交被驳回。\n这样，就避免了操作员 B 用基于 version=1 的旧数据修改的结果覆盖操作员A 的操作结果的可能。\n————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[7808,7808],[7059,7059]]],[1571640229940,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7230,"# "]],[6922,6922],[7232,7232]]],[1571640229940,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7230,"# "]],[7232,7232],[6922,6922]]],[1571640169244,["28447@DESKTOP-BE7HQ26",[[1,7060,"ulti-Version Concurrency Control, MVCM"]],[7059,7059],[7097,7097]]],[1571640170910,["28447@DESKTOP-BE7HQ26",[[-1,7095,"VCM"]],[7097,7097],[7094,7094]]],[1571640412944,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7265,"# "]],[6922,6922],[7267,7267]]],[1571640412944,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7265,"# "]],[7267,7267],[6922,6922]]],[1571640372459,["28447@DESKTOP-BE7HQ26",[[1,7094," "]],[7094,7094],[7095,7095]]],[1571641510950,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7266,"# "]],[6922,6922],[7268,7268]]],[1571641510950,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7266,"# "]],[7268,7268],[6922,6922]]],[1571641510813,["28447@DESKTOP-BE7HQ26",[[1,7264,"即compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数\n\n需要读写的内存值 V\n进行比较的值 A\n拟写入的新值 B\n当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。\n————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[7264,7264],[7670,7670]]],[1571641571933,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7672,"# "]],[6922,6922],[7674,7674]]],[1571641571933,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7672,"# "]],[7674,7674],[6922,6922]]],[1571641515194,["28447@DESKTOP-BE7HQ26",[[-1,7515,"————————————————\n版权声明：本文为CSDN博主「SnailClimb在csdn」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_34337272/article/details/81072874"]],[7515,7670],[7515,7515]]],[1571641518676,["28447@DESKTOP-BE7HQ26",[[1,7265,"****"]],[7265,7265],[7267,7267]]],[1571641523862,["28447@DESKTOP-BE7HQ26",[[-1,7269,"compare and swap（比较与交换）"]],[7269,7292],[7269,7269]]],[1571641524848,["28447@DESKTOP-BE7HQ26",[[1,7267,"compare and swap（比较与交换）"]],[7267,7267],[7290,7290]]],[1571641529485,["28447@DESKTOP-BE7HQ26",[[-1,7299,"无锁算法"]],[7299,7303],[7299,7299]]],[1571641531053,["28447@DESKTOP-BE7HQ26",[[1,7299,"**无锁算法"]],[7299,7299],[7305,7305]]],[1571641531140,["28447@DESKTOP-BE7HQ26",[[-1,7301,"无锁算法"],[1,7305,"**"]],[7305,7305],[7301,7301]]],[1571641532544,["28447@DESKTOP-BE7HQ26",[[1,7301,"无锁算法"]],[7301,7301],[7305,7305]]],[1571643095926,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7525,"# "]],[6922,6922],[7527,7527]]],[1571643095926,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7525,"# "]],[7527,7527],[6922,6922]]],[1571643044573,["28447@DESKTOP-BE7HQ26",[[1,7413,"- "]],[7413,7413],[7415,7415]]],[1571643046581,["28447@DESKTOP-BE7HQ26",[[1,7426,"0"]],[7426,7426],[7427,7427]]],[1571643047281,["28447@DESKTOP-BE7HQ26",[[-1,7426,"0"]],[7427,7427],[7426,7426]]],[1571643047733,["28447@DESKTOP-BE7HQ26",[[1,7426,"- "]],[7426,7426],[7428,7428]]],[1571643049605,["28447@DESKTOP-BE7HQ26",[[1,7437,"- "]],[7437,7437],[7439,7439]]],[1571643084377,["28447@DESKTOP-BE7HQ26",[[1,7448,"\n"]],[7448,7448],[7449,7449]]],[1571643155943,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7532,"# "]],[6922,6922],[7534,7534]]],[1571643155943,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7532,"# "]],[7534,7534],[6922,6922]]],[1571643150766,["28447@DESKTOP-BE7HQ26",[[1,7532,"\n"]],[7531,7531],[7532,7532]]],[1571643150949,["28447@DESKTOP-BE7HQ26",[[1,7533,"\n"]],[7532,7532],[7533,7533]]],[1571643152546,["28447@DESKTOP-BE7HQ26",[[1,7532,"##"]],[7532,7532],[7534,7534]]],[1571643153287,["28447@DESKTOP-BE7HQ26",[[-1,7533,"#"]],[7534,7534],[7533,7533]]],[1571643154640,["28447@DESKTOP-BE7HQ26",[[1,7533," "]],[7533,7533],[7534,7534]]],[1571643216933,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7536,"# "]],[6922,6922],[7538,7538]]],[1571643216933,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7536,"# "]],[7538,7538],[6922,6922]]],[1571643163088,["28447@DESKTOP-BE7HQ26",[[1,7534,"数据库存储引擎"]],[7534,7534],[7541,7541]]],[1571643164881,["28447@DESKTOP-BE7HQ26",[[1,7543,"\n"]],[7541,7541],[7542,7542]]],[1571658645940,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7544,"# "]],[6922,6922],[7546,7546]]],[1571658645940,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7544,"# "]],[7546,7546],[6922,6922]]],[1571658595387,["28447@DESKTOP-BE7HQ26",[[1,7534,"刘"]],[7534,7534],[7535,7535]]],[1571658595959,["28447@DESKTOP-BE7HQ26",[[-1,7534,"刘"]],[7535,7535],[7534,7534]]],[1571658598614,["28447@DESKTOP-BE7HQ26",[[1,7534,"六、"]],[7534,7534],[7536,7536]]],[1571658600176,["28447@DESKTOP-BE7HQ26",[[1,7546,"\n"]],[7543,7543],[7544,7544]]],[1571658602720,["28447@DESKTOP-BE7HQ26",[[1,7544,"MYSQL "]],[7544,7544],[7550,7550]]],[1571662548954,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7553,"# "]],[6922,6922],[7555,7555]]],[1571662548954,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7553,"# "]],[7555,7555],[6922,6922]]],[1571662488800,["28447@DESKTOP-BE7HQ26",[[1,7550,"shi"]],[7550,7550],[7553,7553]]],[1571662489688,["28447@DESKTOP-BE7HQ26",[[-1,7550,"shi"]],[7553,7553],[7550,7550]]],[1571662609953,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7553,"# "]],[6922,6922],[7555,7555]]],[1571662609953,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7553,"# "]],[7555,7555],[6922,6922]]],[1571662586232,["28447@DESKTOP-BE7HQ26",[[1,7550,"常见存储阴影"]],[7550,7550],[7556,7556]]],[1571662587694,["28447@DESKTOP-BE7HQ26",[[-1,7554,"阴影"]],[7556,7556],[7554,7554]]],[1571662589468,["28447@DESKTOP-BE7HQ26",[[1,7554,"引擎"]],[7554,7554],[7556,7556]]],[1571662589687,["28447@DESKTOP-BE7HQ26",[[1,7559,"\n"]],[7556,7556],[7557,7557]]],[1571662592676,["28447@DESKTOP-BE7HQ26",[[-1,7549," "]],[7550,7550],[7549,7549]]],[1571662594951,["28447@DESKTOP-BE7HQ26",[[1,7559,"\n"]],[7555,7555],[7556,7556]]],[1571662607283,["28447@DESKTOP-BE7HQ26",[[1,7544,"\n"]],[7543,7543],[7544,7544]]],[1571662670941,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7561,"# "]],[6922,6922],[7563,7563]]],[1571662670941,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7561,"# "]],[7563,7563],[6922,6922]]],[1571662611169,["28447@DESKTOP-BE7HQ26",[[1,7557,"ino"]],[7557,7557],[7560,7560]]],[1571662612042,["28447@DESKTOP-BE7HQ26",[[-1,7557,"ino"]],[7560,7560],[7557,7557]]],[1571662612193,["28447@DESKTOP-BE7HQ26",[[-1,7560,"\n"]],[7557,7557],[7556,7556]]],[1571662612621,["28447@DESKTOP-BE7HQ26",[[1,7556,"I"]],[7556,7556],[7557,7557]]],[1571662613247,["28447@DESKTOP-BE7HQ26",[[-1,7556,"I"]],[7557,7557],[7556,7556]]],[1571662613715,["28447@DESKTOP-BE7HQ26",[[1,7560,"\n"]],[7556,7556],[7557,7557]]],[1571662614649,["28447@DESKTOP-BE7HQ26",[[1,7557,"IN"]],[7557,7557],[7559,7559]]],[1571662615817,["28447@DESKTOP-BE7HQ26",[[-1,7558,"N"]],[7559,7559],[7558,7558]]],[1571662617747,["28447@DESKTOP-BE7HQ26",[[1,7558,"nnoDBN"]],[7558,7558],[7564,7564]]],[1571662618323,["28447@DESKTOP-BE7HQ26",[[-1,7563,"N"]],[7564,7564],[7563,7563]]],[1571662625929,["28447@DESKTOP-BE7HQ26",[[1,7563,"存储引擎"]],[7563,7563],[7567,7567]]],[1571662626506,["28447@DESKTOP-BE7HQ26",[[1,7571,"\n"]],[7567,7567],[7568,7568]]],[1571662643600,["28447@DESKTOP-BE7HQ26",[[1,7545,"\n"]],[7543,7543],[7544,7544]]],[1571662644736,["28447@DESKTOP-BE7HQ26",[[1,7544,"存储引擎的对比\n\n特性\n\nInnoDB\n\nMyISAM\n\nMEMORY\n\n事务安全\n\n支持\n\n无\n\n无\n\n存储限制\n\n64TB\n\n有\n\n有\n\n空间使用\n\n高\n\n低\n\n低\n\n内存使用\n\n高\n\n低\n\n高\n\n插入数据的速度\n\n低\n\n高\n\n高\n\n对外键的支持\n\n支持\n\n无\n\n无\n————————————————\n版权声明：本文为CSDN博主「法拉利轮子」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_29168493/article/details/79066399"]],[7544,7544],[7825,7825]]],[1571662648515,["28447@DESKTOP-BE7HQ26",[[-1,7544,"存储引擎的对比\n\n特性\n\nInnoDB\n\nMyISAM\n\nMEMORY\n\n事务安全\n\n支持\n\n无\n\n无\n\n存储限制\n\n64TB\n\n有\n\n有\n\n空间使用\n\n高\n\n低\n\n低\n\n内存使用\n\n高\n\n低\n\n高\n\n插入数据的速度\n\n低\n\n高\n\n高\n\n对外键的支持\n\n支持\n\n无\n\n无\n————————————————\n版权声明：本文为CSDN博主「法拉利轮子」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_29168493/article/details/79066399"]],[7825,7825],[7544,7544]]],[1571662737945,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7573,"# "]],[6922,6922],[7575,7575]]],[1571662737945,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7573,"# "]],[7575,7575],[6922,6922]]],[1571662673206,["28447@DESKTOP-BE7HQ26",[[1,7545,"| item      | Model    |  Price | Qty |\n| --------- | -------- | -----: | --: |\n| Laptop    | 13\" Pro  | $1,300 |   1 |\n| Phone     | Plus     |   $800 |   2 |\n| Watch     | Series 3 |   $400 |   3 |\n| Headphone | HD650    |   $350 |   2 |\n"]],[7544,7544],[7786,7786]]],[1571662682121,["28447@DESKTOP-BE7HQ26",[[-1,7547,"item"]],[7547,7551],[7547,7547]]],[1571662688486,["28447@DESKTOP-BE7HQ26",[[1,7547,"存储引擎对比"]],[7547,7547],[7553,7553]]],[1571662692101,["28447@DESKTOP-BE7HQ26",[[-1,7561,"Model"]],[7566,7566],[7561,7561]]],[1571662711984,["28447@DESKTOP-BE7HQ26",[[-1,7624,"Lap"],[-1,7628,"op"]],[7624,7630],[7624,7625]]],[1571662713257,["28447@DESKTOP-BE7HQ26",[[-1,7624,"t"],[1,7625,"疼醒"]],[7624,7624],[7626,7626]]],[1571662714530,["28447@DESKTOP-BE7HQ26",[[-1,7624,"疼醒"]],[7626,7626],[7624,7624]]],[1571662716022,["28447@DESKTOP-BE7HQ26",[[1,7624,"特性"]],[7624,7624],[7626,7626]]],[1571662718263,["28447@DESKTOP-BE7HQ26",[[-1,7660,"Phone"]],[7665,7665],[7660,7660]]],[1571662721558,["28447@DESKTOP-BE7HQ26",[[1,7660,"事务按群"]],[7660,7660],[7664,7664]]],[1571662722316,["28447@DESKTOP-BE7HQ26",[[-1,7662,"按群"]],[7664,7664],[7662,7662]]],[1571662723460,["28447@DESKTOP-BE7HQ26",[[1,7662,"安全"]],[7662,7662],[7664,7664]]],[1571662725675,["28447@DESKTOP-BE7HQ26",[[-1,7699,"Watch  "]],[7706,7706],[7699,7699]]],[1571662731738,["28447@DESKTOP-BE7HQ26",[[1,7699,"存储安全"]],[7699,7699],[7703,7703]]],[1571662734630,["28447@DESKTOP-BE7HQ26",[[-1,7736,"Headphone"]],[7745,7745],[7736,7736]]],[1571662972567,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7793,"# "]],[6922,6922],[7795,7795]]],[1571662972567,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7793,"# "]],[7795,7795],[6922,6922]]],[1571662741057,["28447@DESKTOP-BE7HQ26",[[-1,7701,"安全"]],[7703,7703],[7701,7701]]],[1571662742624,["28447@DESKTOP-BE7HQ26",[[1,7701,"限制"]],[7701,7701],[7703,7703]]],[1571662749173,["28447@DESKTOP-BE7HQ26",[[1,7736,"空间使用"]],[7736,7736],[7740,7740]]],[1571662751590,["28447@DESKTOP-BE7HQ26",[[1,7769,"|           |          |        |     |\n"]],[7768,7768],[7770,7781]]],[1571662751867,["28447@DESKTOP-BE7HQ26",[[-1,7770,"           "],[1,7781,"、"]],[7770,7781],[7771,7771]]],[1571662752265,["28447@DESKTOP-BE7HQ26",[[1,7771,"、、"]],[7771,7771],[7773,7773]]],[1571662753232,["28447@DESKTOP-BE7HQ26",[[-1,7770,"、、、"]],[7773,7773],[7770,7770]]],[1571662758245,["28447@DESKTOP-BE7HQ26",[[1,7770,"内存使用"]],[7770,7770],[7774,7774]]],[1571662762009,["28447@DESKTOP-BE7HQ26",[[1,7802,"|           |          |        |     |\n"]],[7801,7801],[7803,7814]]],[1571662762676,["28447@DESKTOP-BE7HQ26",[[-1,7803,"           "],[1,7814,"\n"]],[7803,7814],[7804,7804]]],[1571662763861,["28447@DESKTOP-BE7HQ26",[[1,7803,"           "],[-1,7803,"\n"]],[7804,7804],[7803,7814]]],[1571662765451,["28447@DESKTOP-BE7HQ26",[[1,7843,"\n"]],[7841,7841],[7842,7842]]],[1571662768690,["28447@DESKTOP-BE7HQ26",[[1,7844,"\n"]],[7841,7841],[7842,7842]]],[1571662776640,["28447@DESKTOP-BE7HQ26",[[1,7806,"插入数据的熟读"]],[7806,7806],[7813,7813]]],[1571662778159,["28447@DESKTOP-BE7HQ26",[[-1,7811,"熟读"]],[7813,7813],[7811,7811]]],[1571662779259,["28447@DESKTOP-BE7HQ26",[[1,7811,"速度"]],[7811,7811],[7813,7813]]],[1571662781004,["28447@DESKTOP-BE7HQ26",[[1,7849,"|           |          |        |     |\n"]],[7848,7848],[7850,7861]]],[1571662784065,["28447@DESKTOP-BE7HQ26",[[-1,7860," "]],[7857,7857],[7856,7856]]],[1571662786121,["28447@DESKTOP-BE7HQ26",[[1,7856,"对外间"]],[7856,7856],[7859,7859]]],[1571662787081,["28447@DESKTOP-BE7HQ26",[[-1,7857,"外间"]],[7859,7859],[7857,7857]]],[1571662790808,["28447@DESKTOP-BE7HQ26",[[1,7857,"外键的支持"]],[7857,7857],[7862,7862]]],[1571662797335,["28447@DESKTOP-BE7HQ26",[[-1,7568,"Price"]],[7568,7573],[7568,7568]]],[1571662799599,["28447@DESKTOP-BE7HQ26",[[-1,7571,"Qty "]],[7571,7575],[7571,7571]]],[1571662815304,["28447@DESKTOP-BE7HQ26",[[-1,7623,"13\" Pr"],[1,7629,"Innn"]],[7623,7623],[7628,7628]]],[1571662816283,["28447@DESKTOP-BE7HQ26",[[-1,7626,"no"]],[7628,7628],[7626,7626]]],[1571662818022,["28447@DESKTOP-BE7HQ26",[[1,7626,"oDBN"]],[7626,7626],[7630,7630]]],[1571662819531,["28447@DESKTOP-BE7HQ26",[[-1,7629,"N"]],[7630,7630],[7629,7629]]],[1571662822590,["28447@DESKTOP-BE7HQ26",[[-1,7633,"$1,300 "]],[7639,7639],[7632,7632]]],[1571662823269,["28447@DESKTOP-BE7HQ26",[[1,7633," "]],[7632,7632],[7633,7633]]],[1571662827207,["28447@DESKTOP-BE7HQ26",[[1,7633,"MyISAM"]],[7633,7633],[7639,7639]]],[1571662829602,["28447@DESKTOP-BE7HQ26",[[-1,7644,"1 "]],[7645,7645],[7643,7643]]],[1571662833225,["28447@DESKTOP-BE7HQ26",[[1,7643,"MEMORY"]],[7643,7643],[7649,7649]]],[1571662837804,["28447@DESKTOP-BE7HQ26",[[-1,7664," Plus"],[1,7669,"z"]],[7664,7669],[7665,7665]]],[1571662838554,["28447@DESKTOP-BE7HQ26",[[1,7665,"hichi"]],[7665,7665],[7670,7670]]],[1571662838676,["28447@DESKTOP-BE7HQ26",[[1,7675," "]],[7670,7670],[7671,7671]]],[1571662839942,["28447@DESKTOP-BE7HQ26",[[-1,7664,"zhichi "]],[7671,7671],[7664,7664]]],[1571662841821,["28447@DESKTOP-BE7HQ26",[[1,7664,"支持"]],[7664,7664],[7666,7666]]],[1571662844658,["28447@DESKTOP-BE7HQ26",[[-1,7675,"$800"]],[7679,7679],[7675,7675]]],[1571662847103,["28447@DESKTOP-BE7HQ26",[[1,7675,"五"]],[7675,7675],[7676,7676]]],[1571662847439,["28447@DESKTOP-BE7HQ26",[[-1,7675,"五"]],[7676,7676],[7675,7675]]],[1571662848518,["28447@DESKTOP-BE7HQ26",[[1,7675,"无"]],[7675,7675],[7676,7676]]],[1571662850323,["28447@DESKTOP-BE7HQ26",[[-1,7681,"2"]],[7682,7682],[7681,7681]]],[1571662851319,["28447@DESKTOP-BE7HQ26",[[1,7681,"无"]],[7681,7681],[7682,7682]]],[1571662853133,["28447@DESKTOP-BE7HQ26",[[-1,7718,"3"]],[7719,7719],[7718,7718]]],[1571662854709,["28447@DESKTOP-BE7HQ26",[[1,7718,"有"]],[7718,7718],[7719,7719]]],[1571662856879,["28447@DESKTOP-BE7HQ26",[[-1,7709,"$400"]],[7713,7713],[7709,7709]]],[1571662859176,["28447@DESKTOP-BE7HQ26",[[1,7709,"有"]],[7709,7709],[7710,7710]]],[1571662862474,["28447@DESKTOP-BE7HQ26",[[-1,7696,"Series3 "]],[7704,7704],[7696,7696]]],[1571662865108,["28447@DESKTOP-BE7HQ26",[[1,7696,"64TB"]],[7696,7696],[7700,7700]]],[1571662867716,["28447@DESKTOP-BE7HQ26",[[-1,7724,"HD650"]],[7724,7729],[7724,7724]]],[1571662868491,["28447@DESKTOP-BE7HQ26",[[1,7724,"gao"]],[7724,7724],[7727,7727]]],[1571662869541,["28447@DESKTOP-BE7HQ26",[[-1,7724,"gao"]],[7727,7727],[7724,7724]]],[1571662870923,["28447@DESKTOP-BE7HQ26",[[1,7724,"搞"]],[7724,7724],[7725,7725]]],[1571662871440,["28447@DESKTOP-BE7HQ26",[[-1,7724,"搞"]],[7725,7725],[7724,7724]]],[1571662872959,["28447@DESKTOP-BE7HQ26",[[1,7724,"高"]],[7724,7724],[7725,7725]]],[1571662875373,["28447@DESKTOP-BE7HQ26",[[-1,7733,"$350"]],[7737,7737],[7733,7733]]],[1571662876345,["28447@DESKTOP-BE7HQ26",[[1,7733,"低"]],[7733,7733],[7734,7734]]],[1571662877949,["28447@DESKTOP-BE7HQ26",[[-1,7739,"2"]],[7740,7740],[7739,7739]]],[1571662880576,["28447@DESKTOP-BE7HQ26",[[1,7739,"高"]],[7739,7739],[7740,7740]]],[1571662883901,["28447@DESKTOP-BE7HQ26",[[1,7753,"低"]],[7753,7753],[7754,7754]]],[1571662886942,["28447@DESKTOP-BE7HQ26",[[1,7764,"高"]],[7764,7764],[7765,7765]]],[1571662889945,["28447@DESKTOP-BE7HQ26",[[1,7773,"高"]],[7773,7773],[7774,7774]]],[1571662892400,["28447@DESKTOP-BE7HQ26",[[1,7805,"低"]],[7805,7805],[7806,7806]]],[1571662895841,["28447@DESKTOP-BE7HQ26",[[1,7815,"高"]],[7815,7815],[7816,7816]]],[1571662905147,["28447@DESKTOP-BE7HQ26",[[-1,7753,"低"],[1,7754,"高"]],[7753,7755],[7755,7755]]],[1571662907780,["28447@DESKTOP-BE7HQ26",[[-1,7764,"高"],[1,7765,"低"]],[7764,7765],[7765,7765]]],[1571662915027,["28447@DESKTOP-BE7HQ26",[[1,7740,"="]],[7740,7740],[7741,7741]]],[1571662916689,["28447@DESKTOP-BE7HQ26",[[-1,7739,"高="]],[7741,7741],[7739,7739]]],[1571662917528,["28447@DESKTOP-BE7HQ26",[[1,7739,"低"]],[7739,7739],[7740,7740]]],[1571662922223,["28447@DESKTOP-BE7HQ26",[[1,7824,"高"]],[7824,7824],[7825,7825]]],[1571662925364,["28447@DESKTOP-BE7HQ26",[[1,7852,"支持"]],[7852,7852],[7854,7854]]],[1571662927997,["28447@DESKTOP-BE7HQ26",[[1,7863,"无"]],[7863,7863],[7864,7864]]],[1571662930652,["28447@DESKTOP-BE7HQ26",[[1,7871,"无"]],[7871,7871],[7872,7872]]],[1571662943410,["28447@DESKTOP-BE7HQ26",[[1,7598,"："]],[7598,7598],[7599,7599]]],[1571662944850,["28447@DESKTOP-BE7HQ26",[[-1,7598,"："]],[7599,7599],[7598,7598]]],[1571662945902,["28447@DESKTOP-BE7HQ26",[[1,7598,":"]],[7598,7598],[7599,7599]]],[1571662947970,["28447@DESKTOP-BE7HQ26",[[1,7608,":"]],[7608,7608],[7609,7609]]],[1571662960763,["28447@DESKTOP-BE7HQ26",[[1,7587,":"]],[7587,7587],[7588,7588]]],[1571662963414,["28447@DESKTOP-BE7HQ26",[[-1,7605,":"]],[7606,7606],[7605,7605]]],[1571662965149,["28447@DESKTOP-BE7HQ26",[[-1,7611,":"]],[7612,7612],[7611,7611]]],[1571662971152,["28447@DESKTOP-BE7HQ26",[[1,7575,":"]],[7575,7575],[7576,7576]]],[1571663767934,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,7910,"# "]],[6922,6922],[7912,7912]]],[1571663767934,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,7910,"# "]],[7912,7912],[6922,6922]]],[1571662974300,["28447@DESKTOP-BE7HQ26",[[-1,7882,"\n"]],[7881,7881],[7880,7880]]],[1571662976009,["28447@DESKTOP-BE7HQ26",[[1,7894,"\n"]],[7893,7893],[7894,7894]]],[1571662978595,["28447@DESKTOP-BE7HQ26",[[1,7895,"1. "]],[7895,7895],[7898,7898]]],[1571663000169,["28447@DESKTOP-BE7HQ26",[[-1,7536,"数据库"],[1,7539,"MYSQL"]],[7536,7539],[7541,7541]]],[1571663002271,["28447@DESKTOP-BE7HQ26",[[1,7884,"=="],[1,7895,"=="]],[7884,7895],[7884,7899]]],[1571663002407,["28447@DESKTOP-BE7HQ26",[[-1,7884,"==MYSQL常见存储引擎=="]],[7884,7899],[7884,7884]]],[1571663002962,["28447@DESKTOP-BE7HQ26",[[-1,7885,"\n"]],[7884,7884],[7883,7883]]],[1571663004087,["28447@DESKTOP-BE7HQ26",[[-1,7884,"\n"]],[7884,7884],[7883,7883]]],[1571663005685,["28447@DESKTOP-BE7HQ26",[[1,7898,"2. \n"]],[7897,7897],[7901,7901]]],[1571663010260,["28447@DESKTOP-BE7HQ26",[[1,7901,"MyISAM"]],[7901,7901],[7907,7907]]],[1571663013409,["28447@DESKTOP-BE7HQ26",[[1,7908,"3. \n"]],[7907,7907],[7911,7911]]],[1571663013846,["28447@DESKTOP-BE7HQ26",[[1,7911,"3"]],[7911,7911],[7912,7912]]],[1571663015334,["28447@DESKTOP-BE7HQ26",[[-1,7911,"3"]],[7912,7912],[7911,7911]]],[1571663018720,["28447@DESKTOP-BE7HQ26",[[1,7911,"MEMORY"]],[7911,7911],[7917,7917]]],[1571663020393,["28447@DESKTOP-BE7HQ26",[[1,7901,"\n2. "]],[7897,7897],[7901,7901]]],[1571663020681,["28447@DESKTOP-BE7HQ26",[[1,7898,"  "]],[7901,7901],[7903,7903]]],[1571663022887,["28447@DESKTOP-BE7HQ26",[[-1,7900,"2. "]],[7903,7903],[7900,7900]]],[1571663024946,["28447@DESKTOP-BE7HQ26",[[-1,7884,"1."]],[7886,7886],[7884,7884]]],[1571663025735,["28447@DESKTOP-BE7HQ26",[[1,7884,"-"]],[7884,7884],[7885,7885]]],[1571663028703,["28447@DESKTOP-BE7HQ26",[[-1,7900,"2."]],[7902,7902],[7900,7900]]],[1571663028951,["28447@DESKTOP-BE7HQ26",[[1,7900,"-"]],[7900,7900],[7901,7901]]],[1571663030443,["28447@DESKTOP-BE7HQ26",[[-1,7909,"3."]],[7911,7911],[7909,7909]]],[1571663030710,["28447@DESKTOP-BE7HQ26",[[1,7909,"-"]],[7909,7909],[7910,7910]]],[1571663533490,["28447@DESKTOP-BE7HQ26",[[-1,7897,"  "],[1,7899,"\n"]],[7899,7899],[7898,7898]]],[1571663534808,["28447@DESKTOP-BE7HQ26",[[1,7898,"INO"]],[7898,7898],[7901,7901]]],[1571663535481,["28447@DESKTOP-BE7HQ26",[[-1,7899,"NO"]],[7901,7901],[7899,7899]]],[1571663537479,["28447@DESKTOP-BE7HQ26",[[1,7899,"nnoDN"]],[7899,7899],[7904,7904]]],[1571663538207,["28447@DESKTOP-BE7HQ26",[[-1,7903,"N"]],[7904,7904],[7903,7903]]],[1571663543230,["28447@DESKTOP-BE7HQ26",[[1,7903,"Bzhu"]],[7903,7903],[7907,7907]]],[1571663543851,["28447@DESKTOP-BE7HQ26",[[-1,7904,"zhu"]],[7907,7907],[7904,7904]]],[1571663545288,["28447@DESKTOP-BE7HQ26",[[1,7904,"主题要"]],[7904,7904],[7907,7907]]],[1571663546938,["28447@DESKTOP-BE7HQ26",[[-1,7904,"主题要"]],[7907,7907],[7904,7904]]],[1571663549789,["28447@DESKTOP-BE7HQ26",[[1,7904,"主要特性"]],[7904,7904],[7908,7908]]],[1571663550065,["28447@DESKTOP-BE7HQ26",[[1,7909,"\n"]],[7908,7908],[7909,7909]]],[1571663552298,["28447@DESKTOP-BE7HQ26",[[1,7909,"位"]],[7909,7909],[7910,7910]]],[1571663557191,["28447@DESKTOP-BE7HQ26",[[-1,7909,"位"],[1,7910,"为MySQL提供了具有提交、回滚和崩溃恢复能力的事务安全（ACID兼容）存储引擎。InnoDB锁定在行级并且也在 SELECT语句中提供一个类似Oracle的非锁定读。这些功能增加了多用户部署和性能。在SQL查询中，可以自由地将InnoDB类型的表和其他MySQL的表类型混合起来，甚至在同一个查询中也可以混合。\n\n\n————————————————\n版权声明：本文为CSDN博主「法拉利轮子」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_29168493/article/details/79066399"]],[7909,7910],[8213,8213]]],[1571663560525,["28447@DESKTOP-BE7HQ26",[[-1,8068,"————————————————\n版权声明：本文为CSDN博主「法拉利轮子」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_29168493/article/details/79066399"]],[8068,8213],[8068,8068]]],[1571663560873,["28447@DESKTOP-BE7HQ26",[[-1,8068,"\n"]],[8068,8068],[8067,8067]]],[1571663561331,["28447@DESKTOP-BE7HQ26",[[-1,8067,"\n"]],[8067,8067],[8066,8066]]],[1571663571234,["28447@DESKTOP-BE7HQ26",[[-1,7884,"- "]],[7884,7886],[7884,7884]]],[1571663571948,["28447@DESKTOP-BE7HQ26",[[1,7884,"****"]],[7884,7884],[7886,7886]]],[1571663575012,["28447@DESKTOP-BE7HQ26",[[-1,7888,"InnoDB存储引擎\n"]],[7888,7899],[7888,7888]]],[1571663576621,["28447@DESKTOP-BE7HQ26",[[1,7886,"InnoDB存储引擎\n"]],[7886,7886],[7897,7897]]],[1571663578103,["28447@DESKTOP-BE7HQ26",[[-1,7896,"\n"]],[7897,7897],[7896,7896]]],[1571663585336,["28447@DESKTOP-BE7HQ26",[[1,7899,"\n"]],[7898,7898],[7899,7899]]],[1571663588445,["28447@DESKTOP-BE7HQ26",[[1,7886,"1. "]],[7886,7886],[7889,7889]]],[1571663615355,["28447@DESKTOP-BE7HQ26",[[-1,7884,"**1."]],[7888,7888],[7884,7884]]],[1571663616995,["28447@DESKTOP-BE7HQ26",[[1,7884,"##"]],[7884,7884],[7886,7886]]],[1571663618761,["28447@DESKTOP-BE7HQ26",[[-1,7897,"**"]],[7899,7899],[7897,7897]]],[1571663622791,["28447@DESKTOP-BE7HQ26",[[1,7899,"### "]],[7899,7899],[7903,7903]]],[1571664048954,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8094,"# "]],[6922,6922],[8096,8096]]],[1571664048954,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8094,"# "]],[8096,8096],[6922,6922]]],[1571663801694,["28447@DESKTOP-BE7HQ26",[[-1,8072,"- "]],[8074,8074],[8072,8072]]],[1571663803593,["28447@DESKTOP-BE7HQ26",[[1,8072,"## "]],[8072,8072],[8075,8075]]],[1571663809933,["28447@DESKTOP-BE7HQ26",[[-1,7893,"存储引擎"]],[7893,7897],[7893,7893]]],[1571663814052,["28447@DESKTOP-BE7HQ26",[[-1,8078,"-"],[1,8079,"#"]],[8078,8079],[8079,8079]]],[1571663814216,["28447@DESKTOP-BE7HQ26",[[1,8079,"#"]],[8079,8079],[8080,8080]]],[1571663814424,["28447@DESKTOP-BE7HQ26",[[1,8081," "]],[8080,8080],[8081,8081]]],[1571663815230,["28447@DESKTOP-BE7HQ26",[[-1,8081," "]],[8081,8081],[8080,8080]]],[1571666488934,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8092,"# "]],[6922,6922],[8094,8094]]],[1571666488934,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8092,"# "]],[8094,8094],[6922,6922]]],[1571666468611,["28447@DESKTOP-BE7HQ26",[[1,8068,"\n"]],[8067,8067],[8068,8068]]],[1571666549935,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8093,"# "]],[6922,6922],[8095,8095]]],[1571666549935,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8093,"# "]],[8095,8095],[6922,6922]]],[1571666526558,["28447@DESKTOP-BE7HQ26",[[-1,7837,"   "]],[7836,7839],[7836,7836]]],[1571666528971,["28447@DESKTOP-BE7HQ26",[[-1,7785,"  "]],[7787,7787],[7785,7785]]],[1571666530582,["28447@DESKTOP-BE7HQ26",[[-1,7832,"   "]],[7834,7835],[7832,7832]]],[1571666531626,["28447@DESKTOP-BE7HQ26",[[1,7832," "]],[7832,7832],[7833,7833]]],[1571666671950,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8086,"# "]],[6922,6922],[8088,8088]]],[1571666671950,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8086,"# "]],[8088,8088],[6922,6922]]],[1571666632390,["28447@DESKTOP-BE7HQ26",[[-1,8086,"# 五、多版本并发控制\n\n多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。\n\n## 版本号\n\n- 系统版本号：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。\n- 事务版本号：事务开始时的系统版本号。\n\n## 隐藏的列\n\nMVCC 在每行记录后面都保存着两个隐藏的列，用来存储两个版本号：\n\n- 创建版本号：指示创建一个数据行的快照时的系统版本号；\n- 删除版本号：如果该快照的删除版本未定义或删除版本号大于当前事务版本号表示该快照有效\n\n## Undo 日志\n\nMVCC 使用到的快照存储在 Undo 日志中，该日志通过回滚指针把一个数据行（Record）的所有快照连接起来。\n\n<div align=\"center\"> <img src=\"pics/e41405a8-7c05-4f70-8092-e961e28d3112.jpg\" width=\"\"/> </div><br>\n\n## 实现过程\n\n以下实现过程针对可重复读隔离级别。\n\n当开始一个事务时，该事务的版本号肯定大于当前所有数据行快照的创建版本号，理解这一点很关键。数据行快照的创建版本号是创建数据行快照时的系统版本号，系统版本号随着创建事务而递增，因此新创建一个事务时，这个事务的系统版本号比之前的系统版本号都大，也就是比所有数据行快照的创建版本号都大。\n\n### 1. SELECT\n\n多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果有一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。\n\n把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于等于 T 的版本号，因为如果大于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。除此之外，T 所要读取的数据行快照的删除版本号必须是未定义或者大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。\n\n### 2. INSERT\n\n将当前系统版本号作为数据行快照的创建版本号。\n\n### 3. DELETE\n\n将当前系统版本号作为数据行快照的删除版本号。\n\n### 4. UPDATE\n\n将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行 DELETE 后执行 INSERT。\n\n## 快照读与当前读\n\n### 1. 快照读\n\n使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销。\n\n```sql\nselect * from table ...;\n```\n\n### 2. 当前读\n\n读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁。\n\n```sql\nselect * from table where ? lock in share mode;\nselect * from table where ? for update;\ninsert;\nupdate;\ndelete;\n```\n\n# 六、Next-Key Locks\n\nNext-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。\n\nMVCC 不能解决幻影读问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。\n\n## Record Locks\n\n锁定一个记录上的索引，而不是记录本身。\n\n如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。\n\n## Gap Locks\n\n锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。\n\n```sql\nSELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;\n```\n\n## Next-Key Locks\n\n它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙，是一个前开后闭区间。例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：\n\n```sql\n(-∞, 10]\n(10, 11]\n(11, 13]\n(13, 20]\n(20, +supremum)\n```\n"]],[8086,10145],[8086,8086]]],[1571666634283,["28447@DESKTOP-BE7HQ26",[[-1,8086,"\n"]],[8086,8086],[8085,8085]]],[1571666634581,["28447@DESKTOP-BE7HQ26",[[-1,8085,"\n"]],[8085,8085],[8084,8084]]],[1571667159938,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8085,"# "]],[6922,6922],[8087,8087]]],[1571667159938,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8085,"# "]],[8087,8087],[6922,6922]]],[1571667147076,["28447@DESKTOP-BE7HQ26",[[1,8072,"\n"]],[8071,8071],[8072,8072]]],[1571667148523,["28447@DESKTOP-BE7HQ26",[[1,8072,"MyISAM基于ISAM存储引擎，并对其进行扩展。它是在Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM拥有较高的插入、查询速度，但不支持事务，不支持外键。"]],[8072,8072],[8160,8160]]],[1571667220935,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8174,"# "]],[6922,6922],[8176,8176]]],[1571667220935,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8174,"# "]],[8176,8176],[6922,6922]]],[1571667180319,["28447@DESKTOP-BE7HQ26",[[1,8161,"\n"]],[8160,8160],[8161,8161]]],[1571667186574,["28447@DESKTOP-BE7HQ26",[[1,8174,"[]"]],[8174,8174],[8176,8176]]],[1571667199072,["28447@DESKTOP-BE7HQ26",[[1,8175,"🔍 | 参考连接"]],[8175,8175],[8184,8184]]],[1571667200864,["28447@DESKTOP-BE7HQ26",[[-1,8182,"连接"]],[8184,8184],[8182,8182]]],[1571667202920,["28447@DESKTOP-BE7HQ26",[[1,8182,"连接"]],[8182,8182],[8184,8184]]],[1571667218650,["28447@DESKTOP-BE7HQ26",[[1,8180,"数据库常见三种数据库"]],[8180,8180],[8190,8190]]],[1571667281948,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8196,"# "]],[6922,6922],[8198,8198]]],[1571667281948,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8196,"# "]],[8198,8198],[6922,6922]]],[1571667223068,["28447@DESKTOP-BE7HQ26",[[1,8190,"存储引擎"]],[8190,8190],[8194,8194]]],[1571667224747,["28447@DESKTOP-BE7HQ26",[[-1,8194,"参考连接"]],[8198,8198],[8194,8194]]],[1571667226300,["28447@DESKTOP-BE7HQ26",[[1,8195,"("]],[8195,8195],[8196,8196]]],[1571667226369,["28447@DESKTOP-BE7HQ26",[[1,8196,"https://)"]],[8196,8196],[8196,8204]]],[1571667227111,["28447@DESKTOP-BE7HQ26",[[1,8196,"["],[1,8200,"://blog.c"],[1,8201,"dn.net/qq_29168493/article/details/79066399](http"],[1,8204,"blog.csdn.net/qq_29168493/article/details/79066399)"]],[8196,8204],[8314,8314]]],[1571667241960,["28447@DESKTOP-BE7HQ26",[[-1,8314,")"]],[8314,8314],[8313,8313]]],[1571667246291,["28447@DESKTOP-BE7HQ26",[[-1,8196,"[](http://blog.csdn.net/qq_29168493/article/details/79066399"]],[8197,8256],[8196,8196]]],[1571667325189,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8255,"# "]],[6922,6922],[8257,8257]]],[1571667325189,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8255,"# "]],[8257,8257],[6922,6922]]],[1571667313529,["28447@DESKTOP-BE7HQ26",[[1,8174,"\n"]],[8171,8171],[8172,8172]]],[1571667313947,["28447@DESKTOP-BE7HQ26",[[1,8172,"MEMORY存储引擎将表中的数据存储到内存中，为查询和引用其他表数据提供快速访问。"]],[8172,8172],[8213,8213]]],[1571667327160,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8297,"# "]],[6922,6922],[8299,8299]]],[1571667327160,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8297,"# "]],[8299,8299],[6922,6922]]],[1571667326569,["28447@DESKTOP-BE7HQ26",[[-1,8215,"\n"]],[8215,8215],[8214,8214]]],[1571667377121,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8296,"# "]],[6922,6922],[8298,8298]]],[1571667377121,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8296,"# "]],[8298,8298],[6922,6922]]],[1571667328436,["28447@DESKTOP-BE7HQ26",[[1,8296,"\n"]],[8295,8295],[8296,8296]]],[1571667559954,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8297,"# "]],[6922,6922],[8299,8299]]],[1571667559954,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8297,"# "]],[8299,8299],[6922,6922]]],[1571667553421,["28447@DESKTOP-BE7HQ26",[[1,8221,"1."]],[8221,8221],[8223,8223]]],[1571667620959,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8299,"# "]],[6922,6922],[8301,8301]]],[1571667620959,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8299,"# "]],[8301,8301],[6922,6922]]],[1571667562806,["28447@DESKTOP-BE7HQ26",[[1,8299,"\n"]],[8297,8297],[8298,8298]]],[1571667563324,["28447@DESKTOP-BE7HQ26",[[1,8298,"[https://www.cnblogs.com/liqiangchn/p/9066686.html](https://www.cnblogs.com/liqiangchn/p/9066686.html)"]],[8298,8298],[8400,8400]]],[1571667564949,["28447@DESKTOP-BE7HQ26",[[-1,8298,"[https://www.cnblogs.com/liqiangchn/p/9066686.html](https://www.cnblogs.com/liqiangchn/p/9066686.html)"]],[8400,8400],[8298,8298]]],[1571667568135,["28447@DESKTOP-BE7HQ26",[[1,8300,"\n"]],[8297,8297],[8298,8298]]],[1571667568831,["28447@DESKTOP-BE7HQ26",[[1,8301,"\n"]],[8298,8298],[8299,8299]]],[1571667569270,["28447@DESKTOP-BE7HQ26",[[1,8299,"[https://www.cnblogs.com/liqiangchn/p/9066686.html](https://www.cnblogs.com/liqiangchn/p/9066686.html)"]],[8299,8299],[8401,8401]]],[1571667575820,["28447@DESKTOP-BE7HQ26",[[-1,8299,"[https://www.cnblogs.com/liqiangchn/p/9066686.html](https://www.cnblogs.com/liqiangchn/p/9066686.html)"]],[8299,8401],[8299,8299]]],[1571667576161,["28447@DESKTOP-BE7HQ26",[[1,8299,"[https://www.cnblogs.com/liqiangchn/p/9066686.html](https://www.cnblogs.com/liqiangchn/p/9066686.html)"]],[8299,8299],[8401,8401]]],[1571667581420,["28447@DESKTOP-BE7HQ26",[[1,8300,"🔍 | 1.数据库常见三种数据库存储引擎]("],[-1,8304,"s"],[-1,8308,"www.cn"],[-1,8318,"s"],[-1,8321,"om/liqiangchn/p/9066686.html](https://www.cnblogs.com/liqiangchn/p/"],[1,8388,"sdn.net/qq_29168493/article/details/7"],[-1,8392,"686.html)\n"],[1,8402,"399)"]],[8299,8402],[8381,8381]]],[1571667583645,["28447@DESKTOP-BE7HQ26",[[-1,8305,"1"]],[8306,8306],[8305,8305]]],[1571667583822,["28447@DESKTOP-BE7HQ26",[[1,8305,"2"]],[8305,8305],[8306,8306]]],[1571667593124,["28447@DESKTOP-BE7HQ26",[[1,8323,"["],[1,8327,"s"],[1,8330,"www.cn"],[1,8334,"s"],[-1,8336,"sdn.net/qq_29168493/article/details/7"],[1,8373,"om/liqiangchn/p/9066686.html](https://www.cnblogs.com/liqiangchn/p/"],[-1,8377,"399"],[1,8380,"686.html)"]],[8323,8380],[8425,8425]]],[1571667598459,["28447@DESKTOP-BE7HQ26",[[-1,8323,"[https://www.cnblogs.com/liqiangchn/p/9066686.html]("]],[8322,8374],[8322,8322]]],[1571667599468,["28447@DESKTOP-BE7HQ26",[[-1,8373,")"]],[8374,8374],[8373,8373]]],[1571667611270,["28447@DESKTOP-BE7HQ26",[[-1,8307,"数据库常见三种数据库存储引擎"],[1,8321,"# [InnoDB&MyISAM](https://www.cnblogs.com/liqiangchn/p/9066686.html)"]],[8307,8321],[8375,8375]]],[1571667615149,["28447@DESKTOP-BE7HQ26",[[-1,8307,"# ["]],[8310,8310],[8307,8307]]],[1571667615995,["28447@DESKTOP-BE7HQ26",[[1,8307," "]],[8307,8307],[8308,8308]]],[1571667619844,["28447@DESKTOP-BE7HQ26",[[1,8321,"对比"]],[8321,8321],[8323,8323]]],[1571667681934,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8429,"# "]],[6922,6922],[8431,8431]]],[1571667681934,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8429,"# "]],[8431,8431],[6922,6922]]],[1571667621411,["28447@DESKTOP-BE7HQ26",[[1,8223," "]],[8223,8223],[8224,8224]]],[1571667632959,["28447@DESKTOP-BE7HQ26",[[-1,8376,"](https://www.cnblogs.com/liqiangchn/p/9066686.html)"]],[8325,8377],[8325,8325]]],[1571667664470,["28447@DESKTOP-BE7HQ26",[[1,7532,"\n"]],[7530,7530],[7531,7531]]],[1571667665921,["28447@DESKTOP-BE7HQ26",[[1,7531,"[https://blog.csdn.net/qq_34337272/article/details/81072874](https://blog.csdn.net/qq_34337272/article/details/81072874)"]],[7531,7531],[7651,7651]]],[1571667680650,["28447@DESKTOP-BE7HQ26",[[-1,7532,"https://blog.csdn.net/qq_34337272/article/details/81072874"]],[7532,7590],[7532,7532]]],[1571667700232,[null,[[-1,6922,"\n\n"],[1,6924,"加大"],[-1,7021,"#"],[1,7022,"\n"],[-1,7046," "],[1,7047,"\n"],[1,8441,"# "]],[6922,6922],[8443,8443]]],[1571667700232,[null,[[1,6922,"\n\n"],[-1,6922,"加大"],[1,7021,"#"],[-1,7021,"\n"],[1,7046," "],[-1,7046,"\n"],[-1,8441,"# "]],[8443,8443],[6922,6922]]],[1571667683842,["28447@DESKTOP-BE7HQ26",[[1,7532,"面试"]],[7532,7532],[7534,7534]]],[1571667684876,["28447@DESKTOP-BE7HQ26",[[-1,7532,"面试"]],[7534,7534],[7532,7532]]],[1571667698971,["28447@DESKTOP-BE7HQ26",[[1,7532,"🔍| 1. 乐观锁和悲观锁"]],[7532,7532],[7546,7546]]]],null,"28447@DESKTOP-BE7HQ26"]]}