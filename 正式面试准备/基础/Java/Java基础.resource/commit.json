{"compress":true,"commitItems":[["622fea71-feb2-4eef-80cf-39c567a72869",1570973559284,"",[[1570973504668,["28447@DESKTOP-BE7HQ26",[[1,0,"# Java基础\n\n\n\n"]],[0,0],[11,11]]],[1570973506375,["28447@DESKTOP-BE7HQ26",[[1,10,"# 一、数据类型\n\n## [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#11%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B)1.1基本类型\n\n*   byte/8\n*   char/16 [长度和编码有关，ASCII码中char占一个字节，UTF-8是不定长编码，编码的长度是动态的]\n*   short/16\n*   int/32\n*   float/32\n*   long/64\n*   double/64\n*   boolean/8 [理论上只占据一个bit，但是实际是占据了一个byte]\n\n其中 单位是bit, 一个bit代表一个1或者0，是计算机的基本单位\n\n整数型：byte，short，int，long；\n\n浮点型：float，double\n\n布尔型：boolean\n\n字符型：char\n\n## [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#12-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B)1.2 包装类型\n\n基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。\n\n```source-java\nInteger x = 2;     // 装箱 调用了 Integer.valueOf(2)\nint y = x;         // 拆箱 调用了 X.intValue()\n```\n\n## [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#13-%E7%BC%93%E5%AD%98%E6%B1%A0)1.3 缓存池\n\nnew Integer(123) 与 Integer.valueOf(123) 的区别在于：\n\n*   new Integer(123) 每次都会新建一个对象；\n*   Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\n\n```source-java\nInteger x = new Integer(123);\nInteger y = new Integer(123);\nSystem.out.println(x == y);    // false\nInteger z = Integer.valueOf(123);\nInteger k = Integer.valueOf(123);\nSystem.out.println(z == k);   // true\n```\n\nvalueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\n\n```source-java\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n\n在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\n\n编译器会在自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。\n\n```source-java\nInteger m = 123;\nInteger n = 123;\nSystem.out.println(m == n); // true\n```\n\n# [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#%E4%BA%8Cstring)二、String\n\n## [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#%E6%A6%82%E8%A7%88)概览\n\nString 被声明为 final，因此它不可被继承。(Integer 等包装类也不能被继承）\n\n在 Java 8 中，String 内部使用 char 数组存储数据。\n\n```source-java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n}\n```\n\n在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 `coder` 来标识使用了哪种编码。\n\n```source-java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final byte[] value;\n\n    /** The identifier of the encoding used to encode the bytes in {@code value}. */\n    private final byte coder;\n}\n```\n\nvalue 数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。\n\n## [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#string-stringbuffer-and-stringbuilder)String, StringBuffer and StringBuilder\n\n**1\\. 可变性**\n\n*   String 不可变\n*   StringBuffer 和 StringBuilder 可变\n\n**2\\. 线程安全**\n\n*   String 不可变，因此是线程安全的\n*   StringBuilder 不是线程安全的\n*   StringBuffer 是线程安全的，内部使用 synchronized 进行同步"]],[10,10],[3313,3313]]],[1570973515068,["28447@DESKTOP-BE7HQ26",[[-1,9,"\n"]],[10,10],[9,9]]],[1570973517414,["28447@DESKTOP-BE7HQ26",[[-1,0,"# Java基础"]],[0,8],[0,0]]],[1570973518965,["28447@DESKTOP-BE7HQ26",[[-1,0,"\n"]],[1,1],[0,0]]],[1570973546828,["28447@DESKTOP-BE7HQ26",[[-1,479,"[](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#12-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B)1"]],[479,653],[479,479]]],[1570973549208,["28447@DESKTOP-BE7HQ26",[[1,479,"2"],[-1,2301," "],[1,2302," "],[-1,2309," "],[1,2310," "]],[479,479],[480,480]]],[1570973581424,["28447@DESKTOP-BE7HQ26",[[-1,0,"# 一、数据类型\n\n## [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#11%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B)1.1基本类型\n\n*   byte/8\n*   char/16 [长度和编码有关，ASCII码中char占一个字节，UTF-8是不定长编码，编码的长度是动态的]\n*   short/16\n*   int/32\n*   float/32\n*   long/64\n*   double/64\n*   boolean/8 [理论上只占据一个bit，但是实际是占据了一个byte]\n\n其中 单位是bit, 一个bit代表一个1或者0，是计算机的基本单位\n\n整数型：byte，short，int，long；\n\n浮点型：float，double\n\n布尔型：boolean\n\n字符型：char\n\n## 2.2 包装类型\n\n基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。\n\n```source-java\nInteger x = 2;     // 装箱 调用了 Integer.valueOf(2)\nint y = x;         // 拆箱 调用了 X.intValue()\n```\n\n## [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#13-%E7%BC%93%E5%AD%98%E6%B1%A0)1.3 缓存池\n\nnew Integer(123) 与 Integer.valueOf(123) 的区别在于：\n\n*   new Integer(123) 每次都会新建一个对象；\n*   Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\n\n```source-java\nInteger x = new Integer(123);\nInteger y = new Integer(123);\nSystem.out.println(x == y);    // false\nInteger z = Integer.valueOf(123);\nInteger k = Integer.valueOf(123);\nSystem.out.println(z == k);   // true\n```\n\nvalueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\n\n```source-java\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n\n在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\n\n编译器会在自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。\n\n```source-java\nInteger m = 123;\nInteger n = 123;\nSystem.out.println(m == n); // true\n```\n\n# [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#%E4%BA%8Cstring)二、String\n\n## [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#%E6%A6%82%E8%A7%88)概览\n\nString 被声明为 final，因此它不可被继承。(Integer 等包装类也不能被继承）\n\n在 Java 8 中，String 内部使用 char 数组存储数据。\n\n```source-java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n}\n```\n\n在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 `coder` 来标识使用了哪种编码。\n\n```source-java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final byte[] value;\n\n    /** The identifier of the encoding used to encode the bytes in {@code value}. */\n    private final byte coder;\n}\n```\n\nvalue 数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。\n\n## [](https://github.com/Dannymeng/Interview-experience/blob/master/%E6%95%B4%E7%90%86%E9%9B%86%E5%90%88/Java/Java%E5%9F%BA%E7%A1%80.md#string-stringbuffer-and-stringbuilder)String, StringBuffer and StringBuilder\n\n**1\\. 可变性**\n\n*   String 不可变\n*   StringBuffer 和 StringBuilder 可变\n\n**2\\. 线程安全**\n\n*   String 不可变，因此是线程安全的\n*   StringBuilder 不是线程安全的\n*   StringBuffer 是线程安全的，内部使用 synchronized 进行同步\n\n"]],[0,3132],[0,0]]],[1570973581814,["28447@DESKTOP-BE7HQ26",[[1,0,"<!-- GFM-TOC -->\n\n\n\n# 一、数据类型\n\n## 1.1基本类型\n\n- byte/8\n- char/16  [长度和编码有关，ASCII码中char占一个字节，UTF-8是不定长编码，编码的长度是动态的]\n- short/16\n- int/32\n- float/32\n- long/64\n- double/64\n- boolean/8  [理论上只占据一个bit，但是实际是占据了一个byte]\n\n其中 单位是bit, 一个bit代表一个1或者0，是计算机的基本单位\n\n整数型：byte，short，int，long；\n\n浮点型：float，double\n\n布尔型：boolean\n\n字符型：char\n\n## 1.2 包装类型\n\n基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。\n\n```java\nInteger x = 2;     // 装箱 调用了 Integer.valueOf(2)\nint y = x;         // 拆箱 调用了 X.intValue()\n```\n\n\n\n## 1.3 缓存池\n\nnew Integer(123) 与 Integer.valueOf(123) 的区别在于：\n\n- new Integer(123) 每次都会新建一个对象；\n- Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\n\n```java\nInteger x = new Integer(123);\nInteger y = new Integer(123);\nSystem.out.println(x == y);    // false\nInteger z = Integer.valueOf(123);\nInteger k = Integer.valueOf(123);\nSystem.out.println(z == k);   // true\n```\n\nvalueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\n\n```java\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n\n在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\n\n编译器会在自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。\n\n```java\nInteger m = 123;\nInteger n = 123;\nSystem.out.println(m == n); // true\n```\n\n\n\n# 二、String\n\n## 概览\n\nString 被声明为 final，因此它不可被继承。(Integer 等包装类也不能被继承）\n\n在 Java 8 中，String 内部使用 char 数组存储数据。\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n}\n```\n\n在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 `coder` 来标识使用了哪种编码。\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final byte[] value;\n\n    /** The identifier of the encoding used to encode the bytes in {@code value}. */\n    private final byte coder;\n}\n```\n\nvalue 数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。\n\n## String, StringBuffer and StringBuilder\n\n**1. 可变性**\n\n- String 不可变\n- StringBuffer 和 StringBuilder 可变\n\n**2. 线程安全**\n\n- String 不可变，因此是线程安全的\n- StringBuilder 不是线程安全的\n- StringBuffer 是线程安全的，内部使用 synchronized 进行同步"]],[0,0],[2274,2274]]],[1570973583942,["28447@DESKTOP-BE7HQ26",[[-1,19,"\n"]],[19,19],[18,18]]],[1570973584716,["28447@DESKTOP-BE7HQ26",[[-1,18,"\n"]],[18,18],[17,17]]],[1570973585215,["28447@DESKTOP-BE7HQ26",[[-1,17,"\n"]],[17,17],[16,16]]],[1570973585712,["28447@DESKTOP-BE7HQ26",[[-1,0,"<!-- GFM-TOC -->"]],[16,16],[0,0]]],[1570973586833,["28447@DESKTOP-BE7HQ26",[[-1,0,"\n"]],[1,1],[0,0]]],[1570973616727,["28447@DESKTOP-BE7HQ26",[[1,22,"\n"]],[20,20],[21,21]]],[1570973616940,["28447@DESKTOP-BE7HQ26",[[1,23,"\n"]],[21,21],[22,22]]],[1570973617136,["28447@DESKTOP-BE7HQ26",[[1,24,"\n"]],[22,22],[23,23]]],[1570973635274,["28447@DESKTOP-BE7HQ26",[[1,23,"| item      | Model    |  Price | Qty |\n| --------- | -------- | -----: | --: |\n| Laptop    | 13\" Pro  | $1,300 |   1 |\n| Phone     | Plus     |   $800 |   2 |\n| Watch     | Series 3 |   $400 |   3 |\n| Headphone | HD650    |   $350 |   2 |"]],[23,23],[264,264]]],[1570973643654,["28447@DESKTOP-BE7HQ26",[[-1,248,"  $350 |   2 |"]],[248,262],[248,248]]],[1570973646515,["28447@DESKTOP-BE7HQ26",[[-1,209," $400 |   3 |"]],[209,222],[209,209]]],[1570973647905,["28447@DESKTOP-BE7HQ26",[[-1,167,"   $800 |   2 |"]],[167,182],[167,167]]],[1570973649116,["28447@DESKTOP-BE7HQ26",[[-1,127," $1,300 |   1 |"]],[127,142],[127,127]]],[1570973650708,["28447@DESKTOP-BE7HQ26",[[-1,88,"-----: | --: |"]],[88,102],[88,88]]],[1570973652250,["28447@DESKTOP-BE7HQ26",[[-1,49,"Price | Qty |"]],[49,62],[49,49]]],[1570973660384,["28447@DESKTOP-BE7HQ26",[[-1,25,"item  "],[1,31,"B"]],[25,31],[25,26]]],[1570973661669,["28447@DESKTOP-BE7HQ26",[[1,26,"yte"]],[25,25],[29,29]]],[1570973665276,["28447@DESKTOP-BE7HQ26",[[-1,35,"Model"]],[40,40],[35,35]]],[1570973665803,["28447@DESKTOP-BE7HQ26",[[1,35,"1"]],[35,35],[36,36]]],[1570973667800,["28447@DESKTOP-BE7HQ26",[[1,35," "]],[35,35],[36,36]]],[1570973672402,["28447@DESKTOP-BE7HQ26",[[-1,25,"Byte "]],[30,30],[25,25]]],[1570973673640,["28447@DESKTOP-BE7HQ26",[[1,25,"sh"]],[25,25],[27,27]]],[1570973674127,["28447@DESKTOP-BE7HQ26",[[-1,25,"sh"]],[27,27],[25,25]]],[1570973676850,["28447@DESKTOP-BE7HQ26",[[1,25,"数据类型"]],[25,25],[29,29]]],[1570973679618,["28447@DESKTOP-BE7HQ26",[[-1,35,"1"]],[36,36],[35,35]]],[1570973682948,["28447@DESKTOP-BE7HQ26",[[1,35,"大小（）"]],[35,35],[39,39]]],[1570973685020,["28447@DESKTOP-BE7HQ26",[[1,38,"B"]],[38,38],[39,39]]],[1570973688222,["28447@DESKTOP-BE7HQ26",[[-1,88,"13\"Pro  "]],[96,96],[88,88]]],[1570973688461,["28447@DESKTOP-BE7HQ26",[[1,88,"1"]],[88,88],[89,89]]],[1570973691541,["28447@DESKTOP-BE7HQ26",[[-1,76,"Laptop "]],[83,83],[76,76]]],[1570973692909,["28447@DESKTOP-BE7HQ26",[[1,76,"Bye"]],[76,76],[79,79]]],[1570973693841,["28447@DESKTOP-BE7HQ26",[[-1,78,"e"]],[79,79],[78,78]]],[1570973694399,["28447@DESKTOP-BE7HQ26",[[1,78,"te"]],[78,78],[80,80]]],[1570973696653,["28447@DESKTOP-BE7HQ26",[[-1,91,"Phone"]],[96,96],[91,91]]],[1570973698280,["28447@DESKTOP-BE7HQ26",[[1,91,"char"]],[91,91],[95,95]]],[1570973701274,["28447@DESKTOP-BE7HQ26",[[-1,102,"Plus"]],[106,106],[102,102]]],[1570973703111,["28447@DESKTOP-BE7HQ26",[[1,102,"2"]],[102,102],[103,103]]],[1570973706889,["28447@DESKTOP-BE7HQ26",[[-1,112,"Watch"]],[117,117],[112,112]]],[1570973708793,["28447@DESKTOP-BE7HQ26",[[1,112,"short"]],[112,112],[117,117]]],[1570973713535,["28447@DESKTOP-BE7HQ26",[[-1,124,"Series3 "]],[132,132],[124,124]]],[1570973716049,["28447@DESKTOP-BE7HQ26",[[1,124,"2"]],[124,124],[125,125]]],[1570973719978,["28447@DESKTOP-BE7HQ26",[[-1,132,"Headphone"]],[141,141],[132,132]]],[1570973721346,["28447@DESKTOP-BE7HQ26",[[1,132,"int"]],[132,132],[135,135]]],[1570973724357,["28447@DESKTOP-BE7HQ26",[[-1,138,"HD650"]],[143,143],[138,138]]],[1570973728692,["28447@DESKTOP-BE7HQ26",[[1,138,"4"]],[138,138],[139,139]]],[1570973730187,["28447@DESKTOP-BE7HQ26",[[1,144,"\n"]],[144,144],[145,145]]],[1570973731481,["28447@DESKTOP-BE7HQ26",[[1,145,"\\\\\\"]],[145,145],[148,148]]],[1570973732598,["28447@DESKTOP-BE7HQ26",[[-1,145,"\\\\\\"]],[148,148],[145,145]]],[1570973733474,["28447@DESKTOP-BE7HQ26",[[1,145,"|||"]],[145,145],[148,148]]],[1570973736919,["28447@DESKTOP-BE7HQ26",[[1,146,"float"]],[146,146],[151,151]]],[1570973739985,["28447@DESKTOP-BE7HQ26",[[1,152,"4"]],[152,152],[153,153]]],[1570973740879,["28447@DESKTOP-BE7HQ26",[[1,154,"\n"]],[154,154],[155,155]]],[1570973742630,["28447@DESKTOP-BE7HQ26",[[1,155,"|||"]],[155,155],[158,158]]],[1570973744782,["28447@DESKTOP-BE7HQ26",[[1,156,"long"]],[156,156],[160,160]]],[1570973749482,["28447@DESKTOP-BE7HQ26",[[1,161,"8"]],[161,161],[162,162]]],[1570973750336,["28447@DESKTOP-BE7HQ26",[[1,163,"\n"]],[163,163],[164,164]]],[1570973754605,["28447@DESKTOP-BE7HQ26",[[1,164,"double"]],[164,164],[170,170]]],[1570973757510,["28447@DESKTOP-BE7HQ26",[[1,164,"|"]],[164,164],[165,165]]],[1570973759461,["28447@DESKTOP-BE7HQ26",[[1,171,"||"]],[171,171],[173,173]]],[1570973760850,["28447@DESKTOP-BE7HQ26",[[1,172,"8"]],[172,172],[173,173]]],[1570973761499,["28447@DESKTOP-BE7HQ26",[[1,174,"\n"]],[174,174],[175,175]]],[1570973762551,["28447@DESKTOP-BE7HQ26",[[1,175,"|||"]],[175,175],[178,178]]],[1570973765653,["28447@DESKTOP-BE7HQ26",[[1,176,"boolean"]],[176,176],[183,183]]],[1570973768073,["28447@DESKTOP-BE7HQ26",[[1,184,"8"]],[184,184],[185,185]]],[1570973784434,["28447@DESKTOP-BE7HQ26",[[1,47,"sh"]],[47,47],[49,49]]],[1570973785045,["28447@DESKTOP-BE7HQ26",[[-1,47,"sh"]],[49,49],[47,47]]],[1570973786245,["28447@DESKTOP-BE7HQ26",[[1,47,"shuo,"]],[47,47],[52,52]]],[1570973787432,["28447@DESKTOP-BE7HQ26",[[-1,47,"shuo,"]],[52,52],[47,47]]],[1570973790682,["28447@DESKTOP-BE7HQ26",[[1,47,"说明|"]],[47,47],[50,50]]],[1570973794110,["28447@DESKTOP-BE7HQ26",[[-1,49,"|"]],[50,50],[49,49]]],[1570973794844,["28447@DESKTOP-BE7HQ26",[[1,49,"|"]],[49,49],[50,50]]],[1570973796349,["28447@DESKTOP-BE7HQ26",[[1,49," "]],[49,49],[50,50]]],[1570973797510,["28447@DESKTOP-BE7HQ26",[[1,77,"|"]],[77,77],[78,78]]],[1570973802337,["28447@DESKTOP-BE7HQ26",[[1,77,"-------"]],[77,77],[84,84]]],[1570973803940,["28447@DESKTOP-BE7HQ26",[[1,100,"|"]],[100,100],[101,101]]],[1570973829578,["28447@DESKTOP-BE7HQ26",[[1,100,"长度和编码有关，ASCII码中char占一个字节，UTF-8是不定长编码，编码的长度是动态的"]],[100,100],[146,146]]],[1570973943908,["28447@DESKTOP-BE7HQ26",[[1,66,":"]],[66,66],[67,67]]],[1570973946741,["28447@DESKTOP-BE7HQ26",[[1,75,":"]],[75,75],[76,76]]],[1570973949482,["28447@DESKTOP-BE7HQ26",[[1,78,":"]],[78,78],[79,79]]],[1570973951663,["28447@DESKTOP-BE7HQ26",[[1,87,":"]],[87,87],[88,88]]],[1570973954546,["28447@DESKTOP-BE7HQ26",[[-1,79," "]],[80,80],[79,79]]],[1570973960873,["28447@DESKTOP-BE7HQ26",[[1,64,"："]],[64,64],[65,65]]],[1570973963607,["28447@DESKTOP-BE7HQ26",[[1,54,"："]],[54,54],[55,55]]],[1570973967106,["28447@DESKTOP-BE7HQ26",[[-1,54,"："]],[55,55],[54,54]]],[1570973967937,["28447@DESKTOP-BE7HQ26",[[1,54,":"]],[54,54],[55,55]]],[1570973970188,["28447@DESKTOP-BE7HQ26",[[-1,65,"："]],[66,66],[65,65]]],[1570973971019,["28447@DESKTOP-BE7HQ26",[[1,65,":"]],[65,65],[66,66]]],[1570973976186,["28447@DESKTOP-BE7HQ26",[[-1,64," "]],[65,65],[64,64]]],[1570973981311,["28447@DESKTOP-BE7HQ26",[[-1,87,":"]],[88,88],[87,87]]],[1570973988018,["28447@DESKTOP-BE7HQ26",[[1,87,":"]],[87,87],[88,88]]],[1570974072986,["28447@DESKTOP-BE7HQ26",[[1,250,"|"]],[250,250],[251,251]]],[1570974074127,["28447@DESKTOP-BE7HQ26",[[1,250,"理论上只占据一个bit，但是实际是占据了一个byte"]],[250,250],[276,276]]],[1570974089275,["28447@DESKTOP-BE7HQ26",[[-1,92,"B"]],[93,93],[92,92]]],[1570974089716,["28447@DESKTOP-BE7HQ26",[[1,92,"b"]],[92,92],[93,93]]],[1570974102876,["28447@DESKTOP-BE7HQ26",[[-1,279,"- byte/8\n- char/16  [长度和编码有关，ASCII码中char占一个字节，UTF-8是不定长编码，编码的长度是动态的]\n- short/16\n- int/32\n- float/32\n- long/64\n- double/64\n- boolean/8  [理论上只占据一个bit，但是实际是占据了一个byte]"]],[279,442],[279,279]]],[1570974103280,["28447@DESKTOP-BE7HQ26",[[-1,280,"\n"]],[279,279],[278,278]]],[1570974104221,["28447@DESKTOP-BE7HQ26",[[-1,279,"\n"]],[280,280],[279,279]]],[1570974118082,["28447@DESKTOP-BE7HQ26",[[1,281,"1B=8bit"]],[281,281],[288,288]]],[1570974119464,["28447@DESKTOP-BE7HQ26",[[1,289," "]],[289,289],[290,290]]],[1570974123265,["28447@DESKTOP-BE7HQ26",[[-1,290,"单位是bit, "]],[297,297],[289,289]]],[1570974124260,["28447@DESKTOP-BE7HQ26",[[1,289,","]],[289,289],[290,290]]],[1570974128321,["28447@DESKTOP-BE7HQ26",[[-1,315,"\n"]],[315,315],[314,314]]],[1570974129327,["28447@DESKTOP-BE7HQ26",[[1,315,"\n"]],[314,314],[315,315]]],[1570974185031,["28447@DESKTOP-BE7HQ26",[[1,316,"\n"]],[315,315],[316,316]]],[1570974186747,["28447@DESKTOP-BE7HQ26",[[1,316,"$$"]],[316,316],[318,318]]],[1570974186786,["28447@DESKTOP-BE7HQ26",[[1,319,"\n$$\n\n"]],[318,318],[319,319]]],[1570974188291,["28447@DESKTOP-BE7HQ26",[[1,319,"\\lbrace"]],[319,319],[326,326]]],[1570974251072,["28447@DESKTOP-BE7HQ26",[[-1,319,"\\lbrace"],[1,326,"x"]],[319,326],[319,320]]],[1570974252657,["28447@DESKTOP-BE7HQ26",[[-1,319,"x"]],[320,320],[319,319]]],[1570974254207,["28447@DESKTOP-BE7HQ26",[[1,319,"x-"]],[319,319],[321,321]]],[1570974255092,["28447@DESKTOP-BE7HQ26",[[-1,320,"-"]],[321,321],[320,320]]],[1570974260058,["28447@DESKTOP-BE7HQ26",[[1,320,"=\\left{}"]],[320,320],[328,328]]],[1570974263028,["28447@DESKTOP-BE7HQ26",[[1,326,"\\"]],[326,326],[327,327]]],[1570974273793,["28447@DESKTOP-BE7HQ26",[[-1,328,"}"]],[329,329],[328,328]]],[1570974283687,["28447@DESKTOP-BE7HQ26",[[-1,318,"\n"]],[319,319],[318,318]]],[1570974284825,["28447@DESKTOP-BE7HQ26",[[1,318," b"]],[318,318],[320,320]]],[1570974285921,["28447@DESKTOP-BE7HQ26",[[-1,319,"b"]],[320,320],[319,319]]],[1570974286237,["28447@DESKTOP-BE7HQ26",[[1,319,"\n"]],[319,319],[320,320]]],[1570974294856,["28447@DESKTOP-BE7HQ26",[[1,330,"\n"]],[329,329],[330,330]]],[1570974299300,["28447@DESKTOP-BE7HQ26",[[1,330,"\\begin{}"]],[330,330],[338,338]]],[1570974300164,["28447@DESKTOP-BE7HQ26",[[-1,337,"}"]],[338,338],[337,337]]],[1570974302620,["28447@DESKTOP-BE7HQ26",[[1,337,"aligned"]],[337,337],[344,344]]],[1570974304185,["28447@DESKTOP-BE7HQ26",[[1,345,"\n"]],[344,344],[345,345]]],[1570974311905,["28447@DESKTOP-BE7HQ26",[[-1,319,"\nx"],[1,321,"f(x)"],[-1,329,"\n"],[1,330," "],[-1,344,"\n\n"],[1,346,"} x & = & \\cos(t) \\\\ y & = & \\sin(t) \\\\ z & = & \\frac xy \\end{aligned} \\right. "]],[316,348],[427,427]]],[1570974316510,["28447@DESKTOP-BE7HQ26",[[1,425,"\n"]],[425,425],[426,426]]],[1570974318383,["28447@DESKTOP-BE7HQ26",[[1,324,"\n"]],[324,324],[325,325]]],[1570974320946,["28447@DESKTOP-BE7HQ26",[[1,333,"\n"]],[333,333],[334,334]]],[1570974325395,["28447@DESKTOP-BE7HQ26",[[-1,333,"\n"]],[334,334],[333,333]]],[1570974329232,["28447@DESKTOP-BE7HQ26",[[-1,324,"\n"]],[325,325],[324,324]]],[1570974331820,["28447@DESKTOP-BE7HQ26",[[1,332,"\n"]],[332,332],[333,333]]],[1570974335581,["28447@DESKTOP-BE7HQ26",[[1,349,"\n"]],[349,349],[350,350]]],[1570974340703,["28447@DESKTOP-BE7HQ26",[[1,369,"\n"]],[369,369],[370,370]]],[1570974342815,["28447@DESKTOP-BE7HQ26",[[1,389,"\n"]],[389,389],[390,390]]],[1570974347800,["28447@DESKTOP-BE7HQ26",[[1,406,"\n"]],[406,406],[407,407]]],[1570974349913,["28447@DESKTOP-BE7HQ26",[[-1,407," "]],[408,408],[407,407]]],[1570974352297,["28447@DESKTOP-BE7HQ26",[[1,421,"\n"]],[421,421],[422,422]]],[1570974357648,["28447@DESKTOP-BE7HQ26",[[1,319,"\n"]],[319,319],[320,320]]],[1570974360589,["28447@DESKTOP-BE7HQ26",[[1,316,"\n"]],[315,315],[316,316]]],[1570974363892,["28447@DESKTOP-BE7HQ26",[[1,315,"$$$$"]],[315,315],[319,319]]],[1570974365435,["28447@DESKTOP-BE7HQ26",[[1,317,"\n"]],[317,317],[318,318]]],[1570974366912,["28447@DESKTOP-BE7HQ26",[[1,318,"\n"]],[317,317],[318,318]]],[1570974368720,["28447@DESKTOP-BE7HQ26",[[1,318,"f"]],[318,318],[319,319]]],[1570974369397,["28447@DESKTOP-BE7HQ26",[[-1,318,"f"]],[319,319],[318,318]]],[1570974372290,["28447@DESKTOP-BE7HQ26",[[-1,327,"f(x)="]],[327,332],[327,327]]],[1570974380205,["28447@DESKTOP-BE7HQ26",[[1,318,"\\left{"]],[318,318],[324,324]]],[1570974382643,["28447@DESKTOP-BE7HQ26",[[1,325,"\n"]],[324,324],[325,325]]],[1570974390687,["28447@DESKTOP-BE7HQ26",[[1,325,"\\begin{}"]],[325,325],[333,333]]],[1570974393556,["28447@DESKTOP-BE7HQ26",[[1,332,"aligned"]],[332,332],[339,339]]],[1570974394979,["28447@DESKTOP-BE7HQ26",[[1,341,"\n"]],[340,340],[341,341]]],[1570974398086,["28447@DESKTOP-BE7HQ26",[[1,341,"\\end"]],[341,341],[345,345]]],[1570974399191,["28447@DESKTOP-BE7HQ26",[[1,345,"{}"]],[345,345],[347,347]]],[1570974402391,["28447@DESKTOP-BE7HQ26",[[1,346,"aligned"]],[346,346],[353,353]]],[1570974404411,["28447@DESKTOP-BE7HQ26",[[1,355,"\n"]],[354,354],[355,355]]],[1570974410733,["28447@DESKTOP-BE7HQ26",[[1,355,"\\right."]],[355,355],[362,362]]],[1570974425269,["28447@DESKTOP-BE7HQ26",[[1,323,"\\"],[1,324," "],[1,340," \nx & = & \\cos(t) \\\\ \ny & = & \\sin(t) \\\\ \nz & = & \\frac xy"],[1,354," "],[1,362," "]],[318,362],[424,424]]],[1570974427745,["28447@DESKTOP-BE7HQ26",[[-1,344,"x & = & \\cos(t) \\\\ \ny & = & \\sin(t) \\\\ \nz & = & \\frac xy"]],[344,400],[344,344]]],[1570974428636,["28447@DESKTOP-BE7HQ26",[[-1,344,"\n"]],[344,344],[343,343]]],[1570974433657,["28447@DESKTOP-BE7HQ26",[[1,344,"\n"]],[343,343],[344,344]]],[1570974434217,["28447@DESKTOP-BE7HQ26",[[1,344,"x & = & \\cos(t) \\\\ \ny & = & \\sin(t) \\\\ \nz & = & \\frac xy"]],[344,344],[344,400]]],[1570974434614,["28447@DESKTOP-BE7HQ26",[[-1,323,"\\"],[-1,325," "],[-1,342," \nx & = & \\cos(t) \\\\ \ny & = & \\sin(t) \\\\ \nz & = & \\frac xy"],[-1,414," "],[-1,423," "]],[424,424],[318,362]]],[1570974452190,["28447@DESKTOP-BE7HQ26",[[-1,361,"."]],[362,362],[361,361]]],[1570974453502,["28447@DESKTOP-BE7HQ26",[[1,361,"."]],[361,361],[362,362]]],[1570974461184,["28447@DESKTOP-BE7HQ26",[[1,341,"\n"]],[340,340],[341,341]]],[1570974462680,["28447@DESKTOP-BE7HQ26",[[-1,341,"\n"]],[341,341],[340,340]]],[1570974471549,["28447@DESKTOP-BE7HQ26",[[-1,315,"$$\n\\left{\n\\begin{aligned}\n\\end{aligned}\n\\right.\n$$"]],[315,365],[315,315]]],[1570974472689,["28447@DESKTOP-BE7HQ26",[[1,315,"$$\n\\left{\n\\begin{aligned}\n\\end{aligned}\n\\right.\n$$"]],[315,315],[365,365]]],[1570974491772,["28447@DESKTOP-BE7HQ26",[[1,323,"\\"]],[323,323],[324,324]]],[1570974494742,["28447@DESKTOP-BE7HQ26",[[1,342,"\n"]],[341,341],[342,342]]],[1570974502927,["28447@DESKTOP-BE7HQ26",[[1,342,"zhen"]],[342,342],[346,346]]],[1570974503845,["28447@DESKTOP-BE7HQ26",[[-1,342,"zhen"]],[346,346],[342,342]]],[1570974505961,["28447@DESKTOP-BE7HQ26",[[1,342,"整形"]],[342,342],[344,344]]],[1570974507579,["28447@DESKTOP-BE7HQ26",[[-1,342,"整形"]],[344,344],[342,342]]],[1570974510726,["28447@DESKTOP-BE7HQ26",[[1,342,"整型"]],[342,342],[344,344]]],[1570974512649,["28447@DESKTOP-BE7HQ26",[[1,345,"\n"]],[344,344],[345,345]]],[1570974514926,["28447@DESKTOP-BE7HQ26",[[1,345,"按时的"]],[345,345],[348,348]]],[1570974517164,["28447@DESKTOP-BE7HQ26",[[1,344,"、、"]],[344,344],[346,346]]],[1570974518086,["28447@DESKTOP-BE7HQ26",[[-1,345,"、"]],[346,346],[345,345]]],[1570974518287,["28447@DESKTOP-BE7HQ26",[[-1,344,"、"]],[345,345],[344,344]]],[1570974519010,["28447@DESKTOP-BE7HQ26",[[1,344,"\\\\"]],[344,344],[346,346]]],[1570974520628,["28447@DESKTOP-BE7HQ26",[[1,344," "]],[344,344],[345,345]]],[1570974522574,["28447@DESKTOP-BE7HQ26",[[-1,348,"按时的"]],[351,351],[348,348]]],[1570974523277,["28447@DESKTOP-BE7HQ26",[[1,348,"f"]],[348,348],[349,349]]],[1570974523695,["28447@DESKTOP-BE7HQ26",[[-1,348,"f"]],[349,349],[348,348]]],[1570974524073,["28447@DESKTOP-BE7HQ26",[[1,348,"zi"]],[348,348],[350,350]]],[1570974524636,["28447@DESKTOP-BE7HQ26",[[-1,348,"zi"]],[350,350],[348,348]]],[1570974532309,["28447@DESKTOP-BE7HQ26",[[1,348,"字符型 \\\\"]],[348,348],[354,354]]],[1570974532872,["28447@DESKTOP-BE7HQ26",[[1,355,"\n"]],[354,354],[355,355]]],[1570974540767,["28447@DESKTOP-BE7HQ26",[[1,355,"buer"]],[355,355],[359,359]]],[1570974541769,["28447@DESKTOP-BE7HQ26",[[-1,355,"buer"]],[359,359],[355,355]]],[1570974545447,["28447@DESKTOP-BE7HQ26",[[1,355,"布尔型"]],[355,355],[358,358]]],[1570974570648,["28447@DESKTOP-BE7HQ26",[[1,346,"left\\{\n\\begin{aligned}\n整型 \\\\\n字符型 \\\\\n布尔型\n\\end{aligned}\n\\right.\\"]],[345,345],[407,407]]],[1570974609408,["28447@DESKTOP-BE7HQ26",[[1,413,"：char"]],[413,413],[418,418]]],[1570974614498,["28447@DESKTOP-BE7HQ26",[[1,425,":boolean"]],[425,425],[433,433]]],[1570974771970,["28447@DESKTOP-BE7HQ26",[[-1,315,"$$\n\\left\\{\n\\begin{aligned}\n整型 \\left\\{\n\\begin{aligned}\n整型 \\\\\n字符型 \\\\\n布尔型\n\\end{aligned}\n\\right.\\\\\n字符型：char \\\\\n布尔型:boolean\n\\end{aligned}\n\\right.\n$$"]],[315,458],[315,315]]],[1570974776036,["28447@DESKTOP-BE7HQ26",[[-1,317,"$$ \n\\left\\{ \n\\begin{aligned} \nx & = & \\cos(t) \\\\ \ny & = & \\sin(t) \\\\ \nz & = & \\frac xy\n\\end{aligned} \n\\right. \n$$"]],[317,430],[317,317]]],[1570974776538,["28447@DESKTOP-BE7HQ26",[[-1,318,"\n"]],[317,317],[316,316]]],[1570974913117,["28447@DESKTOP-BE7HQ26",[[-1,318,"整数型：byte，short，int，long；\n\n浮点型：float，double\n\n布尔型：boolean\n\n字符型：char\n\n"]],[316,383],[316,316]]],[1570974914646,["28447@DESKTOP-BE7HQ26",[[-1,317,"\n"]],[316,316],[315,315]]],[1570974915901,["28447@DESKTOP-BE7HQ26",[[1,315,"！"]],[315,315],[316,316]]],[1570974916639,["28447@DESKTOP-BE7HQ26",[[-1,315,"！"]],[316,316],[315,315]]],[1570974919547,["28447@DESKTOP-BE7HQ26",[[1,315,"![]("]],[315,315],[319,319]]],[1570974919575,["28447@DESKTOP-BE7HQ26",[[1,319,"https://)"]],[319,319],[319,327]]],[1570974920337,["28447@DESKTOP-BE7HQ26",[[1,327,"github.com/Dannymeng/picture/blob/master/2018083015380793.png?raw=true"]],[319,327],[397,397]]],[1570974979611,["28447@DESKTOP-BE7HQ26",[[-1,104,"长度和编码有关，ASCII码中char占一个字节，UTF-8是不定长编码，编码的长度是动态的"]],[104,150],[104,104]]],[1570974981965,["28447@DESKTOP-BE7HQ26",[[1,126,"|"]],[126,126],[127,127]]],[1570974982721,["28447@DESKTOP-BE7HQ26",[[1,126,"长度和编码有关，ASCII码中char占一个字节，UTF-8是不定长编码，编码的长度是动态的"]],[126,126],[172,172]]],[1570975014321,["28447@DESKTOP-BE7HQ26",[[-1,248,"8"]],[249,249],[248,248]]],[1570975014547,["28447@DESKTOP-BE7HQ26",[[1,248,"1"]],[248,248],[249,249]]],[1570977464691,["28447@DESKTOP-BE7HQ26",[[1,401,"\n"]],[399,399],[400,400]]],[1570977464909,["28447@DESKTOP-BE7HQ26",[[1,402,"\n"]],[400,400],[401,401]]],[1570977465115,["28447@DESKTOP-BE7HQ26",[[1,403,"\n"]],[401,401],[402,402]]],[1570977472385,["28447@DESKTOP-BE7HQ26",[[1,404,"\n"]],[400,400],[401,401]]],[1570977472981,["28447@DESKTOP-BE7HQ26",[[1,401,"chu"]],[401,401],[404,404]]],[1570977473799,["28447@DESKTOP-BE7HQ26",[[-1,401,"chu"]],[404,404],[401,401]]],[1570977480716,["28447@DESKTOP-BE7HQ26",[[1,401,"出题："]],[401,401],[404,404]]],[1570977480920,["28447@DESKTOP-BE7HQ26",[[1,408,"\n"]],[404,404],[405,405]]],[1570977482768,["28447@DESKTOP-BE7HQ26",[[1,405,"  如何"]],[405,405],[409,409]]],[1570977484115,["28447@DESKTOP-BE7HQ26",[[1,409,"转换"]],[409,409],[411,411]]],[1570977488663,["28447@DESKTOP-BE7HQ26",[[-1,401,"出题"]],[403,403],[401,401]]],[1570977490490,["28447@DESKTOP-BE7HQ26",[[1,401,"面试题"]],[401,401],[404,404]]],[1570977491575,["28447@DESKTOP-BE7HQ26",[[1,405,"："]],[404,404],[405,405]]],[1570977492529,["28447@DESKTOP-BE7HQ26",[[-1,405,"："]],[406,406],[405,405]]],[1570977496768,["28447@DESKTOP-BE7HQ26",[[-1,410,"转换"]],[412,412],[410,410]]],[1570977504389,["28447@DESKTOP-BE7HQ26",[[1,410,"实现byte和char转换"]],[410,410],[423,423]]],[1570977505475,["28447@DESKTOP-BE7HQ26",[[1,424,"  \n"]],[423,423],[426,426]]],[1570977505773,["28447@DESKTOP-BE7HQ26",[[-1,424,"  "],[1,426,"\n"]],[426,426],[425,425]]],[1570977505963,["28447@DESKTOP-BE7HQ26",[[1,429,"\n"]],[425,425],[426,426]]],[1570977533788,["28447@DESKTOP-BE7HQ26",[[1,424,"1、"]],[424,424],[426,426]]],[1570977534993,["28447@DESKTOP-BE7HQ26",[[-1,424,"1、"]],[426,426],[424,424]]],[1570977536998,["28447@DESKTOP-BE7HQ26",[[-1,407," "]],[407,407],[406,406]]],[1570977537559,["28447@DESKTOP-BE7HQ26",[[-1,405,"\n"]],[406,406],[405,405]]],[1570977540833,["28447@DESKTOP-BE7HQ26",[[1,421,"？"]],[421,421],[422,422]]],[1570977541093,["28447@DESKTOP-BE7HQ26",[[1,429,"\n"]],[422,422],[423,423]]],[1570977543603,["28447@DESKTOP-BE7HQ26",[[1,423,"··"]],[423,423],[425,425]]],[1570977544340,["28447@DESKTOP-BE7HQ26",[[-1,423,"··"]],[425,425],[423,423]]],[1570977546169,["28447@DESKTOP-BE7HQ26",[[1,423,"```java"]],[423,423],[430,430]]],[1570977546691,["28447@DESKTOP-BE7HQ26",[[1,437,"\n"]],[430,430],[431,431]]],[1570977550194,["28447@DESKTOP-BE7HQ26",[[1,431,"```"]],[431,431],[434,434]]],[1570977551914,["28447@DESKTOP-BE7HQ26",[[1,431,"\n"]],[430,430],[431,431]]],[1570977552090,["28447@DESKTOP-BE7HQ26",[[1,432,"\n"]],[431,431],[432,432]]],[1570977554418,["28447@DESKTOP-BE7HQ26",[[1,423,"\n"]],[422,422],[423,423]]],[1570977555678,["28447@DESKTOP-BE7HQ26",[[1,423,"shi"]],[423,423],[426,426]]],[1570977556303,["28447@DESKTOP-BE7HQ26",[[-1,423,"shi"]],[426,426],[423,423]]],[1570977557555,["28447@DESKTOP-BE7HQ26",[[1,423,"1"]],[423,423],[424,424]]],[1570977558092,["28447@DESKTOP-BE7HQ26",[[-1,423,"1"]],[424,424],[423,423]]],[1570977561788,["28447@DESKTOP-BE7HQ26",[[1,423,"- bte"]],[423,423],[428,428]]],[1570977562416,["28447@DESKTOP-BE7HQ26",[[-1,426,"te"]],[428,428],[426,426]]],[1570977571487,["28447@DESKTOP-BE7HQ26",[[1,426,"yte -> char:"]],[426,426],[438,438]]],[1570977571668,["28447@DESKTOP-BE7HQ26",[[1,439,"- \n"]],[438,438],[441,441]]],[1570977571833,["28447@DESKTOP-BE7HQ26",[[1,439,"  "]],[441,441],[443,443]]],[1570977573941,["28447@DESKTOP-BE7HQ26",[[-1,441,"- "]],[443,443],[441,441]]],[1570977575919,["28447@DESKTOP-BE7HQ26",[[1,441,"jiang"]],[441,441],[446,446]]],[1570977576963,["28447@DESKTOP-BE7HQ26",[[-1,441,"jiang"]],[446,446],[441,441]]],[1570977578273,["28447@DESKTOP-BE7HQ26",[[1,441,"将"]],[441,441],[442,442]]],[1570977586917,["28447@DESKTOP-BE7HQ26",[[-1,440," 将"]],[441,441],[440,440]]],[1570977589660,["28447@DESKTOP-BE7HQ26",[[1,440,"首先要"]],[440,440],[443,443]]],[1570977592255,["28447@DESKTOP-BE7HQ26",[[-1,440,"首先要"]],[443,443],[440,440]]],[1570977614505,["28447@DESKTOP-BE7HQ26",[[1,440,"byte占8位，char占据"]],[440,440],[454,454]]],[1570977615497,["28447@DESKTOP-BE7HQ26",[[-1,453,"据"]],[454,454],[453,453]]],[1570977623793,["28447@DESKTOP-BE7HQ26",[[1,453,"18位，bute"]],[453,453],[461,461]]],[1570977625141,["28447@DESKTOP-BE7HQ26",[[-1,458,"ute"]],[461,461],[458,458]]],[1570977630976,["28447@DESKTOP-BE7HQ26",[[1,458,"yte转换成charxu"]],[458,458],[470,470]]],[1570977631641,["28447@DESKTOP-BE7HQ26",[[-1,468,"xu"]],[470,470],[468,468]]],[1570977632227,["28447@DESKTOP-BE7HQ26",[[1,468,"xuy"]],[468,468],[471,471]]],[1570977633146,["28447@DESKTOP-BE7HQ26",[[-1,467,"rxuy"]],[471,471],[467,467]]],[1570977635747,["28447@DESKTOP-BE7HQ26",[[1,467,"r需要"]],[467,467],[470,470]]],[1570977644891,["28447@DESKTOP-BE7HQ26",[[1,457,"一个cjar"]],[457,457],[463,463]]],[1570977645634,["28447@DESKTOP-BE7HQ26",[[-1,460,"jar"]],[463,463],[460,460]]],[1570977653908,["28447@DESKTOP-BE7HQ26",[[1,460,"har类型数据转换"]],[460,460],[469,469]]],[1570977663640,["28447@DESKTOP-BE7HQ26",[[-1,469,"byte转换成char需要"]],[482,482],[469,469]]],[1570977666921,["28447@DESKTOP-BE7HQ26",[[1,469,"城"]],[469,469],[470,470]]],[1570977670279,["28447@DESKTOP-BE7HQ26",[[-1,467,"转换城"]],[470,470],[467,467]]],[1570977671588,["28447@DESKTOP-BE7HQ26",[[-1,463,"类型"]],[465,465],[463,463]]],[1570977675846,["28447@DESKTOP-BE7HQ26",[[1,465,"需要2个"]],[465,465],[469,469]]],[1570977678360,["28447@DESKTOP-BE7HQ26",[[-1,457,"一"]],[458,458],[457,457]]],[1570977678538,["28447@DESKTOP-BE7HQ26",[[1,457,"1"]],[457,457],[458,458]]],[1570977684065,["28447@DESKTOP-BE7HQ26",[[1,469,"bytezh"]],[469,469],[475,475]]],[1570977684609,["28447@DESKTOP-BE7HQ26",[[-1,473,"zh"]],[475,475],[473,473]]],[1570977686154,["28447@DESKTOP-BE7HQ26",[[1,473,"转化"]],[473,473],[475,475]]],[1570977687323,["28447@DESKTOP-BE7HQ26",[[-1,473,"转化"]],[475,475],[473,473]]],[1570977690795,["28447@DESKTOP-BE7HQ26",[[1,473,"转换"]],[473,473],[475,475]]],[1570977695956,["28447@DESKTOP-BE7HQ26",[[1,476,"\n"]],[476,476],[477,477]]],[1570977718654,["28447@DESKTOP-BE7HQ26",[[1,485,"char a = ''"]],[485,485],[496,496]]],[1570977719202,["28447@DESKTOP-BE7HQ26",[[1,495,"a"]],[495,495],[496,496]]],[1570977720131,["28447@DESKTOP-BE7HQ26",[[1,497,";"]],[497,497],[498,498]]],[1570977720311,["28447@DESKTOP-BE7HQ26",[[1,500,"\n"]],[498,498],[499,499]]],[1570977722751,["28447@DESKTOP-BE7HQ26",[[1,499,"bye"]],[499,499],[502,502]]],[1570977723233,["28447@DESKTOP-BE7HQ26",[[-1,501,"e"]],[502,502],[501,501]]],[1570977723655,["28447@DESKTOP-BE7HQ26",[[1,501,"te"]],[501,501],[503,503]]],[1570977726864,["28447@DESKTOP-BE7HQ26",[[1,503,"[] b "]],[503,503],[508,508]]],[1570977727278,["28447@DESKTOP-BE7HQ26",[[-1,507," "]],[508,508],[507,507]]],[1570977732926,["28447@DESKTOP-BE7HQ26",[[1,507," = new byte[]"]],[507,507],[520,520]]],[1570977733520,["28447@DESKTOP-BE7HQ26",[[1,519,"2"]],[519,519],[520,520]]],[1570977734424,["28447@DESKTOP-BE7HQ26",[[1,521,";"]],[521,521],[522,522]]],[1570977734598,["28447@DESKTOP-BE7HQ26",[[1,524,"\n"]],[522,522],[523,523]]],[1570977737996,["28447@DESKTOP-BE7HQ26",[[1,523,"b[0]"]],[523,523],[527,527]]],[1570977738459,["28447@DESKTOP-BE7HQ26",[[1,528," "]],[528,528],[529,529]]],[1570977739837,["28447@DESKTOP-BE7HQ26",[[1,527," "]],[527,527],[528,528]]],[1570977740046,["28447@DESKTOP-BE7HQ26",[[-1,527," "]],[528,528],[527,527]]],[1570977743534,["28447@DESKTOP-BE7HQ26",[[1,527," = a"]],[527,527],[531,531]]],[1570977746006,["28447@DESKTOP-BE7HQ26",[[1,530,"()"]],[530,530],[532,532]]],[1570977747882,["28447@DESKTOP-BE7HQ26",[[1,531,"byte"]],[531,531],[535,535]]],[1570977749617,["28447@DESKTOP-BE7HQ26",[[1,536,"("]],[536,536],[537,537]]],[1570977750747,["28447@DESKTOP-BE7HQ26",[[1,538,")"]],[538,538],[539,539]]],[1570977752574,["28447@DESKTOP-BE7HQ26",[[-1,538,")"]],[539,539],[538,538]]],[1570977772833,["28447@DESKTOP-BE7HQ26",[[1,538,"&x"]],[538,538],[540,540]]],[1570977773486,["28447@DESKTOP-BE7HQ26",[[-1,539,"x"]],[540,540],[539,539]]],[1570977780392,["28447@DESKTOP-BE7HQ26",[[1,539,"0x00>>8)"]],[539,539],[547,547]]],[1570977785204,["28447@DESKTOP-BE7HQ26",[[1,543,")"]],[543,543],[544,544]]],[1570977787521,["28447@DESKTOP-BE7HQ26",[[1,537,"("]],[537,537],[538,538]]],[1570977790209,["28447@DESKTOP-BE7HQ26",[[1,549,";"]],[549,549],[550,550]]],[1570977790589,["28447@DESKTOP-BE7HQ26",[[1,551,"\n"]],[550,550],[551,551]]],[1570977792439,["28447@DESKTOP-BE7HQ26",[[1,551,"b[]"]],[551,551],[554,554]]],[1570977793063,["28447@DESKTOP-BE7HQ26",[[1,553,"1"]],[553,553],[554,554]]],[1570977795051,["28447@DESKTOP-BE7HQ26",[[1,555," = ()"]],[555,555],[560,560]]],[1570977796640,["28447@DESKTOP-BE7HQ26",[[1,559,"byte"]],[559,559],[563,563]]],[1570977797975,["28447@DESKTOP-BE7HQ26",[[1,564,"()"]],[564,564],[566,566]]],[1570977798818,["28447@DESKTOP-BE7HQ26",[[1,565,"("]],[565,565],[566,566]]],[1570977799040,["28447@DESKTOP-BE7HQ26",[[1,567,")"]],[566,566],[567,567]]],[1570977802983,["28447@DESKTOP-BE7HQ26",[[1,566,"a&0xFF"]],[566,566],[572,572]]],[1570977806216,["28447@DESKTOP-BE7HQ26",[[1,574,";"]],[574,574],[575,575]]],[1570977824354,["28447@DESKTOP-BE7HQ26",[[-1,498,"\n"],[1,499," "],[-1,522,"\n"],[1,523," "],[1,536," "],[1,539," "],[1,540," "],[1,545," "],[1,547," "],[-1,550,"\n"],[1,551," "],[1,564," "],[1,567," "],[1,568," "]],[485,575],[583,583]]],[1570977828289,["28447@DESKTOP-BE7HQ26",[[1,499,"\n"]],[499,499],[500,500]]],[1570977830558,["28447@DESKTOP-BE7HQ26",[[1,524,"\n"]],[524,524],[525,525]]],[1570977832962,["28447@DESKTOP-BE7HQ26",[[1,558,"\n"]],[558,558],[559,559]]],[1570977834643,["28447@DESKTOP-BE7HQ26",[[-1,587," "]],[588,588],[587,587]]],[1570977835027,["28447@DESKTOP-BE7HQ26",[[-1,587,"\n"]],[587,587],[586,586]]],[1570977839128,["28447@DESKTOP-BE7HQ26",[[1,597,"\n"]],[591,591],[592,592]]],[1570977843897,["28447@DESKTOP-BE7HQ26",[[1,592,"- hcar"]],[592,592],[598,598]]],[1570977845284,["28447@DESKTOP-BE7HQ26",[[-1,594,"hcar"]],[598,598],[594,594]]],[1570977845740,["28447@DESKTOP-BE7HQ26",[[1,594,"cg"]],[594,594],[596,596]]],[1570977846364,["28447@DESKTOP-BE7HQ26",[[-1,595,"g"]],[596,596],[595,595]]],[1570977851215,["28447@DESKTOP-BE7HQ26",[[1,595,"har -> byte"]],[595,595],[606,606]]],[1570977855674,["28447@DESKTOP-BE7HQ26",[[-1,437,":"]],[438,438],[437,437]]],[1570977865344,["28447@DESKTOP-BE7HQ26",[[-1,425,"byte"],[1,429,"c"]],[425,429],[425,426]]],[1570977866089,["28447@DESKTOP-BE7HQ26",[[1,426,"har"]],[425,425],[429,429]]],[1570977868431,["28447@DESKTOP-BE7HQ26",[[-1,433,"char"]],[437,437],[433,433]]],[1570977869871,["28447@DESKTOP-BE7HQ26",[[1,433,"byte"]],[433,433],[437,437]]],[1570977873687,["28447@DESKTOP-BE7HQ26",[[-1,601,"byte"]],[601,605],[601,601]]],[1570977876591,["28447@DESKTOP-BE7HQ26",[[-1,593,"char"],[1,597,"bytechar"]],[593,597],[605,605]]],[1570978024019,[null,[[1,597," -> "],[-1,601," -> "]],[597,597],[601,601]]],[1570978024019,[null,[[-1,597," -> "],[1,605," -> "]],[601,601],[597,597]]],[1570977998845,["28447@DESKTOP-BE7HQ26",[[1,606,"- \n"]],[605,605],[608,608]]],[1570977999883,["28447@DESKTOP-BE7HQ26",[[-1,606,"- "]],[608,608],[607,607]]],[1570978001497,["28447@DESKTOP-BE7HQ26",[[1,607,"··"]],[607,607],[609,609]]],[1570978002213,["28447@DESKTOP-BE7HQ26",[[-1,607,"··"]],[609,609],[607,607]]],[1570978002444,["28447@DESKTOP-BE7HQ26",[[-1,611,"\n"]],[607,607],[606,606]]],[1570978003071,["28447@DESKTOP-BE7HQ26",[[1,611,"\n"]],[606,606],[607,607]]],[1570978007553,["28447@DESKTOP-BE7HQ26",[[1,606,"```java"]],[606,606],[613,613]]],[1570978007812,["28447@DESKTOP-BE7HQ26",[[1,619,"\n"]],[613,613],[614,614]]],[1570978008593,["28447@DESKTOP-BE7HQ26",[[1,614,"```"]],[614,614],[617,617]]],[1570978010412,["28447@DESKTOP-BE7HQ26",[[1,614,"\n"]],[613,613],[614,614]]],[1570978010775,["28447@DESKTOP-BE7HQ26",[[1,614,"byte a = 0; byte b = 0; char c = (char) ((a & 0xFF << 8) | (b & 0xFF));"]],[614,614],[685,685]]],[1570978012307,["28447@DESKTOP-BE7HQ26",[[1,626,"\n"]],[626,626],[627,627]]],[1570978013754,["28447@DESKTOP-BE7HQ26",[[1,639,"\n"]],[639,639],[640,640]]],[1570978017464,["28447@DESKTOP-BE7HQ26",[[1,606,"- \n"]],[605,605],[608,608]]],[1570978021493,["28447@DESKTOP-BE7HQ26",[[-1,606,"- "]],[608,608],[606,606]]],[1570978022708,["28447@DESKTOP-BE7HQ26",[[-1,606,"\n"]],[606,606],[605,605]]],[1570978084026,[null,[[1,597," -> "],[-1,601," -> "]],[597,597],[601,601]]],[1570978084026,[null,[[-1,597," -> "],[1,605," -> "]],[601,601],[597,597]]],[1570978034325,["28447@DESKTOP-BE7HQ26",[[1,605,"   上述方法相反方向"]],[605,605],[616,616]]],[1570978042855,["28447@DESKTOP-BE7HQ26",[[1,401,"****"]],[401,401],[403,403]]],[1570978045484,["28447@DESKTOP-BE7HQ26",[[-1,405,"面试题： 如何实现byte和char转换？"]],[405,426],[405,405]]],[1570978046352,["28447@DESKTOP-BE7HQ26",[[1,403,"面试题： 如何实现byte和char转换？"]],[403,403],[424,424]]],[1570978049917,["28447@DESKTOP-BE7HQ26",[[1,401,"\n"]],[400,400],[401,401]]],[1570978053488,["28447@DESKTOP-BE7HQ26",[[-1,712,"\n"]],[711,711],[710,710]]],[1570978144028,[null,[[1,602," -> "],[-1,606," -> "]],[602,602],[606,606]]],[1570978144028,[null,[[-1,602," -> "],[1,610," -> "]],[606,606],[602,602]]],[1570978087500,["28447@DESKTOP-BE7HQ26",[[1,41,"|"]],[41,41],[42,42]]],[1570978090320,["28447@DESKTOP-BE7HQ26",[[1,43,"wei"]],[43,43],[46,46]]],[1570978091121,["28447@DESKTOP-BE7HQ26",[[-1,43,"wei"]],[46,46],[43,43]]],[1570978096658,["28447@DESKTOP-BE7HQ26",[[1,43,"位数"]],[43,43],[45,45]]],[1570978101014,["28447@DESKTOP-BE7HQ26",[[1,80,"|————"]],[80,80],[85,85]]],[1570978102432,["28447@DESKTOP-BE7HQ26",[[-1,81,"————"]],[85,85],[81,81]]],[1570978103818,["28447@DESKTOP-BE7HQ26",[[1,81,"----"]],[81,81],[85,85]]],[1570978106058,["28447@DESKTOP-BE7HQ26",[[1,81,":"]],[81,81],[82,82]]],[1570978108014,["28447@DESKTOP-BE7HQ26",[[1,86,":"]],[86,86],[87,87]]],[1570978110628,["28447@DESKTOP-BE7HQ26",[[1,115,"|"]],[114,114],[115,115]]],[1570978111811,["28447@DESKTOP-BE7HQ26",[[1,114,"1"]],[114,114],[115,115]]],[1570978112702,["28447@DESKTOP-BE7HQ26",[[-1,114,"1"]],[115,115],[114,114]]],[1570978113225,["28447@DESKTOP-BE7HQ26",[[1,114,"8"]],[114,114],[115,115]]],[1570978115046,["28447@DESKTOP-BE7HQ26",[[1,133,"|"]],[133,133],[134,134]]],[1570978118596,["28447@DESKTOP-BE7HQ26",[[1,135,"16"]],[135,135],[137,137]]],[1570978127066,["28447@DESKTOP-BE7HQ26",[[1,207,"|"]],[207,207],[208,208]]],[1570978129699,["28447@DESKTOP-BE7HQ26",[[1,207,"16"]],[207,207],[209,209]]],[1570978130917,["28447@DESKTOP-BE7HQ26",[[1,226,"|"]],[226,226],[227,227]]],[1570978133341,["28447@DESKTOP-BE7HQ26",[[1,226,"32"]],[226,226],[228,228]]],[1570978135617,["28447@DESKTOP-BE7HQ26",[[1,239,"|"]],[239,239],[240,240]]],[1570978136658,["28447@DESKTOP-BE7HQ26",[[1,239,"32"]],[239,239],[241,241]]],[1570978138262,["28447@DESKTOP-BE7HQ26",[[1,251,"|"]],[251,251],[252,252]]],[1570978140338,["28447@DESKTOP-BE7HQ26",[[1,251,"64"]],[251,251],[253,253]]],[1570978142106,["28447@DESKTOP-BE7HQ26",[[1,265,"|"]],[265,265],[266,266]]],[1570978143634,["28447@DESKTOP-BE7HQ26",[[1,265,"64"]],[265,265],[267,267]]],[1570978204062,[null,[[1,632," -> "],[-1,636," -> "]],[632,632],[636,636]]],[1570978204062,[null,[[-1,632," -> "],[1,640," -> "]],[636,636],[632,632]]],[1570978145983,["28447@DESKTOP-BE7HQ26",[[1,281,"|"]],[281,281],[282,282]]],[1570978147414,["28447@DESKTOP-BE7HQ26",[[1,281,"8"]],[281,281],[282,282]]]],null,"28447@DESKTOP-BE7HQ26"],["030f8f2c-717f-442f-99eb-d117e2cba970",1570985952780,"# 一、数据类型\n\n## 1.1基本类型\n\n\n| 数据类型   |  大小（B） | 位数  |  说明 |\n| :---------:| :--------:|:----: |:-------:|\n| byte   | 1 |8||\n| char     | 2 | 16   |长度和编码有关，ASCII码中char占一个字节，UTF-8是不定长编码，编码的长度是动态的|\n| short     | 2 | 16| \n| int | 4    |32|\n|float|4|32|\n|long|8|64|\n|double|8|64|\n|boolean|1| 8|理论上只占据一个bit，但是实际是占据了一个byte|\n\n其中1B=8bit , 一个bit代表一个1或者0，是计算机的基本单位\n![](https://github.com/Dannymeng/picture/blob/master/2018083015380793.png?raw=true)\n\n\n**面试题： 如何实现byte和char转换？**\n- char -> byte\n byte占8位，char占18位，1个char数据需要2个byte转换\n\n```java\nchar a = 'a'; \nbyte[] b = new byte[2]; \nb[0] = (byte) ((a & 0x00) >> 8); \nb[1] = (byte) ((a & 0xFF));\n```\n\n- byte -> char   上述方法相反方向\n```java\nbyte a = 0; \nbyte b = 0; \nchar c = (char) ((a & 0xFF << 8) | (b & 0xFF));\n```\n\n\n\n\n## 1.2 包装类型\n\n基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。\n\n```java\nInteger x = 2;     // 装箱 调用了 Integer.valueOf(2)\nint y = x;         // 拆箱 调用了 X.intValue()\n```\n\n\n\n## 1.3 缓存池\n\nnew Integer(123) 与 Integer.valueOf(123) 的区别在于：\n\n- new Integer(123) 每次都会新建一个对象；\n- Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\n\n```java\nInteger x = new Integer(123);\nInteger y = new Integer(123);\nSystem.out.println(x == y);    // false\nInteger z = Integer.valueOf(123);\nInteger k = Integer.valueOf(123);\nSystem.out.println(z == k);   // true\n```\n\nvalueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\n\n```java\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\n```\n\n在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\n\n编译器会在自动装箱过程调用 valueOf() 方法，因此多个值相同且值在缓存池范围内的 Integer 实例使用自动装箱来创建，那么就会引用相同的对象。\n\n```java\nInteger m = 123;\nInteger n = 123;\nSystem.out.println(m == n); // true\n```\n\n\n\n# 二、String\n\n## 概览\n\nString 被声明为 final，因此它不可被继承。(Integer 等包装类也不能被继承）\n\n在 Java 8 中，String 内部使用 char 数组存储数据。\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n}\n```\n\n在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 `coder` 来标识使用了哪种编码。\n\n```java\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final byte[] value;\n\n    /** The identifier of the encoding used to encode the bytes in {@code value}. */\n    private final byte coder;\n}\n```\n\nvalue 数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。\n\n## String, StringBuffer and StringBuilder\n\n**1. 可变性**\n\n- String 不可变\n- StringBuffer 和 StringBuilder 可变\n\n**2. 线程安全**\n\n- String 不可变，因此是线程安全的\n- StringBuilder 不是线程安全的\n- StringBuffer 是线程安全的，内部使用 synchronized 进行同步",[[1570985904487,["28447@DESKTOP-BE7HQ26",[[1,0,"\n"]],[0,0],[1,1]]],[1570985904702,["28447@DESKTOP-BE7HQ26",[[1,0,"\n"]],[1,1],[2,2]]],[1570985904869,["28447@DESKTOP-BE7HQ26",[[1,2,"\n"]],[2,2],[3,3]]]],null,"28447@DESKTOP-BE7HQ26"]]}