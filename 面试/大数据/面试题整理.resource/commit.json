{"compress":true,"commitItems":[["4b889e17-f598-4ff6-9acc-dc9ebbf21a2e",1555778574882,"",[[1555778522839,["28447@DESKTOP-BE7HQ26",[[1,0,"# 面试题整理\n\n\n\n"]],[0,0],[10,10]]],[1555778525412,["28447@DESKTOP-BE7HQ26",[[-1,10,"\n"],[1,11,"#"]],[10,10],[11,11]]],[1555778532807,["28447@DESKTOP-BE7HQ26",[[1,11,"# Spark篇"]],[11,11],[19,19]]],[1555778533188,["28447@DESKTOP-BE7HQ26",[[1,19,"\n\n"]],[19,19],[20,20]]],[1555778534973,["28447@DESKTOP-BE7HQ26",[[-1,20,"\n"],[1,21,"#"]],[20,20],[21,21]]],[1555778545787,["28447@DESKTOP-BE7HQ26",[[1,21,"## Spark人物提交力促哼"]],[21,21],[36,36]]],[1555778546940,["28447@DESKTOP-BE7HQ26",[[-1,33,"力促哼"]],[36,36],[33,33]]],[1555778549186,["28447@DESKTOP-BE7HQ26",[[1,33,"流程"]],[33,33],[35,35]]],[1555778549619,["28447@DESKTOP-BE7HQ26",[[1,35,"\n\n"]],[35,35],[36,36]]],[1555778556396,["28447@DESKTOP-BE7HQ26",[[-1,36,"\n"],[1,37,"-"]],[36,36],[37,37]]],[1555778559064,["28447@DESKTOP-BE7HQ26",[[1,37," Soarj"]],[37,37],[43,43]]],[1555778561066,["28447@DESKTOP-BE7HQ26",[[-1,39,"oarj"]],[43,43],[39,39]]],[1555778564067,["28447@DESKTOP-BE7HQ26",[[1,39,"parkCOn"]],[39,39],[46,46]]],[1555778564715,["28447@DESKTOP-BE7HQ26",[[-1,44,"On"]],[46,46],[44,44]]],[1555778571235,["28447@DESKTOP-BE7HQ26",[[1,44,"ontext提交作业\n- "]],[44,44],[57,57]]],[1555778575655,["28447@DESKTOP-BE7HQ26",[[1,40," "]],[40,40],[41,41]]],[1555778577107,["28447@DESKTOP-BE7HQ26",[[-1,40," "]],[41,41],[40,40]]],[1555778584676,["28447@DESKTOP-BE7HQ26",[[1,59,"2.DAGSe"]],[59,59],[66,66]]],[1555778586243,["28447@DESKTOP-BE7HQ26",[[-1,65,"e"]],[66,66],[65,65]]],[1555778616959,["28447@DESKTOP-BE7HQ26",[[1,65,"cheduler拆分stage\n- 3.生成作业\n- 4.提交任务及"]],[65,65],[99,99]]],[1555778617556,["28447@DESKTOP-BE7HQ26",[[-1,98,"及"]],[99,99],[98,98]]],[1555778619231,["28447@DESKTOP-BE7HQ26",[[1,98,"集合"]],[98,98],[100,100]]],[1555778619524,["28447@DESKTOP-BE7HQ26",[[-1,99,"合"]],[100,100],[99,99]]],[1555778619827,["28447@DESKTOP-BE7HQ26",[[1,99,"\n- "]],[99,99],[102,102]]],[1555778693817,[null,[[1,38,"1."],[-1,63,"e"],[-1,97,"及"]],[38,38],[97,97]]],[1555778693817,[null,[[-1,38,"1."],[1,65,"e"],[1,98,"及"]],[97,97],[38,38]]],[1555778639324,["28447@DESKTOP-BE7HQ26",[[1,102,"5，"]],[102,102],[104,104]]],[1555778639874,["28447@DESKTOP-BE7HQ26",[[-1,103,"，"]],[104,104],[103,103]]],[1555778640500,["28447@DESKTOP-BE7HQ26",[[1,103,"。"]],[103,103],[104,104]]],[1555778641915,["28447@DESKTOP-BE7HQ26",[[-1,103,"。"]],[104,104],[103,103]]],[1555778643827,["28447@DESKTOP-BE7HQ26",[[1,103,".ji"]],[103,103],[106,106]]],[1555778644346,["28447@DESKTOP-BE7HQ26",[[-1,104,"ji"]],[106,106],[104,104]]],[1555778672056,["28447@DESKTOP-BE7HQ26",[[1,104,"提交热内"]],[104,104],[108,108]]],[1555778672810,["28447@DESKTOP-BE7HQ26",[[-1,106,"热内"]],[108,108],[106,106]]],[1555778690627,["28447@DESKTOP-BE7HQ26",[[1,106,"任务\n- 6.执行任务\n- 7.耿总任务"]],[106,106],[126,126]]],[1555778692842,["28447@DESKTOP-BE7HQ26",[[-1,122,"耿总"]],[124,124],[122,122]]],[1555778695987,[null,[[1,38,"1."],[-1,63,"e"],[-1,97,"及"]],[38,38],[97,97]]],[1555778695987,[null,[[-1,38,"1."],[1,65,"e"],[1,98,"及"]],[97,97],[38,38]]],[1555778694662,["28447@DESKTOP-BE7HQ26",[[1,122,"跟踪"]],[122,122],[124,124]]]],null,"28447@DESKTOP-BE7HQ26"],["2f939af1-f720-4ef6-8096-b276edef8a0e",1555778807653,"# 面试题整理\n\n\n## Spark篇\n### Spark人物提交流程\n- 1.SparkContext提交作业\n- 2.DAGScheduler拆分stage\n- 3.生成作业\n- 4.提交任务集\n- 5.提交任务\n- 6.执行任务\n- 7.跟踪任务",[[1555778755132,["28447@DESKTOP-BE7HQ26",[[1,126,"\n- "]],[126,126],[129,129]]],[1555778756018,["28447@DESKTOP-BE7HQ26",[[-1,128," "]],[129,129],[128,128]]],[1555778756468,["28447@DESKTOP-BE7HQ26",[[-1,127,"-"],[1,128,"\n"]],[128,128],[127,127]]],[1555778760133,["28447@DESKTOP-BE7HQ26",[[1,127,"![任务调度总体诠释]($resource/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg)\n"]],[127,127],[227,227]]],[1555778762948,["28447@DESKTOP-BE7HQ26",[[1,127,"- \n"]],[126,126],[129,129]]],[1555778764835,["28447@DESKTOP-BE7HQ26",[[-1,127,"- "]],[129,129],[127,127]]],[1555778765838,["28447@DESKTOP-BE7HQ26",[[-1,127,"\n"]],[127,127],[126,126]]],[1555778767139,["28447@DESKTOP-BE7HQ26",[[1,127,"- \n"]],[126,126],[129,129]]],[1555778767884,["28447@DESKTOP-BE7HQ26",[[-1,127,"- "]],[129,129],[127,127]]],[1555778769986,["28447@DESKTOP-BE7HQ26",[[1,229,"\n"]],[228,228],[229,229]]],[1555778771749,["28447@DESKTOP-BE7HQ26",[[-1,229,"\n"],[1,230,"#"]],[229,229],[230,230]]],[1555778772526,["28447@DESKTOP-BE7HQ26",[[1,230,"## "]],[230,230],[233,233]]],[1555779216235,["28447@DESKTOP-BE7HQ26",[[-1,231,"# "]],[233,233],[231,231]]],[1555779224508,["28447@DESKTOP-BE7HQ26",[[1,231," Hadoop篇"]],[231,231],[239,239]]],[1555779225067,["28447@DESKTOP-BE7HQ26",[[1,239,"\n\n"]],[239,239],[240,240]]],[1555779226139,["28447@DESKTOP-BE7HQ26",[[1,241,"\n"]],[240,240],[241,241]]],[1555779226649,["28447@DESKTOP-BE7HQ26",[[-1,241,"\n"],[1,242,"#"]],[241,241],[242,242]]],[1555779227520,["28447@DESKTOP-BE7HQ26",[[1,242,"## "]],[242,242],[245,245]]],[1555779234731,["28447@DESKTOP-BE7HQ26",[[1,245,"Yarn的认识（）"]],[245,245],[254,254]]],[1555779241221,["28447@DESKTOP-BE7HQ26",[[1,253,"简单介绍"]],[253,253],[257,257]]],[1555779241605,["28447@DESKTOP-BE7HQ26",[[1,257,"\n"]],[257,257],[258,258]]],[1555779242195,["28447@DESKTOP-BE7HQ26",[[-1,257,"\n"]],[258,258],[257,257]]],[1555779242875,["28447@DESKTOP-BE7HQ26",[[1,258,"\n\n"]],[258,258],[259,259]]],[1555779258750,["28447@DESKTOP-BE7HQ26",[[1,259,"Hadoop 资源管理器，它是一个通用资源管理系统和调度平台"]],[259,259],[289,289]]],[1555779269016,["28447@DESKTOP-BE7HQ26",[[1,259,"Yarn是hadoop2.X之后出现的"]],[259,259],[278,278]]],[1555779280325,["28447@DESKTOP-BE7HQ26",[[-1,297,"资源管理系统和调度平台"]],[297,308],[297,297]]],[1555779281596,["28447@DESKTOP-BE7HQ26",[[1,297,"****"]],[297,297],[299,299]]],[1555779281949,["28447@DESKTOP-BE7HQ26",[[1,299,"资源管理系统和调度平台"]],[299,299],[310,310]]],[1555779285314,["28447@DESKTOP-BE7HQ26",[[-1,295,"通用"]],[297,297],[295,295]]],[1555779290631,["28447@DESKTOP-BE7HQ26",[[1,310,"。"]],[310,310],[311,311]]],[1555779291002,["28447@DESKTOP-BE7HQ26",[[1,312,"\n"]],[311,311],[312,312]]],[1555779293729,["28447@DESKTOP-BE7HQ26",[[-1,312,"\n"],[1,313,"里面"]],[312,312],[314,314]]],[1555779299452,["28447@DESKTOP-BE7HQ26",[[1,314,"的盖帘"]],[314,314],[317,317]]],[1555779300378,["28447@DESKTOP-BE7HQ26",[[-1,315,"盖帘"]],[317,317],[315,315]]],[1555779302703,["28447@DESKTOP-BE7HQ26",[[1,315,"gaiinia"]],[315,315],[322,322]]],[1555779304251,["28447@DESKTOP-BE7HQ26",[[-1,315,"gaiinia"]],[322,322],[315,315]]],[1555779306863,["28447@DESKTOP-BE7HQ26",[[1,315,"概念： "]],[315,315],[319,319]]],[1555779307466,["28447@DESKTOP-BE7HQ26",[[-1,318," "]],[319,319],[318,318]]],[1555779308652,["28447@DESKTOP-BE7HQ26",[[1,318,"r"]],[318,318],[319,319]]],[1555779309033,["28447@DESKTOP-BE7HQ26",[[-1,318,"r"]],[319,319],[318,318]]],[1555779313860,["28447@DESKTOP-BE7HQ26",[[1,318,"resourcs"]],[318,318],[326,326]]],[1555779314250,["28447@DESKTOP-BE7HQ26",[[-1,324,"cs"]],[326,326],[324,324]]],[1555779315687,["28447@DESKTOP-BE7HQ26",[[1,324,"sem"]],[324,324],[327,327]]],[1555779317146,["28447@DESKTOP-BE7HQ26",[[-1,324,"sem"]],[327,327],[324,324]]],[1555779322920,["28447@DESKTOP-BE7HQ26",[[1,324,"cemanage\\"]],[324,324],[333,333]]],[1555779323820,["28447@DESKTOP-BE7HQ26",[[-1,332,"\\"]],[333,333],[332,332]]],[1555779324623,["28447@DESKTOP-BE7HQ26",[[1,332,"、"]],[332,332],[333,333]]],[1555779656499,["28447@DESKTOP-BE7HQ26",[[-1,312,"里面的概念：r"],[1,319,"YARN 是一个资源管理、任务调度的框架，主要包含三大模块：ResourceManager（RM）、\nNodeManager（NM）、ApplicationMaster（AM）。\nR"],[-1,326,"m"],[1,327,"M"],[1,332,"r 负责所有资源的监控"],[1,333,"分配和管理；\nApplicationMaster 负责每一个具体应用程序的调度和协调；\nNodeManager 负责每一个节点的维护。\n对于所有的 applications，RM 拥有绝对的控制权和对资源的分配权。而每个 AM 则会和\nRM 协商资源，同时和 NodeManager 通信来执行和监控 task。\n\n"]],[312,333],[585,585]]],[1555779662388,["28447@DESKTOP-BE7HQ26",[[1,312,"\n"]],[311,311],[312,312]]],[1555779670778,["28447@DESKTOP-BE7HQ26",[[1,403,"- "]],[403,403],[405,405]]],[1555779673827,["28447@DESKTOP-BE7HQ26",[[1,438,"- "]],[438,438],[440,440]]],[1555779676342,["28447@DESKTOP-BE7HQ26",[[1,477,"- "]],[477,477],[479,479]]],[1555779773594,["28447@DESKTOP-BE7HQ26",[[1,593,"\n"]],[591,591],[592,592]]],[1555779773890,["28447@DESKTOP-BE7HQ26",[[1,594,"\n"]],[592,592],[593,593]]],[1555779819234,["28447@DESKTOP-BE7HQ26",[[1,593,"![Yarn架构图]($resource/Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png)"]],[593,593],[651,651]]],[1555779821906,["28447@DESKTOP-BE7HQ26",[[1,652,"\n"]],[651,651],[652,652]]],[1555779848235,["28447@DESKTOP-BE7HQ26",[[1,653,"\n"]],[651,651],[652,652]]],[1555779848873,["28447@DESKTOP-BE7HQ26",[[1,652,"{】"]],[652,652],[654,654]]],[1555779849604,["28447@DESKTOP-BE7HQ26",[[-1,652,"{】"]],[654,654],[652,652]]],[1555779850398,["28447@DESKTOP-BE7HQ26",[[1,652,"[]"]],[652,652],[654,654]]],[1555779851608,["28447@DESKTOP-BE7HQ26",[[1,653,"ca"]],[653,653],[655,655]]],[1555779852180,["28447@DESKTOP-BE7HQ26",[[-1,653,"ca"]],[655,655],[653,653]]],[1555779854367,["28447@DESKTOP-BE7HQ26",[[1,653,"参考文章"]],[653,653],[657,657]]],[1555779855447,["28447@DESKTOP-BE7HQ26",[[1,658,"("]],[658,658],[659,659]]],[1555779855473,["28447@DESKTOP-BE7HQ26",[[1,659,"https://)"]],[659,659],[659,667]]],[1555779856139,["28447@DESKTOP-BE7HQ26",[[1,667,"blog.csdn.net/qq_33624952/article/details/79341034"]],[659,667],[717,717]]],[1555779858378,["28447@DESKTOP-BE7HQ26",[[1,720,"\n"]],[718,718],[719,719]]],[1555779858601,["28447@DESKTOP-BE7HQ26",[[1,721,"\n"]],[719,719],[720,720]]],[1555779882134,["28447@DESKTOP-BE7HQ26",[[1,720,"### "]],[720,720],[724,724]]],[1555779882794,["28447@DESKTOP-BE7HQ26",[[-1,722,"# "]],[724,724],[722,722]]],[1555779887710,["28447@DESKTOP-BE7HQ26",[[1,722," Zookeeperp"]],[722,722],[733,733]]],[1555779888403,["28447@DESKTOP-BE7HQ26",[[-1,732,"p"]],[733,733],[732,732]]],[1555779890064,["28447@DESKTOP-BE7HQ26",[[1,732,"篇"]],[732,732],[733,733]]],[1555779890466,["28447@DESKTOP-BE7HQ26",[[1,735,"\n"]],[733,733],[734,734]]],[1555780179090,["28447@DESKTOP-BE7HQ26",[[1,736,"\n"]],[734,734],[735,735]]],[1555780183894,["28447@DESKTOP-BE7HQ26",[[1,735,"zookeeperxuan"]],[735,735],[748,748]]],[1555780184923,["28447@DESKTOP-BE7HQ26",[[-1,744,"xuan"]],[748,748],[744,744]]],[1555780188863,["28447@DESKTOP-BE7HQ26",[[1,744,"选举原则：zookeeper选举的规则：leader选举，要求 **可用节点数量 > 总节点数量/2 **"]],[744,744],[797,797]]],[1555780193061,["28447@DESKTOP-BE7HQ26",[[-1,746,"原则：zookeeper选举"]],[735,749],[735,735]]],[1555780206664,["28447@DESKTOP-BE7HQ26",[[-1,761," "],[1,762," ="],[-1,780," "],[1,781," "]],[762,762],[763,763]]],[1555780208707,["28447@DESKTOP-BE7HQ26",[[-1,761," ="]],[763,763],[761,761]]],[1555780210771,["28447@DESKTOP-BE7HQ26",[[-1,779," "]],[780,780],[779,779]]],[1555780218960,["28447@DESKTOP-BE7HQ26",[[1,734,"为什恶魔"]],[734,734],[738,738]]],[1555780220134,["28447@DESKTOP-BE7HQ26",[[-1,735,"什恶魔"]],[738,738],[735,735]]],[1555780226032,["28447@DESKTOP-BE7HQ26",[[1,735,"什么zookeeperji"]],[735,735],[748,748]]],[1555780226572,["28447@DESKTOP-BE7HQ26",[[-1,746,"ji"]],[748,748],[746,746]]],[1555780231357,["28447@DESKTOP-BE7HQ26",[[1,746,"集群的节点数大于"]],[746,746],[754,754]]],[1555780232955,["28447@DESKTOP-BE7HQ26",[[-1,752,"大于"]],[754,754],[752,752]]],[1555780235783,["28447@DESKTOP-BE7HQ26",[[1,752,"是及数个"]],[752,752],[756,756]]],[1555780236970,["28447@DESKTOP-BE7HQ26",[[-1,753,"及数个"]],[756,756],[753,753]]],[1555780239670,["28447@DESKTOP-BE7HQ26",[[1,753,"奇数个"]],[753,753],[756,756]]],[1555780246623,["28447@DESKTOP-BE7HQ26",[[1,734,"### "]],[734,734],[738,738]]],[1555780248842,["28447@DESKTOP-BE7HQ26",[[1,734,"\n"]],[733,733],[734,734]]],[1555780249058,["28447@DESKTOP-BE7HQ26",[[1,735,"\n"]],[734,734],[735,735]]],[1555780259500,["28447@DESKTOP-BE7HQ26",[[1,734,"### Zookeeper加德纳"]],[734,734],[750,750]]],[1555780260795,["28447@DESKTOP-BE7HQ26",[[-1,747,"加德纳"]],[750,750],[747,747]]],[1555780265970,["28447@DESKTOP-BE7HQ26",[[1,747,"简单介绍："]],[747,747],[752,752]]],[1555780266218,["28447@DESKTOP-BE7HQ26",[[1,754,"\n"]],[752,752],[753,753]]],[1555780266754,["28447@DESKTOP-BE7HQ26",[[-1,754,"\n"]],[753,753],[752,752]]],[1555780267197,["28447@DESKTOP-BE7HQ26",[[-1,751,"："]],[752,752],[751,751]]],[1555780267509,["28447@DESKTOP-BE7HQ26",[[1,753,"\n"]],[751,751],[752,752]]],[1555780286495,["28447@DESKTOP-BE7HQ26",[[1,781,"首先介绍"]],[781,781],[785,785]]],[1555780289202,["28447@DESKTOP-BE7HQ26",[[1,833,"\n"]],[831,831],[832,832]]],[1555780297817,["28447@DESKTOP-BE7HQ26",[[1,832,"设置奇数个的目的："]],[832,832],[841,841]]],[1555780298433,["28447@DESKTOP-BE7HQ26",[[1,843,"\n"]],[841,841],[842,842]]],[1555780298869,["28447@DESKTOP-BE7HQ26",[[1,842,"**1、防止由脑裂造成的集群不可用**"]],[842,842],[861,861]]],[1555780300275,["28447@DESKTOP-BE7HQ26",[[1,863,"\n"]],[861,861],[862,862]]],[1555780356781,["28447@DESKTOP-BE7HQ26",[[1,862,"**2、在容错能力相同的情况下，奇数台更节省资源。**"]],[862,862],[889,889]]],[1555780359891,["28447@DESKTOP-BE7HQ26",[[1,862,"\n"]],[861,861],[862,862]]],[1555780364107,["28447@DESKTOP-BE7HQ26",[[-1,862,"\n"]],[862,862],[861,861]]],[1555780365805,["28447@DESKTOP-BE7HQ26",[[-1,890,"\n"],[1,891,"【"]],[890,890],[891,891]]],[1555780365993,["28447@DESKTOP-BE7HQ26",[[1,891,"【"]],[891,891],[892,892]]],[1555780366412,["28447@DESKTOP-BE7HQ26",[[-1,891,"【"]],[892,892],[891,891]]],[1555780366604,["28447@DESKTOP-BE7HQ26",[[-1,890,"【"],[1,891,"\n"]],[891,891],[890,890]]],[1555780367157,["28447@DESKTOP-BE7HQ26",[[-1,890,"\n"],[1,891,"["]],[890,890],[891,891]]],[1555780367344,["28447@DESKTOP-BE7HQ26",[[1,891,"]"]],[891,891],[892,892]]],[1555780368699,["28447@DESKTOP-BE7HQ26",[[1,891,"can"]],[891,891],[894,894]]],[1555780369443,["28447@DESKTOP-BE7HQ26",[[-1,891,"can"]],[894,894],[891,891]]],[1555780372864,["28447@DESKTOP-BE7HQ26",[[1,891,"参考文章"]],[891,891],[895,895]]],[1555780374087,["28447@DESKTOP-BE7HQ26",[[1,896,"("]],[896,896],[897,897]]],[1555780374114,["28447@DESKTOP-BE7HQ26",[[1,897,"https://)"]],[897,897],[897,905]]],[1555780381061,["28447@DESKTOP-BE7HQ26",[[1,905,"blog.csdn.net/u010476994/article/details/79806041"]],[897,905],[954,954]]],[1555780384514,["28447@DESKTOP-BE7HQ26",[[1,955,"\n\n"]],[955,955],[956,956]]],[1555780432726,["28447@DESKTOP-BE7HQ26",[[1,752,"ZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态."]],[752,752],[800,800]]],[1555780433425,["28447@DESKTOP-BE7HQ26",[[1,802,"\n"]],[800,800],[801,801]]],[1555780445483,["28447@DESKTOP-BE7HQ26",[[1,801,"分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。"]],[801,801],[880,880]]],[1555780447651,["28447@DESKTOP-BE7HQ26",[[1,801,"\n"]],[800,800],[801,801]]],[1555780467434,["28447@DESKTOP-BE7HQ26",[[1,734,"\n"]],[733,733],[734,734]]]],null,"28447@DESKTOP-BE7HQ26"],["a0ab548a-e89f-408c-b13d-da6419b3c1b3",1555851189048,"# 面试题整理\n\n\n## Spark篇\n### Spark人物提交流程\n- 1.SparkContext提交作业\n- 2.DAGScheduler拆分stage\n- 3.生成作业\n- 4.提交任务集\n- 5.提交任务\n- 6.执行任务\n- 7.跟踪任务\n\n![任务调度总体诠释]($resource/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg)\n\n## Hadoop篇\n\n### Yarn的认识（简单介绍）\nYarn是hadoop2.X之后出现的Hadoop 资源管理器，它是一个**资源管理系统和调度平台**。\n\nYARN 是一个资源管理、任务调度的框架，主要包含三大模块：ResourceManager（RM）、\nNodeManager（NM）、ApplicationMaster（AM）。\n- ResourceManager 负责所有资源的监控、分配和管理；\n- ApplicationMaster 负责每一个具体应用程序的调度和协调；\n- NodeManager 负责每一个节点的维护。\n对于所有的 applications，RM 拥有绝对的控制权和对资源的分配权。而每个 AM 则会和\nRM 协商资源，同时和 NodeManager 通信来执行和监控 task。\n\n![Yarn架构图]($resource/Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n[参考文章](https://blog.csdn.net/qq_33624952/article/details/79341034)\n\n## Zookeeper篇\n\n### Zookeeper简单介绍\nZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态.\n\n分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n### 为什么zookeeper集群的节点数是奇数个\n首先介绍zookeeper选举的规则：leader选举，要求**可用节点数量 > 总节点数量/2**\n设置奇数个的目的：\n**1、防止由脑裂造成的集群不可用**\n**2、在容错能力相同的情况下，奇数台更节省资源。**\n[参考文章](https://blog.csdn.net/u010476994/article/details/79806041)\n\n",[[1555851187449,["28447@DESKTOP-BE7HQ26",[[1,1087,"\n"]],[1086,1086],[1087,1087]]],[1555851191014,["28447@DESKTOP-BE7HQ26",[[1,1090,"HIve"]],[1090,1090],[1094,1094]]],[1555851191877,["28447@DESKTOP-BE7HQ26",[[-1,1091,"Ive"]],[1094,1094],[1091,1091]]],[1555851196966,["28447@DESKTOP-BE7HQ26",[[1,1091,"ive篇"]],[1091,1091],[1095,1095]]],[1555851197565,["28447@DESKTOP-BE7HQ26",[[1,1095,"\n\n"]],[1095,1095],[1096,1096]]],[1555851198712,["28447@DESKTOP-BE7HQ26",[[-1,1096,"\n"],[1,1097,"#"]],[1096,1096],[1097,1097]]],[1555851204487,["28447@DESKTOP-BE7HQ26",[[1,1097,"## Hive的作用"]],[1097,1097],[1107,1107]]],[1555851204758,["28447@DESKTOP-BE7HQ26",[[1,1107,"\n\n"]],[1107,1107],[1108,1108]]],[1555851232983,["28447@DESKTOP-BE7HQ26",[[1,1096,"\n"]],[1095,1095],[1096,1096]]],[1555851237076,["28447@DESKTOP-BE7HQ26",[[1,1096,"### HIve"]],[1096,1096],[1104,1104]]],[1555851237613,["28447@DESKTOP-BE7HQ26",[[-1,1101,"Ive"]],[1104,1104],[1101,1101]]],[1555851241287,["28447@DESKTOP-BE7HQ26",[[1,1101,"ive是神恶魔"]],[1101,1101],[1108,1108]]],[1555851242573,["28447@DESKTOP-BE7HQ26",[[-1,1105,"神恶魔"]],[1108,1108],[1105,1105]]],[1555851243908,["28447@DESKTOP-BE7HQ26",[[1,1105,"什么"]],[1105,1105],[1107,1107]]],[1555851244334,["28447@DESKTOP-BE7HQ26",[[1,1108,"\n"]],[1107,1107],[1108,1108]]],[1555851245020,["28447@DESKTOP-BE7HQ26",[[1,1108," [Hive](http://lib.csdn.net/base/hive \"Hive知识库\") 是基于 [Hadoop](http://lib.csdn.net/base/hadoop \"Hadoop知识库\") 构建的一套数据仓库分析系统，是数据挖掘的一个工具（利用mapreduce挖掘hdfs上的数据）"]],[1108,1108],[1262,1262]]],[1555851307864,[null,[[-1,1087,"\nHIv"],[1,1091,"## H"]],[1087,1087],[1095,1095]]],[1555851307864,[null,[[1,1087,"\nHIv"],[-1,1087,"## H"]],[1095,1095],[1087,1087]]],[1555851261333,["28447@DESKTOP-BE7HQ26",[[-1,1114,"](http://lib.csdn.net/base/hive \"Hive知识库\")"]],[1114,1156],[1114,1114]]],[1555851264510,["28447@DESKTOP-BE7HQ26",[[-1,1109,"["]],[1110,1110],[1109,1109]]],[1555851266545,["28447@DESKTOP-BE7HQ26",[[-1,1108," "],[1,1109," "],[-1,1113," 是基于 "],[1,1118," 、是基于 "],[-1,1171," "],[1,1172," "]],[1114,1114],[1115,1115]]],[1555851267315,["28447@DESKTOP-BE7HQ26",[[-1,1114,"、"]],[1115,1115],[1114,1114]]],[1555851270123,["28447@DESKTOP-BE7HQ26",[[-1,1125,"](http://lib.csdn.net/base/hadoop "]],[1125,1159],[1125,1125]]],[1555851273598,["28447@DESKTOP-BE7HQ26",[[-1,1125,"\"Hadoop知识库\")"]],[1126,1137],[1125,1125]]],[1555851274711,["28447@DESKTOP-BE7HQ26",[[-1,1118,"["]],[1119,1119],[1118,1118]]],[1555851280084,["28447@DESKTOP-BE7HQ26",[[1,1173," \n"]],[1172,1172],[1174,1174]]],[1555851281781,["28447@DESKTOP-BE7HQ26",[[1,1096,"\n"]],[1095,1095],[1096,1096]]],[1555851428251,[null,[[-1,1087,"\nHIv"],[1,1091,"## H"]],[1087,1087],[1095,1095]]],[1555851428251,[null,[[1,1087,"\nHIv"],[-1,1087,"## H"]],[1095,1095],[1087,1087]]],[1555851391269,["28447@DESKTOP-BE7HQ26",[[-1,1140,"是数据挖掘的一个工具"],[1,1150,"用来进行数据提取转化加载（ETL）"]],[1140,1150],[1157,1157]]],[1555851395764,["28447@DESKTOP-BE7HQ26",[[1,1196,"\n"]],[1194,1194],[1195,1195]]],[1555851404251,["28447@DESKTOP-BE7HQ26",[[-1,1183,"### Hive的作用"]],[1183,1194],[1183,1183]]],[1555851631864,[null,[[-1,1087,"\nHIv"],[1,1091,"## H"]],[1087,1087],[1095,1095]]],[1555851631864,[null,[[1,1087,"\nHIv"],[-1,1087,"## H"]],[1095,1095],[1087,1087]]],[1555851620495,["28447@DESKTOP-BE7HQ26",[[1,1183,"【】"]],[1183,1183],[1185,1185]]],[1555851621128,["28447@DESKTOP-BE7HQ26",[[-1,1183,"【】"]],[1185,1185],[1183,1183]]],[1555851621866,["28447@DESKTOP-BE7HQ26",[[1,1183,"[]"]],[1183,1183],[1185,1185]]],[1555851629305,["28447@DESKTOP-BE7HQ26",[[1,1184,"Hive参考文章"]],[1184,1184],[1192,1192]]],[1555851630822,["28447@DESKTOP-BE7HQ26",[[1,1193,"("]],[1193,1193],[1194,1194]]],[1555851630848,["28447@DESKTOP-BE7HQ26",[[1,1194,"https://)"]],[1194,1194],[1194,1202]]],[1555851631356,["28447@DESKTOP-BE7HQ26",[[1,1202,"blog.csdn.net/francis_lzz/article/details/77720827"]],[1194,1202],[1252,1252]]],[1555851657769,[null,[[-1,1087,"\nHIv"],[1,1091,"## H"]],[1087,1087],[1095,1095]]],[1555851657769,[null,[[1,1087,"\nHIv"],[-1,1087,"## H"]],[1095,1095],[1087,1087]]],[1555851656882,["28447@DESKTOP-BE7HQ26",[[1,1021,"zookeeper为什么是奇数个集群 "]],[1021,1021],[1040,1040]]],[1555852077792,[null,[[-1,1106,"\nHIv"],[1,1110,"## H"]],[1106,1106],[1114,1114]]],[1555852077792,[null,[[1,1106,"\nHIv"],[-1,1106,"## H"]],[1114,1114],[1106,1106]]],[1555852060212,["28447@DESKTOP-BE7HQ26",[[1,229,"\n"]],[227,227],[228,228]]],[1555852060403,["28447@DESKTOP-BE7HQ26",[[1,230,"\n"]],[228,228],[229,229]]],[1555852060844,["28447@DESKTOP-BE7HQ26",[[1,229,"## 2.  Spark RDD的五大特性\n   - 1. A list of partitions\n   RDD是一个由多个partition（某个节点里的某一片连续的数据）组成的的list；将数据加载为RDD时，一般会遵循数据的本地性（一般一个hdfs里的block会加载为一个partition）\n   - 2. A function for computing each split\n   RDD的每个partition上面都会有function，也就是函数应用，其作用是实现RDD之间partition的转换。\n   - 3. A list of dependencies on other RDDs\n    RDD会记录它的依赖 ，为了容错（重算，cache，checkpoint），也就是说在内存中的RDD操作时出错或丢失会进行重算。\n  - 4. Optionally,a Partitioner for Key-value RDDs\n  可选项，如果RDD里面存的数据是key-value形式，则可以传递一个自定义的Partitioner进行重新分区，例如这里自定义的Partitioner是基于key进行分区，那则会将不同RDD里面的相同key的数据放到同一个partition里面\n  - 5. Optionally, a list of preferred locations to compute each split on\n    **最优的位置**去计算，也就是**数据的本地性**。\n"]],[229,229],[887,887]]],[1555852065515,["28447@DESKTOP-BE7HQ26",[[-1,232,"2.  "]],[236,236],[232,232]]],[1555852137782,[null,[[-1,1762,"\nHIv"],[1,1766,"## H"]],[1762,1762],[1770,1770]]],[1555852137782,[null,[[1,1762,"\nHIv"],[-1,1762,"## H"]],[1770,1770],[1762,1762]]],[1555852078190,["28447@DESKTOP-BE7HQ26",[[1,231,"$"]],[231,231],[232,232]]],[1555852078709,["28447@DESKTOP-BE7HQ26",[[-1,231,"$"]],[232,232],[231,231]]],[1555852079545,["28447@DESKTOP-BE7HQ26",[[1,231,"#"]],[231,231],[232,232]]],[1555853819253,[null,[[-1,1763,"\nHIv"],[1,1767,"## H"]],[1763,1763],[1771,1771]]],[1555853819253,[null,[[1,1763,"\nHIv"],[-1,1763,"## H"]],[1771,1771],[1763,1763]]],[1555853804299,["28447@DESKTOP-BE7HQ26",[[1,886,"\n"]],[885,885],[886,886]]],[1555853807540,["28447@DESKTOP-BE7HQ26",[[1,885,"### Spark读取Kafka的两种方式，两者区别"]],[885,885],[911,911]]],[1555853808587,["28447@DESKTOP-BE7HQ26",[[1,913,"\n"]],[911,911],[912,912]]],[1555853813201,["28447@DESKTOP-BE7HQ26",[[1,912,"- 1. "]],[912,912],[917,917]]],[1555853879266,[null,[[-1,1796,"\nHIv"],[1,1800,"## H"]],[1796,1796],[1804,1804]]],[1555853879266,[null,[[1,1796,"\nHIv"],[-1,1796,"## H"]],[1804,1804],[1796,1796]]],[1555853819468,["28447@DESKTOP-BE7HQ26",[[1,917," Receiver-base：实时读取缓存到内存中"]],[917,917],[942,942]]],[1555853820364,["28447@DESKTOP-BE7HQ26",[[1,943,"- \n"]],[942,942],[945,945]]],[1555853827075,["28447@DESKTOP-BE7HQ26",[[1,945,"2.  Direct：定时批量读取"]],[945,945],[962,962]]],[1555853999264,[null,[[-1,1841,"\nHIv"],[1,1845,"## H"]],[1841,1841],[1849,1849]]],[1555853999264,[null,[[1,1841,"\nHIv"],[-1,1841,"## H"]],[1849,1849],[1841,1841]]],[1555853962315,["28447@DESKTOP-BE7HQ26",[[1,945,"\n- "]],[942,942],[945,945]]],[1555853962773,["28447@DESKTOP-BE7HQ26",[[-1,943,"- "]],[945,945],[944,944]]],[1555853964571,["28447@DESKTOP-BE7HQ26",[[1,943,"先把数据从kafka中读取出来，然后缓存在内存，再定时处理。如果这时候集群退出，而偏移量又没处理好的话，数据就丢掉了，存在程序失败丢失数据的可能，后在Spark 1.2时引入一个配置参数spark.streaming.receiver.writeAheadLog.enable以规避此风险。"]],[943,943],[1088,1088]]],[1555853978467,["28447@DESKTOP-BE7HQ26",[[1,1089,"\n"]],[1088,1088],[1089,1089]]],[1555853978893,["28447@DESKTOP-BE7HQ26",[[1,1089,"操作的类： KafkaUtils.createStream"]],[1089,1089],[1118,1118]]],[1555853982531,["28447@DESKTOP-BE7HQ26",[[-1,1095,"KafkaUtils.createStream\n"]],[1095,1119],[1095,1095]]],[1555853983908,["28447@DESKTOP-BE7HQ26",[[1,1095,"&&"]],[1095,1095],[1097,1097]]],[1555853984708,["28447@DESKTOP-BE7HQ26",[[-1,1095,"&&"]],[1097,1097],[1095,1095]]],[1555853985295,["28447@DESKTOP-BE7HQ26",[[1,1095,"****"]],[1095,1095],[1097,1097]]],[1555853985907,["28447@DESKTOP-BE7HQ26",[[1,1097,"KafkaUtils.createStream\n"]],[1097,1097],[1121,1121]]],[1555853987573,["28447@DESKTOP-BE7HQ26",[[1,1123,"\n"]],[1123,1123],[1124,1124]]],[1555853989955,["28447@DESKTOP-BE7HQ26",[[-1,1120,"\n"]],[1121,1121],[1120,1120]]],[1555853993684,["28447@DESKTOP-BE7HQ26",[[1,1123,"\n"]],[1122,1122],[1123,1123]]],[1555854059262,[null,[[-1,2022,"\nHIv"],[1,2026,"## H"]],[2022,2022],[2030,2030]]],[1555854059262,[null,[[1,2022,"\nHIv"],[-1,2022,"## H"]],[2030,2030],[2022,2022]]],[1555854005714,["28447@DESKTOP-BE7HQ26",[[1,1123,"j"]],[1123,1123],[1124,1124]]],[1555854006355,["28447@DESKTOP-BE7HQ26",[[-1,1123,"j"]],[1124,1124],[1123,1123]]],[1555854007309,["28447@DESKTOP-BE7HQ26",[[1,1123,"Jiyu"]],[1123,1123],[1127,1127]]],[1555854008212,["28447@DESKTOP-BE7HQ26",[[-1,1123,"Jiyu"]],[1127,1127],[1123,1123]]],[1555854012320,["28447@DESKTOP-BE7HQ26",[[1,1123,"基于zookeeper"]],[1123,1123],[1134,1134]]],[1555854419283,[null,[[-1,2033,"\nHIv"],[1,2037,"## H"]],[2033,2033],[2041,2041]]],[1555854419283,[null,[[1,2033,"\nHIv"],[-1,2033,"## H"]],[2041,2041],[2033,2033]]],[1555854394018,["28447@DESKTOP-BE7HQ26",[[-1,1123,"基于"]],[1125,1125],[1123,1123]]],[1555854396208,["28447@DESKTOP-BE7HQ26",[[1,1132,"wei"]],[1132,1132],[1135,1135]]],[1555854396915,["28447@DESKTOP-BE7HQ26",[[-1,1132,"wei"]],[1135,1135],[1132,1132]]],[1555854401586,["28447@DESKTOP-BE7HQ26",[[1,1132,"维护offset"]],[1132,1132],[1140,1140]]],[1555854404453,["28447@DESKTOP-BE7HQ26",[[1,1161,"- \n"]],[1160,1160],[1163,1163]]],[1555854405604,["28447@DESKTOP-BE7HQ26",[[-1,1161,"- "]],[1163,1163],[1161,1161]]],[1555854479281,[null,[[-1,2040,"\nHIv"],[1,2044,"## H"]],[2040,2040],[2048,2048]]],[1555854479281,[null,[[1,2040,"\nHIv"],[-1,2040,"## H"]],[2048,2048],[2040,2040]]],[1555854423501,["28447@DESKTOP-BE7HQ26",[[1,1161,"  操作的类： KafkaUtils.createDirectStream"]],[1161,1161],[1198,1198]]],[1555854426061,["28447@DESKTOP-BE7HQ26",[[-1,1169,"KafkaUtils.createDirectStream"]],[1169,1198],[1169,1169]]],[1555854427329,["28447@DESKTOP-BE7HQ26",[[1,1169,"****"]],[1169,1169],[1171,1171]]],[1555854427812,["28447@DESKTOP-BE7HQ26",[[1,1171,"KafkaUtils.createDirectStream"]],[1171,1171],[1200,1200]]],[1555854430219,["28447@DESKTOP-BE7HQ26",[[1,1161,"- \n"]],[1160,1160],[1163,1163]]],[1555854431949,["28447@DESKTOP-BE7HQ26",[[-1,1161,"- "]],[1163,1163],[1161,1161]]],[1555854597207,[null,[[-1,2082,"\nHIv"],[1,2086,"## H"]],[2082,2082],[2090,2090]]],[1555854597207,[null,[[1,2082,"\nHIv"],[-1,2082,"## H"]],[2090,2090],[2082,2082]]],[1555854579069,["28447@DESKTOP-BE7HQ26",[[1,1161,"Direct方式无需Receiver读取数据，而是需要计算时再读取数据，所以Direct方式的数据消费对内存的要求不高，只需要考虑批量计算所需要的内存即可；另外batch任务堆积时，也不会影响数据堆积。"]],[1161,1161],[1262,1262]]],[1555854586419,["28447@DESKTOP-BE7HQ26",[[1,1305,"  \n"]],[1304,1304],[1307,1307]]],[1555854588475,["28447@DESKTOP-BE7HQ26",[[1,1307,"chen"]],[1307,1307],[1311,1311]]],[1555854589292,["28447@DESKTOP-BE7HQ26",[[-1,1307,"chen"]],[1311,1311],[1307,1307]]],[1555854596502,["28447@DESKTOP-BE7HQ26",[[1,1307,"程序自己维护offset"]],[1307,1307],[1319,1319]]],[1555854657203,[null,[[-1,2198,"\nHIv"],[1,2202,"## H"]],[2198,2198],[2206,2206]]],[1555854657203,[null,[[1,2198,"\nHIv"],[-1,2198,"## H"]],[2206,2206],[2198,2198]]],[1555854598715,["28447@DESKTOP-BE7HQ26",[[1,1320,"  \n"]],[1319,1319],[1322,1322]]],[1555854717204,[null,[[-1,2201,"\nHIv"],[1,2205,"## H"]],[2201,2201],[2209,2209]]],[1555854717204,[null,[[1,2201,"\nHIv"],[-1,2201,"## H"]],[2209,2209],[2201,2201]]],[1555854661563,["28447@DESKTOP-BE7HQ26",[[1,1323,"![Kafka结合Streaming的两种方式]($resource/Kafka%E7%BB%93%E5%90%88Streaming%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png)"]],[1322,1322],[1441,1441]]],[1555854683907,["28447@DESKTOP-BE7HQ26",[[1,1441,"\n"]],[1440,1440],[1441,1441]]],[1555854777198,[null,[[-1,2319,"\nHIv"],[1,2323,"## H"]],[2319,2319],[2327,2327]]],[1555854777198,[null,[[1,2319,"\nHIv"],[-1,2319,"## H"]],[2327,2327],[2319,2319]]],[1555854768450,["28447@DESKTOP-BE7HQ26",[[1,1442,"\n"]],[1441,1441],[1442,1442]]],[1555854768642,["28447@DESKTOP-BE7HQ26",[[1,1443,"\n"]],[1442,1442],[1443,1443]]],[1555854772888,["28447@DESKTOP-BE7HQ26",[[1,1442,"## SP"]],[1442,1442],[1447,1447]]],[1555854774844,["28447@DESKTOP-BE7HQ26",[[-1,1444," SP"]],[1447,1447],[1444,1444]]],[1555854777110,["28447@DESKTOP-BE7HQ26",[[1,1444,"# SPark"]],[1444,1444],[1451,1451]]],[1555854837202,[null,[[-1,2330,"\nHIv"],[1,2334,"## H"]],[2330,2330],[2338,2338]]],[1555854837202,[null,[[1,2330,"\nHIv"],[-1,2330,"## H"]],[2338,2338],[2330,2330]]],[1555854778115,["28447@DESKTOP-BE7HQ26",[[-1,1447,"Park"]],[1451,1451],[1447,1447]]],[1555854779057,["28447@DESKTOP-BE7HQ26",[[1,1447,"prk"]],[1447,1447],[1450,1450]]],[1555854780292,["28447@DESKTOP-BE7HQ26",[[-1,1448,"rk"]],[1450,1450],[1448,1448]]],[1555854783015,["28447@DESKTOP-BE7HQ26",[[1,1448,"ark行呢个"]],[1448,1448],[1454,1454]]],[1555854783941,["28447@DESKTOP-BE7HQ26",[[-1,1451,"行呢个"]],[1454,1454],[1451,1451]]],[1555854789460,["28447@DESKTOP-BE7HQ26",[[1,1451,"性能调优"]],[1451,1451],[1455,1455]]],[1555854832372,["28447@DESKTOP-BE7HQ26",[[1,1457,"\n"]],[1455,1455],[1456,1456]]],[1555854897214,[null,[[-1,2335,"\nHIv"],[1,2339,"## H"]],[2335,2335],[2343,2343]]],[1555854897214,[null,[[1,2335,"\nHIv"],[-1,2335,"## H"]],[2343,2343],[2335,2335]]],[1555854847532,["28447@DESKTOP-BE7HQ26",[[1,1456,"1. **小分区合并的问题**"]],[1456,1456],[1471,1471]]],[1555854851528,["28447@DESKTOP-BE7HQ26",[[1,1456,"- "]],[1456,1456],[1458,1458]]],[1555854855446,["28447@DESKTOP-BE7HQ26",[[-1,1456,"-"]],[1457,1457],[1456,1456]]],[1555854855912,["28447@DESKTOP-BE7HQ26",[[1,1456,"*"]],[1456,1456],[1457,1457]]],[1555854856436,["28447@DESKTOP-BE7HQ26",[[1,1458," "]],[1457,1457],[1458,1458]]],[1555854857285,["28447@DESKTOP-BE7HQ26",[[-1,1458," "]],[1458,1458],[1457,1457]]],[1555854858204,["28447@DESKTOP-BE7HQ26",[[-1,1457," "]],[1458,1458],[1457,1457]]],[1555854858898,["28447@DESKTOP-BE7HQ26",[[1,1457," "]],[1457,1457],[1458,1458]]],[1555854862461,["28447@DESKTOP-BE7HQ26",[[1,1474,"* \n"]],[1473,1473],[1476,1476]]],[1555854865661,["28447@DESKTOP-BE7HQ26",[[1,1476,"2. ****"]],[1476,1476],[1481,1481]]],[1555854869658,["28447@DESKTOP-BE7HQ26",[[1,1481,"数据倾斜问题"]],[1481,1481],[1487,1487]]],[1555854871859,["28447@DESKTOP-BE7HQ26",[[1,1476,"\n* "]],[1473,1473],[1476,1476]]],[1555854872822,["28447@DESKTOP-BE7HQ26",[[-1,1474,"* "]],[1476,1476],[1474,1474]]],[1555857599263,[null,[[-1,2369,"\nHIv"],[1,2373,"## H"]],[2369,2369],[2377,2377]]],[1555857599263,[null,[[1,2369,"\nHIv"],[-1,2369,"## H"]],[2377,2377],[2369,2369]]],[1555857561312,["28447@DESKTOP-BE7HQ26",[[1,1474,"由于程序中过度使用filter算子或者使用不当，都会造成大量的小分区出现。"]],[1474,1474],[1511,1511]]],[1555857563627,["28447@DESKTOP-BE7HQ26",[[1,1512,"\n"]],[1511,1511],[1512,1512]]],[1555857564059,["28447@DESKTOP-BE7HQ26",[[1,1513,"\n"]],[1512,1512],[1513,1513]]],[1555857566635,["28447@DESKTOP-BE7HQ26",[[1,1514,"\n"]],[1513,1513],[1514,1514]]],[1555857659283,[null,[[-1,2409,"\nHIv"],[1,2413,"## H"]],[2409,2409],[2417,2417]]],[1555857659283,[null,[[1,2409,"\nHIv"],[-1,2409,"## H"]],[2417,2417],[2409,2409]]],[1555857635039,["28447@DESKTOP-BE7HQ26",[[1,1512,"**带来的问题就是：任务处理的数据量很小，反复地切换任务所消耗的资源反而会带来很大的系统开销。**"]],[1512,1512],[1561,1561]]],[1555857642699,["28447@DESKTOP-BE7HQ26",[[1,1564,"\n"]],[1561,1561],[1562,1562]]],[1555857652295,["28447@DESKTOP-BE7HQ26",[[1,1562,"**解决方案：使用重分区函数coalesce进行数据紧缩、减少分区数并设置shuffle=true保证任务是并行计算的**\n\n减少分区数，虽然意味着并行度降低，但是相对比之前的大量小任务过度切换的消耗，却是比较值得的。\n\n这里也可以直接使用repartition重分区函数进行操作，因为其底层使用的是coalesce并设置Shuffle=true"]],[1562,1562],[1735,1735]]],[1555857654570,["28447@DESKTOP-BE7HQ26",[[1,1625,"\n"]],[1623,1623],[1624,1624]]],[1555857654947,["28447@DESKTOP-BE7HQ26",[[1,1626,"\n"]],[1624,1624],[1625,1625]]],[1555857779265,[null,[[-1,2634,"\nHIv"],[1,2638,"## H"]],[2634,2634],[2642,2642]]],[1555857779265,[null,[[1,2634,"\nHIv"],[-1,2634,"## H"]],[2642,2642],[2634,2634]]],[1555857730339,["28447@DESKTOP-BE7HQ26",[[1,1623,"（）"]],[1623,1623],[1625,1625]]],[1555857735193,["28447@DESKTOP-BE7HQ26",[[1,1624,"或者使用****"]],[1624,1624],[1630,1630]]],[1555857738702,["28447@DESKTOP-BE7HQ26",[[1,1630,"repartition"]],[1630,1630],[1641,1641]]],[1555857754121,["28447@DESKTOP-BE7HQ26",[[1,1643,"cho"]],[1643,1643],[1646,1646]]],[1555857754845,["28447@DESKTOP-BE7HQ26",[[-1,1643,"cho）"]],[1646,1646],[1643,1643]]],[1555857763339,["28447@DESKTOP-BE7HQ26",[[1,1643,"重）"]],[1643,1643],[1645,1645]]],[1555857772199,["28447@DESKTOP-BE7HQ26",[[1,1644,"分区，"]],[1644,1644],[1647,1647]]],[1555857839274,[null,[[-1,2659,"\nHIv"],[1,2663,"## H"]],[2659,2659],[2667,2667]]],[1555857839274,[null,[[1,2659,"\nHIv"],[-1,2659,"## H"]],[2667,2667],[2659,2659]]],[1555857782799,["28447@DESKTOP-BE7HQ26",[[1,1647,"其底层使用的是coalesce并设置Shuffle=true"]],[1647,1647],[1677,1677]]],[1555857806790,["28447@DESKTOP-BE7HQ26",[[1,1679,"* 2. **数据倾斜问题**"]],[1679,1679],[1694,1694]]],[1555857808141,["28447@DESKTOP-BE7HQ26",[[1,1695,"* \n"]],[1694,1694],[1697,1697]]],[1555857809340,["28447@DESKTOP-BE7HQ26",[[-1,1695,"* "]],[1697,1697],[1695,1695]]],[1555857826328,["28447@DESKTOP-BE7HQ26",[[1,1695,"典型的场景是：大量的数据被分配到小部分节点计算，而其他大部分节点却只计算小部分数据。"]],[1695,1695],[1737,1737]]],[1555857827443,["28447@DESKTOP-BE7HQ26",[[1,1740,"\n"]],[1737,1737],[1738,1738]]],[1555857827700,["28447@DESKTOP-BE7HQ26",[[1,1741,"\n"]],[1738,1738],[1739,1739]]]],null,"28447@DESKTOP-BE7HQ26"],["111c4608-6432-4eaf-8a3d-7e656643206f",1555932045366,"# 面试题整理\n\n\n## Spark篇\n### Spark人物提交流程\n- 1.SparkContext提交作业\n- 2.DAGScheduler拆分stage\n- 3.生成作业\n- 4.提交任务集\n- 5.提交任务\n- 6.执行任务\n- 7.跟踪任务\n\n![任务调度总体诠释]($resource/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg)\n\n### Spark RDD的五大特性\n   - 1. A list of partitions\n   RDD是一个由多个partition（某个节点里的某一片连续的数据）组成的的list；将数据加载为RDD时，一般会遵循数据的本地性（一般一个hdfs里的block会加载为一个partition）\n   - 2. A function for computing each split\n   RDD的每个partition上面都会有function，也就是函数应用，其作用是实现RDD之间partition的转换。\n   - 3. A list of dependencies on other RDDs\n    RDD会记录它的依赖 ，为了容错（重算，cache，checkpoint），也就是说在内存中的RDD操作时出错或丢失会进行重算。\n  - 4. Optionally,a Partitioner for Key-value RDDs\n  可选项，如果RDD里面存的数据是key-value形式，则可以传递一个自定义的Partitioner进行重新分区，例如这里自定义的Partitioner是基于key进行分区，那则会将不同RDD里面的相同key的数据放到同一个partition里面\n  - 5. Optionally, a list of preferred locations to compute each split on\n    **最优的位置**去计算，也就是**数据的本地性**。\n\n### Spark读取Kafka的两种方式，两者区别\n- 1.  Receiver-base：实时读取缓存到内存中\n先把数据从kafka中读取出来，然后缓存在内存，再定时处理。如果这时候集群退出，而偏移量又没处理好的话，数据就丢掉了，存在程序失败丢失数据的可能，后在Spark 1.2时引入一个配置参数spark.streaming.receiver.writeAheadLog.enable以规避此风险。\n操作的类： **KafkaUtils.createStream**\nzookeeper维护offset\n- 2.  Direct：定时批量读取\nDirect方式无需Receiver读取数据，而是需要计算时再读取数据，所以Direct方式的数据消费对内存的要求不高，只需要考虑批量计算所需要的内存即可；另外batch任务堆积时，也不会影响数据堆积。\n  操作的类： **KafkaUtils.createDirectStream**\n  程序自己维护offset\n  \n![Kafka结合Streaming的两种方式]($resource/Kafka%E7%BB%93%E5%90%88Streaming%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png)\n\n### Spark性能调优\n* 1. **小分区合并的问题**\n由于程序中过度使用filter算子或者使用不当，都会造成大量的小分区出现。\n**带来的问题就是：任务处理的数据量很小，反复地切换任务所消耗的资源反而会带来很大的系统开销。**\n**解决方案：使用重分区函数coalesce进行数据紧缩、减少分区数并设置shuffle=true保证任务是并行计算的**（或者使用**repartition**重分区，其底层使用的是coalesce并设置Shuffle=true）\n* 2. **数据倾斜问题**\n典型的场景是：大量的数据被分配到小部分节点计算，而其他大部分节点却只计算小部分数据。\n\n\n\n\n减少分区数，虽然意味着并行度降低，但是相对比之前的大量小任务过度切换的消耗，却是比较值得的。\n\n这里也可以直接使用repartition重分区函数进行操作，因为其底层使用的是coalesce并设置Shuffle=true\n\n\n* 2. **数据倾斜问题**\n\n## Hadoop篇\n\n### Yarn的认识（简单介绍）\nYarn是hadoop2.X之后出现的Hadoop 资源管理器，它是一个**资源管理系统和调度平台**。\n\nYARN 是一个资源管理、任务调度的框架，主要包含三大模块：ResourceManager（RM）、\nNodeManager（NM）、ApplicationMaster（AM）。\n- ResourceManager 负责所有资源的监控、分配和管理；\n- ApplicationMaster 负责每一个具体应用程序的调度和协调；\n- NodeManager 负责每一个节点的维护。\n对于所有的 applications，RM 拥有绝对的控制权和对资源的分配权。而每个 AM 则会和\nRM 协商资源，同时和 NodeManager 通信来执行和监控 task。\n\n![Yarn架构图]($resource/Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n[参考文章](https://blog.csdn.net/qq_33624952/article/details/79341034)\n\n## Zookeeper篇\n\n### Zookeeper简单介绍\nZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态.\n\n分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n### 为什么zookeeper集群的节点数是奇数个\n首先介绍zookeeper选举的规则：leader选举，要求**可用节点数量 > 总节点数量/2**\n设置奇数个的目的：\n**1、防止由脑裂造成的集群不可用**\n**2、在容错能力相同的情况下，奇数台更节省资源。**\n[zookeeper为什么是奇数个集群 参考文章](https://blog.csdn.net/u010476994/article/details/79806041)\n\n## Hive篇\n\n### Hive是什么\n Hive 是基于 Hadoop 构建的一套数据仓库分析系统，用来进行数据提取转化加载（ETL）（利用mapreduce挖掘hdfs上的数据）\n \n[Hive参考文章](https://blog.csdn.net/francis_lzz/article/details/77720827)\n\n\n",[[1555931997671,["28447@DESKTOP-BE7HQ26",[[1,885,"\n"]],[884,884],[885,885]]],[1555931997744,["28447@DESKTOP-BE7HQ26",[[1,886,"\n"]],[885,885],[886,886]]],[1555932001109,["28447@DESKTOP-BE7HQ26",[[1,885,"### Spark"]],[885,885],[894,894]]],[1555932003112,["28447@DESKTOP-BE7HQ26",[[-1,889,"Spark"]],[894,894],[889,889]]],[1555932012618,["28447@DESKTOP-BE7HQ26",[[1,889,"transformation和action算子"]],[889,889],[912,912]]],[1555932013167,["28447@DESKTOP-BE7HQ26",[[1,914,"\n"]],[912,912],[913,913]]],[1555932032784,["28447@DESKTOP-BE7HQ26",[[-1,898,"ation"]],[898,903],[898,898]]],[1555932109759,["28447@DESKTOP-BE7HQ26",[[1,910,"\n"]],[907,907],[908,908]]],[1555932121522,["28447@DESKTOP-BE7HQ26",[[1,908,"transform算子得到新的RDD"]],[908,908],[926,926]]],[1555932121709,["28447@DESKTOP-BE7HQ26",[[1,929,"\n"]],[926,926],[927,927]]],[1555932126542,["28447@DESKTOP-BE7HQ26",[[1,927,"action得到值"]],[927,927],[936,936]]],[1555932131851,["28447@DESKTOP-BE7HQ26",[[-1,908,"transform算子得到新的RDD"]],[908,926],[908,908]]],[1555932132889,["28447@DESKTOP-BE7HQ26",[[1,908,"****"]],[908,908],[910,910]]],[1555932133233,["28447@DESKTOP-BE7HQ26",[[1,910,"transform算子得到新的RDD"]],[910,910],[928,928]]],[1555932135400,["28447@DESKTOP-BE7HQ26",[[-1,931,"action得到值"]],[931,940],[931,931]]],[1555932136470,["28447@DESKTOP-BE7HQ26",[[1,931,"****"]],[931,931],[933,933]]],[1555932136758,["28447@DESKTOP-BE7HQ26",[[1,933,"action得到值"]],[933,933],[942,942]]],[1555932138408,["28447@DESKTOP-BE7HQ26",[[1,931,"\n"]],[930,930],[931,931]]],[1555932138549,["28447@DESKTOP-BE7HQ26",[[1,932,"\n"]],[931,931],[932,932]]],[1555932150293,["28447@DESKTOP-BE7HQ26",[[1,931,"常用transform算子："]],[931,931],[945,945]]],[1555932153487,["28447@DESKTOP-BE7HQ26",[[1,963,"\n"]],[960,960],[961,961]]],[1555932160404,["28447@DESKTOP-BE7HQ26",[[1,961,"常见action算子："]],[961,961],[972,972]]],[1555932163055,["28447@DESKTOP-BE7HQ26",[[-1,932,"用"]],[933,933],[932,932]]],[1555932166156,["28447@DESKTOP-BE7HQ26",[[1,932,"见"]],[932,932],[933,933]]],[1555932420858,["28447@DESKTOP-BE7HQ26",[[1,945,"map、filiter"]],[945,945],[956,956]]],[1555932424663,["28447@DESKTOP-BE7HQ26",[[-1,952,"i"]],[953,953],[952,952]]],[1555932431263,["28447@DESKTOP-BE7HQ26",[[1,955,"\\flat"]],[955,955],[960,960]]],[1555932432846,["28447@DESKTOP-BE7HQ26",[[-1,955,"\\flat"]],[960,960],[955,955]]],[1555932437447,["28447@DESKTOP-BE7HQ26",[[1,955,"、flatMap\\"]],[955,955],[964,964]]],[1555932438318,["28447@DESKTOP-BE7HQ26",[[-1,963,"\\"]],[964,964],[963,963]]],[1555932438631,["28447@DESKTOP-BE7HQ26",[[1,963,"、"]],[963,963],[964,964]]],[1555932463931,["28447@DESKTOP-BE7HQ26",[[1,949,"mapPartitions、"]],[949,949],[963,963]]],[1555932472328,["28447@DESKTOP-BE7HQ26",[[1,962,"（）"]],[962,962],[964,964]]],[1555932474498,["28447@DESKTOP-BE7HQ26",[[1,963,"登对"]],[963,963],[965,965]]],[1555932475830,["28447@DESKTOP-BE7HQ26",[[-1,963,"登对"]],[965,965],[963,963]]],[1555932482860,["28447@DESKTOP-BE7HQ26",[[1,963,"针对partition"]],[963,963],[974,974]]],[1555932485071,["28447@DESKTOP-BE7HQ26",[[1,948,"（）"]],[948,948],[950,950]]],[1555932489662,["28447@DESKTOP-BE7HQ26",[[1,949,"针对每个元素"]],[949,949],[955,955]]],[1555932491709,["28447@DESKTOP-BE7HQ26",[[1,1001,"\n"]],[999,999],[1000,1000]]],[1555932492614,["28447@DESKTOP-BE7HQ26",[[-1,1001,"\n"]],[1000,1000],[999,999]]],[1555932513579,["28447@DESKTOP-BE7HQ26",[[1,999,"dnio"]],[999,999],[1003,1003]]],[1555932514452,["28447@DESKTOP-BE7HQ26",[[-1,999,"dnio"]],[1003,1003],[999,999]]],[1555932515232,["28447@DESKTOP-BE7HQ26",[[1,999,"ui"]],[999,999],[1001,1001]]],[1555932515982,["28447@DESKTOP-BE7HQ26",[[-1,1000,"i"]],[1001,1001],[1000,1000]]],[1555932517627,["28447@DESKTOP-BE7HQ26",[[1,1000,"nion\\"]],[1000,1000],[1005,1005]]],[1555932518094,["28447@DESKTOP-BE7HQ26",[[-1,1004,"\\"]],[1005,1005],[1004,1004]]],[1555932526291,["28447@DESKTOP-BE7HQ26",[[1,1004,"、distinct\\"]],[1004,1004],[1014,1014]]],[1555932526317,["28447@DESKTOP-BE7HQ26",[[-1,1013,"\\"]],[1014,1014],[1013,1013]]],[1555932527138,["28447@DESKTOP-BE7HQ26",[[1,1013,"\\"]],[1013,1013],[1014,1014]]],[1555932527756,["28447@DESKTOP-BE7HQ26",[[-1,1013,"\\"]],[1014,1014],[1013,1013]]],[1555932535639,["28447@DESKTOP-BE7HQ26",[[1,1013,"、groupByKey\\"]],[1013,1013],[1025,1025]]],[1555932536318,["28447@DESKTOP-BE7HQ26",[[-1,1024,"\\"]],[1025,1025],[1024,1024]]],[1555932537249,["28447@DESKTOP-BE7HQ26",[[1,1024,"|re"]],[1024,1024],[1027,1027]]],[1555932538021,["28447@DESKTOP-BE7HQ26",[[-1,1024,"|re"]],[1027,1027],[1024,1024]]],[1555932546070,["28447@DESKTOP-BE7HQ26",[[1,1024,"、reduceByKey"]],[1024,1024],[1036,1036]]],[1555932549903,["28447@DESKTOP-BE7HQ26",[[-1,1014,"groupByKey"]],[1014,1024],[1014,1014]]],[1555932551011,["28447@DESKTOP-BE7HQ26",[[1,1014,"****"]],[1014,1014],[1016,1016]]],[1555932551222,["28447@DESKTOP-BE7HQ26",[[1,1016,"groupByKey"]],[1016,1016],[1026,1026]]],[1555932553439,["28447@DESKTOP-BE7HQ26",[[-1,1029,"reduceByKey"]],[1029,1040],[1029,1029]]],[1555932554463,["28447@DESKTOP-BE7HQ26",[[1,1029,"****"]],[1029,1029],[1031,1031]]],[1555932554710,["28447@DESKTOP-BE7HQ26",[[1,1031,"reduceByKey"]],[1031,1031],[1042,1042]]],[1555932560078,["28447@DESKTOP-BE7HQ26",[[-1,991,"flatMap"]],[991,998],[991,991]]],[1555932571321,["28447@DESKTOP-BE7HQ26",[[1,991,"**flatMap****"]],[991,991],[1002,1002]]],[1555932572263,["28447@DESKTOP-BE7HQ26",[[-1,1002,"**"]],[1002,1002],[1000,1000]]],[1555932576008,["28447@DESKTOP-BE7HQ26",[[-1,1009,"distinct"]],[1009,1017],[1009,1009]]],[1555932578434,["28447@DESKTOP-BE7HQ26",[[1,1009,"****"]],[1009,1009],[1013,1013]]],[1555932579464,["28447@DESKTOP-BE7HQ26",[[1,1011,"distinct"]],[1011,1011],[1019,1019]]],[1555932605837,["28447@DESKTOP-BE7HQ26",[[1,1052,"、sortByKey\\joi"]],[1052,1052],[1066,1066]]],[1555932607038,["28447@DESKTOP-BE7HQ26",[[-1,1062,"\\joi"]],[1066,1066],[1062,1062]]],[1555932609177,["28447@DESKTOP-BE7HQ26",[[1,1062,"、join"]],[1062,1062],[1067,1067]]],[1555932619340,["28447@DESKTOP-BE7HQ26",[[1,1097,"\n"]],[1094,1094],[1095,1095]]],[1555932619516,["28447@DESKTOP-BE7HQ26",[[1,1098,"\n"]],[1095,1095],[1096,1096]]],[1555932620298,["28447@DESKTOP-BE7HQ26",[[1,1096,"【】"]],[1096,1096],[1098,1098]]],[1555932620931,["28447@DESKTOP-BE7HQ26",[[-1,1096,"【】"]],[1098,1098],[1096,1096]]],[1555932621655,["28447@DESKTOP-BE7HQ26",[[1,1096,"[]"]],[1096,1096],[1098,1098]]],[1555932623449,["28447@DESKTOP-BE7HQ26",[[1,1097,"算子"]],[1097,1097],[1099,1099]]],[1555932625882,["28447@DESKTOP-BE7HQ26",[[1,1097,"创建"]],[1097,1097],[1099,1099]]],[1555932628156,["28447@DESKTOP-BE7HQ26",[[-1,1097,"创建"]],[1099,1099],[1097,1097]]],[1555932628802,["28447@DESKTOP-BE7HQ26",[[1,1097,"cha"]],[1097,1097],[1100,1100]]],[1555932629478,["28447@DESKTOP-BE7HQ26",[[-1,1097,"cha"]],[1100,1100],[1097,1097]]],[1555932631414,["28447@DESKTOP-BE7HQ26",[[1,1097,"常见"]],[1097,1097],[1099,1099]]],[1555932633097,["28447@DESKTOP-BE7HQ26",[[1,1102,"("]],[1102,1102],[1103,1103]]],[1555932633130,["28447@DESKTOP-BE7HQ26",[[1,1103,"https://)"]],[1103,1103],[1103,1111]]],[1555932633508,["28447@DESKTOP-BE7HQ26",[[1,1111,"my.oschina.net/134596/blog/3037972"]],[1103,1111],[1145,1145]]],[1555932645688,["28447@DESKTOP-BE7HQ26",[[1,1094,"reduce、count\\"]],[1094,1094],[1107,1107]]],[1555932646171,["28447@DESKTOP-BE7HQ26",[[-1,1106,"\\"]],[1107,1107],[1106,1106]]],[1555932649611,["28447@DESKTOP-BE7HQ26",[[1,1106,"、coolect"]],[1106,1106],[1114,1114]]],[1555932650843,["28447@DESKTOP-BE7HQ26",[[-1,1109,"olect"]],[1114,1114],[1109,1109]]],[1555932678314,["28447@DESKTOP-BE7HQ26",[[1,1109,"llect\\"]],[1109,1109],[1115,1115]]],[1555932678949,["28447@DESKTOP-BE7HQ26",[[-1,1114,"\\"]],[1115,1115],[1114,1114]]],[1555932679283,["28447@DESKTOP-BE7HQ26",[[1,1114,"|"]],[1114,1114],[1115,1115]]],[1555932680022,["28447@DESKTOP-BE7HQ26",[[-1,1114,"|"]],[1115,1115],[1114,1114]]],[1555932687239,["28447@DESKTOP-BE7HQ26",[[1,1114,"、saveAsTextFie"]],[1114,1114],[1128,1128]]],[1555932687556,["28447@DESKTOP-BE7HQ26",[[-1,1127,"e"]],[1128,1128],[1127,1127]]],[1555932687934,["28447@DESKTOP-BE7HQ26",[[1,1127,"ke"]],[1127,1127],[1129,1129]]],[1555932688525,["28447@DESKTOP-BE7HQ26",[[-1,1127,"ke"]],[1129,1129],[1127,1127]]],[1555932690921,["28447@DESKTOP-BE7HQ26",[[1,1127,"le、"]],[1127,1127],[1130,1130]]],[1555932695783,["28447@DESKTOP-BE7HQ26",[[1,1130,"countByKey"]],[1130,1130],[1140,1140]]],[1555932765978,["28447@DESKTOP-BE7HQ26",[[1,1140,"\\"]],[1140,1140],[1141,1141]]],[1555932766789,["28447@DESKTOP-BE7HQ26",[[-1,1140,"\\"]],[1141,1141],[1140,1140]]],[1555932767106,["28447@DESKTOP-BE7HQ26",[[1,1140,"|"]],[1140,1140],[1141,1141]]],[1555932767733,["28447@DESKTOP-BE7HQ26",[[-1,1140,"|"]],[1141,1141],[1140,1140]]],[1555932770699,["28447@DESKTOP-BE7HQ26",[[1,1140,"、foreach"]],[1140,1140],[1148,1148]]],[1555932872491,["28447@DESKTOP-BE7HQ26",[[1,1201,"【】"]],[1201,1201],[1203,1203]]],[1555932872836,["28447@DESKTOP-BE7HQ26",[[-1,1202,"】"]],[1203,1203],[1202,1202]]],[1555932873039,["28447@DESKTOP-BE7HQ26",[[-1,1201,"【"]],[1202,1202],[1201,1201]]],[1555932873787,["28447@DESKTOP-BE7HQ26",[[1,1201,"[]"]],[1201,1201],[1203,1203]]],[1555932880542,["28447@DESKTOP-BE7HQ26",[[1,1202,"算子操作实例"]],[1202,1202],[1208,1208]]],[1555932881666,["28447@DESKTOP-BE7HQ26",[[1,1209,"("]],[1209,1209],[1210,1210]]],[1555932881699,["28447@DESKTOP-BE7HQ26",[[1,1210,"https://)"]],[1210,1210],[1210,1218]]],[1555932882215,["28447@DESKTOP-BE7HQ26",[[1,1218,"blog.csdn.net/huozi07/article/details/50133259"]],[1210,1218],[1264,1264]]],[1555932896692,["28447@DESKTOP-BE7HQ26",[[-1,1204,"操作实"]],[1207,1207],[1204,1204]]],[1555932900538,["28447@DESKTOP-BE7HQ26",[[1,1204,"操作显示"]],[1204,1204],[1208,1208]]],[1555932901350,["28447@DESKTOP-BE7HQ26",[[-1,1206,"显"]],[1207,1207],[1206,1206]]],[1555933146868,["28447@DESKTOP-BE7HQ26",[[1,908,"\n"]],[907,907],[908,908]]],[1555933147335,["28447@DESKTOP-BE7HQ26",[[1,908,"Transformation不会立即执行，只是记录这些操作 \naction会执行前边的Transformation所有操作"]],[908,908],[969,969]]],[1555933151069,["28447@DESKTOP-BE7HQ26",[[1,970,"\n"]],[969,969],[970,970]]],[1555933152341,["28447@DESKTOP-BE7HQ26",[[-1,970,"\n"]],[970,970],[969,969]]],[1555933153492,["28447@DESKTOP-BE7HQ26",[[1,970,"\n"]],[969,969],[970,970]]],[1555938172974,["28447@DESKTOP-BE7HQ26",[[1,1330,"\n"]],[1329,1329],[1330,1330]]],[1555938173179,["28447@DESKTOP-BE7HQ26",[[1,1331,"\n"]],[1330,1330],[1331,1331]]],[1555938177193,["28447@DESKTOP-BE7HQ26",[[-1,937," "],[1,938," "],[1,1330,"### Spark"]],[1330,1330],[1339,1339]]],[1555938191212,["28447@DESKTOP-BE7HQ26",[[-1,1334,"S"],[1,1335,"s"],[1,1339,"中有了RDD，为什么还要有Dataframe和DataSet？"]],[1334,1339],[1370,1370]]],[1555938194786,["28447@DESKTOP-BE7HQ26",[[-1,1334,"s"]],[1335,1335],[1334,1334]]],[1555938195127,["28447@DESKTOP-BE7HQ26",[[1,1334,"S"]],[1334,1334],[1335,1335]]],[1555938197202,["28447@DESKTOP-BE7HQ26",[[1,1372,"\n"]],[1370,1370],[1371,1371]]],[1555938199183,["28447@DESKTOP-BE7HQ26",[[1,1371,"R"]],[1371,1371],[1372,1372]]],[1555938199753,["28447@DESKTOP-BE7HQ26",[[-1,1371,"R"]],[1372,1372],[1371,1371]]],[1555938209350,["28447@DESKTOP-BE7HQ26",[[1,1371,"SparkSQL不支持RDD,zh"]],[1371,1371],[1388,1388]]],[1555938209922,["28447@DESKTOP-BE7HQ26",[[-1,1386,"zh"]],[1388,1388],[1386,1386]]],[1555938217137,["28447@DESKTOP-BE7HQ26",[[1,1386,"支持DataframeHe "]],[1386,1386],[1400,1400]]],[1555938217977,["28447@DESKTOP-BE7HQ26",[[-1,1397,"He "]],[1400,1400],[1397,1397]]],[1555938221223,["28447@DESKTOP-BE7HQ26",[[1,1397,"和dataset"]],[1397,1397],[1405,1405]]],[1555938223592,["28447@DESKTOP-BE7HQ26",[[-1,1402,"s"]],[1403,1403],[1402,1402]]],[1555938223884,["28447@DESKTOP-BE7HQ26",[[1,1402,"S"]],[1402,1402],[1403,1403]]],[1555938226890,["28447@DESKTOP-BE7HQ26",[[-1,1392,"f"]],[1393,1393],[1392,1392]]],[1555938227179,["28447@DESKTOP-BE7HQ26",[[1,1392,"F"]],[1392,1392],[1393,1393]]],[1555938374626,["28447@DESKTOP-BE7HQ26",[[1,2201,"\n"]],[2200,2200],[2201,2201]]]],null,"28447@DESKTOP-BE7HQ26"],["f6a35120-0b4b-4602-84a0-1064bff18a5d",1555985770389,"# 面试题整理\n\n\n## Spark篇\n### Spark人物提交流程\n- 1.SparkContext提交作业\n- 2.DAGScheduler拆分stage\n- 3.生成作业\n- 4.提交任务集\n- 5.提交任务\n- 6.执行任务\n- 7.跟踪任务\n\n![任务调度总体诠释]($resource/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg)\n\n### Spark RDD的五大特性\n   - 1. A list of partitions\n   RDD是一个由多个partition（某个节点里的某一片连续的数据）组成的的list；将数据加载为RDD时，一般会遵循数据的本地性（一般一个hdfs里的block会加载为一个partition）\n   - 2. A function for computing each split\n   RDD的每个partition上面都会有function，也就是函数应用，其作用是实现RDD之间partition的转换。\n   - 3. A list of dependencies on other RDDs\n    RDD会记录它的依赖 ，为了容错（重算，cache，checkpoint），也就是说在内存中的RDD操作时出错或丢失会进行重算。\n  - 4. Optionally,a Partitioner for Key-value RDDs\n  可选项，如果RDD里面存的数据是key-value形式，则可以传递一个自定义的Partitioner进行重新分区，例如这里自定义的Partitioner是基于key进行分区，那则会将不同RDD里面的相同key的数据放到同一个partition里面\n  - 5. Optionally, a list of preferred locations to compute each split on\n    **最优的位置**去计算，也就是**数据的本地性**。\n\n### transform和action算子\nTransformation不会立即执行，只是记录这些操作 \naction会执行前边的Transformation所有操作\n\n**transform算子得到新的RDD**\n常见transform算子：map（针对每个元素）、mapPartitions（针对partition）、filter、**flatMap**、union、**distinct**、**groupByKey**、**reduceByKey**、sortByKey、join\n\n**action得到值**\n常见action算子：reduce、count、collect、saveAsTextFile、countByKey、foreach\n\n[常见算子](https://my.oschina.net/134596/blog/3037972)\n[算子操作示例](https://blog.csdn.net/huozi07/article/details/50133259)\n\n### Spark中有了RDD，为什么还要有Dataframe和DataSet？\nSparkSQL不支持RDD,支持DataFrame和dataSet\n\n### Spark读取Kafka的两种方式，两者区别\n- 1.  Receiver-base：实时读取缓存到内存中\n先把数据从kafka中读取出来，然后缓存在内存，再定时处理。如果这时候集群退出，而偏移量又没处理好的话，数据就丢掉了，存在程序失败丢失数据的可能，后在Spark 1.2时引入一个配置参数spark.streaming.receiver.writeAheadLog.enable以规避此风险。\n操作的类： **KafkaUtils.createStream**\nzookeeper维护offset\n- 2.  Direct：定时批量读取\nDirect方式无需Receiver读取数据，而是需要计算时再读取数据，所以Direct方式的数据消费对内存的要求不高，只需要考虑批量计算所需要的内存即可；另外batch任务堆积时，也不会影响数据堆积。\n  操作的类： **KafkaUtils.createDirectStream**\n  程序自己维护offset\n  \n![Kafka结合Streaming的两种方式]($resource/Kafka%E7%BB%93%E5%90%88Streaming%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png)\n\n### Spark性能调优\n* 1. **小分区合并的问题**\n由于程序中过度使用filter算子或者使用不当，都会造成大量的小分区出现。\n**带来的问题就是：任务处理的数据量很小，反复地切换任务所消耗的资源反而会带来很大的系统开销。**\n**解决方案：使用重分区函数coalesce进行数据紧缩、减少分区数并设置shuffle=true保证任务是并行计算的**（或者使用**repartition**重分区，其底层使用的是coalesce并设置Shuffle=true）\n\n* 2. **数据倾斜问题**\n典型的场景是：大量的数据被分配到小部分节点计算，而其他大部分节点却只计算小部分数据。\n\n\n\n\n减少分区数，虽然意味着并行度降低，但是相对比之前的大量小任务过度切换的消耗，却是比较值得的。\n\n这里也可以直接使用repartition重分区函数进行操作，因为其底层使用的是coalesce并设置Shuffle=true\n\n\n* 2. **数据倾斜问题**\n\n## Hadoop篇\n\n### Yarn的认识（简单介绍）\nYarn是hadoop2.X之后出现的Hadoop 资源管理器，它是一个**资源管理系统和调度平台**。\n\nYARN 是一个资源管理、任务调度的框架，主要包含三大模块：ResourceManager（RM）、\nNodeManager（NM）、ApplicationMaster（AM）。\n- ResourceManager 负责所有资源的监控、分配和管理；\n- ApplicationMaster 负责每一个具体应用程序的调度和协调；\n- NodeManager 负责每一个节点的维护。\n对于所有的 applications，RM 拥有绝对的控制权和对资源的分配权。而每个 AM 则会和\nRM 协商资源，同时和 NodeManager 通信来执行和监控 task。\n\n![Yarn架构图]($resource/Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n[参考文章](https://blog.csdn.net/qq_33624952/article/details/79341034)\n\n## Zookeeper篇\n\n### Zookeeper简单介绍\nZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态.\n\n分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n### 为什么zookeeper集群的节点数是奇数个\n首先介绍zookeeper选举的规则：leader选举，要求**可用节点数量 > 总节点数量/2**\n设置奇数个的目的：\n**1、防止由脑裂造成的集群不可用**\n**2、在容错能力相同的情况下，奇数台更节省资源。**\n[zookeeper为什么是奇数个集群 参考文章](https://blog.csdn.net/u010476994/article/details/79806041)\n\n## Hive篇\n\n### Hive是什么\n Hive 是基于 Hadoop 构建的一套数据仓库分析系统，用来进行数据提取转化加载（ETL）（利用mapreduce挖掘hdfs上的数据）\n \n[Hive参考文章](https://blog.csdn.net/francis_lzz/article/details/77720827)\n\n\n",[[1555985757006,["28447@DESKTOP-BE7HQ26",[[1,1407,"\n"]],[1405,1405],[1406,1406]]],[1555985757151,["28447@DESKTOP-BE7HQ26",[[1,1408,"\n"]],[1406,1406],[1407,1407]]],[1555985757998,["28447@DESKTOP-BE7HQ26",[[1,1409,"\n"]],[1407,1407],[1408,1408]]],[1555985769220,["28447@DESKTOP-BE7HQ26",[[1,1408,"### Spark shuffle过程"]],[1408,1408],[1427,1427]]],[1555985778183,["28447@DESKTOP-BE7HQ26",[[1,8,"{】"]],[8,8],[10,10]]],[1555985779062,["28447@DESKTOP-BE7HQ26",[[-1,8,"{】"]],[10,10],[8,8]]],[1555985779986,["28447@DESKTOP-BE7HQ26",[[1,8,"[]"]],[8,8],[10,10]]],[1555985781777,["28447@DESKTOP-BE7HQ26",[[1,9,"toc"]],[9,9],[12,12]]],[1555985794095,[null,[[1,1434,"\n"]],[1434,1434],[1435,1435]]],[1555985794095,[null,[[-1,1434,"\n"]],[1435,1435],[1434,1434]]],[1555985791015,["28447@DESKTOP-BE7HQ26",[[1,8,"\n"]],[7,7],[8,8]]],[1555985791598,["28447@DESKTOP-BE7HQ26",[[1,9,"\n"]],[8,8],[9,9]]],[1555985791878,["28447@DESKTOP-BE7HQ26",[[1,10,"\n"]],[9,9],[10,10]]],[1555985792494,["28447@DESKTOP-BE7HQ26",[[-1,10,"\n"]],[10,10],[9,9]]],[1555985792759,["28447@DESKTOP-BE7HQ26",[[-1,9,"\n"]],[9,9],[8,8]]],[1555985792950,["28447@DESKTOP-BE7HQ26",[[-1,8,"\n"]],[8,8],[7,7]]],[1555985879490,[null,[[1,1434,"\n"]],[1434,1434],[1435,1435]]],[1555985879490,[null,[[-1,1434,"\n"]],[1435,1435],[1434,1434]]],[1555985863066,["28447@DESKTOP-BE7HQ26",[[1,2290,"[]"]],[2290,2290],[2292,2292]]],[1555985867217,["28447@DESKTOP-BE7HQ26",[[1,2291,"Spark行呢个"]],[2291,2291],[2299,2299]]],[1555985868615,["28447@DESKTOP-BE7HQ26",[[-1,2296,"行呢个"]],[2299,2299],[2296,2296]]],[1555985872614,["28447@DESKTOP-BE7HQ26",[[1,2296,"性能体哦啊有"]],[2296,2296],[2302,2302]]],[1555985873512,["28447@DESKTOP-BE7HQ26",[[-1,2298,"体哦啊有"]],[2302,2302],[2298,2298]]],[1555985877146,["28447@DESKTOP-BE7HQ26",[[1,2298,"调优"]],[2298,2298],[2300,2300]]],[1555985878532,["28447@DESKTOP-BE7HQ26",[[1,2301,"("]],[2301,2301],[2302,2302]]],[1555985878577,["28447@DESKTOP-BE7HQ26",[[1,2302,"https://)"]],[2302,2302],[2302,2310]]],[1555985878980,["28447@DESKTOP-BE7HQ26",[[1,2310,"www.cnblogs.com/jchubby/p/5449373.html"]],[2302,2310],[2348,2348]]],[1555986059581,[null,[[1,1434,"\n"],[-1,2289,"\n"],[1,2349,"\n"]],[1434,1434],[2350,2350]]],[1555986059581,[null,[[-1,1434,"\n"],[1,2290,"\n"],[-1,2349,"\n"]],[2350,2350],[1434,1434]]],[1555986035078,["28447@DESKTOP-BE7HQ26",[[1,1435,"\n"]],[1432,1432],[1433,1433]]],[1555986038391,["28447@DESKTOP-BE7HQ26",[[1,1433,"shufl"]],[1433,1433],[1438,1438]]],[1555986038838,["28447@DESKTOP-BE7HQ26",[[-1,1437,"l"]],[1438,1438],[1437,1437]]],[1555986040591,["28447@DESKTOP-BE7HQ26",[[1,1437,"flefa"]],[1437,1437],[1442,1442]]],[1555986041319,["28447@DESKTOP-BE7HQ26",[[-1,1440,"fa"]],[1442,1442],[1440,1440]]],[1555986058720,["28447@DESKTOP-BE7HQ26",[[1,1440,"发生在两个stage之间，"]],[1440,1440],[1453,1453]]],[1555986597812,[null,[[1,1454,"\n\n"],[-1,1455,"\n"],[-1,2310,"\n"],[1,2370,"\n"]],[1454,1454],[2371,2371]]],[1555986597812,[null,[[-1,1454,"\n\n"],[1,1457,"\n"],[1,2311,"\n"],[-1,2370,"\n"]],[2371,2371],[1454,1454]]],[1555986576716,["28447@DESKTOP-BE7HQ26",[[1,1456,"\n"]],[1453,1453],[1454,1454]]],[1555986577627,["28447@DESKTOP-BE7HQ26",[[1,1457,"\n"]],[1454,1454],[1455,1455]]],[1555986578221,["28447@DESKTOP-BE7HQ26",[[1,1455,"[]"]],[1455,1455],[1457,1457]]],[1555986581110,["28447@DESKTOP-BE7HQ26",[[1,1456,"参"]],[1456,1456],[1457,1457]]],[1555986581339,["28447@DESKTOP-BE7HQ26",[[-1,1456,"参"]],[1457,1457],[1456,1456]]],[1555986588964,["28447@DESKTOP-BE7HQ26",[[1,1456,"shuffle参考文章"]],[1456,1456],[1467,1467]]],[1555986590504,["28447@DESKTOP-BE7HQ26",[[1,1468,"（https://blog.csdn.net/quitozang/article/details/80904040"]],[1468,1468],[1525,1525]]],[1555986595915,["28447@DESKTOP-BE7HQ26",[[-1,1468,"（https://blog.csdn.net/quitozang/article/details/80904040"]],[1525,1525],[1468,1468]]],[1555986596823,["28447@DESKTOP-BE7HQ26",[[1,1468,"("]],[1468,1468],[1469,1469]]],[1555986596854,["28447@DESKTOP-BE7HQ26",[[1,1469,"https://)"]],[1469,1469],[1469,1477]]],[1555986597229,["28447@DESKTOP-BE7HQ26",[[1,1477,"blog.csdn.net/quitozang/article/details/80904040"]],[1469,1477],[1525,1525]]],[1555986657814,[null,[[-1,1454,"#"],[1,1455,"\n"],[1,1529,"#"],[-1,2383,"\n"],[1,2443,"\n"]],[1454,1454],[2444,2444]]],[1555986657814,[null,[[1,1454,"#"],[-1,1454,"\n"],[-1,1529,"#"],[1,2384,"\n"],[-1,2443,"\n"]],[2444,2444],[1454,1454]]],[1555986599611,["28447@DESKTOP-BE7HQ26",[[1,1455,"\n"]],[1454,1454],[1455,1455]]],[1555986604044,["28447@DESKTOP-BE7HQ26",[[1,1454,"shuffle发审会给的"]],[1454,1454],[1466,1466]]],[1555986605197,["28447@DESKTOP-BE7HQ26",[[-1,1461,"发审会给的"]],[1466,1466],[1461,1461]]],[1555986607361,["28447@DESKTOP-BE7HQ26",[[1,1461,"发生的"]],[1461,1461],[1464,1464]]],[1555986613973,["28447@DESKTOP-BE7HQ26",[[-1,1461,"发生的"]],[1464,1464],[1461,1461]]],[1555986617018,["28447@DESKTOP-BE7HQ26",[[1,1461,"中国的"]],[1461,1461],[1464,1464]]],[1555986617612,["28447@DESKTOP-BE7HQ26",[[-1,1462,"国的"]],[1464,1464],[1462,1462]]],[1555986631078,["28447@DESKTOP-BE7HQ26",[[1,1462,"的概念：shueele"]],[1462,1462],[1473,1473]]],[1555986631924,["28447@DESKTOP-BE7HQ26",[[-1,1470,"ele"]],[1473,1473],[1470,1470]]],[1555986632396,["28447@DESKTOP-BE7HQ26",[[1,1470,"f"]],[1470,1470],[1471,1471]]],[1555986633260,["28447@DESKTOP-BE7HQ26",[[-1,1470,"f"]],[1471,1471],[1470,1470]]],[1555986633559,["28447@DESKTOP-BE7HQ26",[[1,1470,"f"]],[1470,1470],[1471,1471]]],[1555986634123,["28447@DESKTOP-BE7HQ26",[[-1,1469,"ef"]],[1471,1471],[1469,1469]]],[1555986634745,["28447@DESKTOP-BE7HQ26",[[1,1469,"fll"]],[1469,1469],[1472,1472]]],[1555986635413,["28447@DESKTOP-BE7HQ26",[[-1,1470,"ll"]],[1472,1472],[1470,1470]]],[1555986636015,["28447@DESKTOP-BE7HQ26",[[1,1470,"fll"]],[1470,1470],[1473,1473]]],[1555986636418,["28447@DESKTOP-BE7HQ26",[[-1,1472,"l"]],[1473,1473],[1472,1472]]],[1555986647935,["28447@DESKTOP-BE7HQ26",[[1,1472,"eMapTask 和 ResuleTask"]],[1472,1472],[1493,1493]]],[1555987857853,[null,[[-1,1493,"#"],[1,1494,"\n"],[1,1569,"#"],[-1,2423,"\n"],[1,2483,"\n"]],[1493,1493],[2484,2484]]],[1555987857853,[null,[[1,1493,"#"],[-1,1493,"\n"],[-1,1569,"#"],[1,2424,"\n"],[-1,2483,"\n"]],[2484,2484],[1493,1493]]],[1555987837458,["28447@DESKTOP-BE7HQ26",[[-1,1488,"e"]],[1489,1489],[1488,1488]]],[1555987837870,["28447@DESKTOP-BE7HQ26",[[1,1488,"t"]],[1488,1488],[1489,1489]]],[1555987977839,[null,[[-1,1493,"#"],[1,1494,"\n"],[1,1569,"#"],[-1,2423,"\n"],[1,2483,"\n"]],[1493,1493],[2484,2484]]],[1555987977839,[null,[[1,1493,"#"],[-1,1493,"\n"],[-1,1569,"#"],[1,2424,"\n"],[-1,2483,"\n"]],[2484,2484],[1493,1493]]],[1555987937930,["28447@DESKTOP-BE7HQ26",[[1,1495,"\n"]],[1493,1493],[1494,1494]]],[1555987943669,["28447@DESKTOP-BE7HQ26",[[1,1494,"两种范式："]],[1494,1494],[1499,1499]]],[1555987945835,["28447@DESKTOP-BE7HQ26",[[-1,1496,"范式"]],[1498,1498],[1496,1496]]],[1555987947347,["28447@DESKTOP-BE7HQ26",[[1,1496,"方式"]],[1496,1496],[1498,1498]]],[1555987959440,["28447@DESKTOP-BE7HQ26",[[1,1499,"# SortShuffleManager"]],[1499,1499],[1519,1519]]],[1555987961138,["28447@DESKTOP-BE7HQ26",[[-1,1499,"#"]],[1500,1500],[1499,1499]]],[1555987971667,["28447@DESKTOP-BE7HQ26",[[1,1499,"# HashShuffleManagerhe"]],[1499,1499],[1521,1521]]],[1555987972233,["28447@DESKTOP-BE7HQ26",[[-1,1519,"he"]],[1521,1521],[1519,1519]]],[1555987973240,["28447@DESKTOP-BE7HQ26",[[1,1519,"和"]],[1519,1519],[1520,1520]]],[1555987977705,["28447@DESKTOP-BE7HQ26",[[-1,1499,"# HashShuffleManager"]],[1501,1519],[1499,1499]]],[1555987988399,[null,[[-1,1493,"#"],[1,1494,"\n"],[1,1595,"#"],[-1,2449,"\n"],[1,2509,"\n"]],[1493,1493],[2510,2510]]],[1555987988399,[null,[[1,1493,"#"],[-1,1493,"\n"],[-1,1595,"#"],[1,2450,"\n"],[-1,2509,"\n"]],[2510,2510],[1493,1493]]],[1555987979395,["28447@DESKTOP-BE7HQ26",[[1,1499,"****"]],[1499,1499],[1501,1501]]],[1555987980011,["28447@DESKTOP-BE7HQ26",[[1,1501,"HashShuffleManager"]],[1501,1501],[1519,1519]]],[1555987985971,["28447@DESKTOP-BE7HQ26",[[-1,1523,"SortShuffleManager"]],[1523,1541],[1523,1523]]],[1555987987324,["28447@DESKTOP-BE7HQ26",[[1,1523,"****"]],[1523,1523],[1525,1525]]],[1555987987649,["28447@DESKTOP-BE7HQ26",[[1,1525,"SortShuffleManager"]],[1525,1525],[1543,1543]]],[1555989608454,[null,[[-1,1493,"#"],[1,1494,"\n"],[1,1621,"#"],[-1,2475,"\n"],[1,2535,"\n"]],[1493,1493],[2536,2536]]],[1555989608454,[null,[[1,1493,"#"],[-1,1493,"\n"],[-1,1621,"#"],[1,2476,"\n"],[-1,2535,"\n"]],[2536,2536],[1493,1493]]],[1555989596191,["28447@DESKTOP-BE7HQ26",[[1,1547,"\n"]],[1545,1545],[1546,1546]]],[1555989598080,["28447@DESKTOP-BE7HQ26",[[1,1546,"HashShuffleManagerfen"]],[1546,1546],[1567,1567]]],[1555989598808,["28447@DESKTOP-BE7HQ26",[[-1,1564,"fen"]],[1567,1567],[1564,1564]]],[1555989607236,["28447@DESKTOP-BE7HQ26",[[1,1564,"分为改进之前和改进"]],[1564,1564],[1573,1573]]],[1555989668457,[null,[[-1,1493,"#"],[1,1494,"\n"],[1,1649,"#"],[-1,2503,"\n"],[1,2563,"\n"]],[1493,1493],[2564,2564]]],[1555989668457,[null,[[1,1493,"#"],[-1,1493,"\n"],[-1,1649,"#"],[1,2504,"\n"],[-1,2563,"\n"]],[2564,2564],[1493,1493]]],[1555989644570,["28447@DESKTOP-BE7HQ26",[[1,1573,"之后，改经前文件数task1*task2"]],[1573,1573],[1593,1593]]],[1555989645263,["28447@DESKTOP-BE7HQ26",[[1,1595,"\n"]],[1593,1593],[1594,1594]]],[1555989657697,["28447@DESKTOP-BE7HQ26",[[1,1594,"改进之后文件数excu"]],[1594,1594],[1605,1605]]],[1555989659470,["28447@DESKTOP-BE7HQ26",[[-1,1601,"excu"]],[1605,1605],[1601,1601]]],[1555989666934,["28447@DESKTOP-BE7HQ26",[[1,1601,"core数*task2"]],[1601,1601],[1612,1612]]],[1555989728463,[null,[[-1,1493,"#"],[1,1494,"\n"],[1,1688,"#"],[-1,2542,"\n"],[1,2602,"\n"]],[1493,1493],[2603,2603]]],[1555989728463,[null,[[1,1493,"#"],[-1,1493,"\n"],[-1,1688,"#"],[1,2543,"\n"],[-1,2602,"\n"]],[2603,2603],[1493,1493]]],[1555989669007,["28447@DESKTOP-BE7HQ26",[[1,1614,"\n"]],[1612,1612],[1613,1613]]],[1555989673981,["28447@DESKTOP-BE7HQ26",[[1,1613,"sortshuffle"]],[1613,1613],[1624,1624]]],[1555989728208,["28447@DESKTOP-BE7HQ26",[[-1,1613,"sorts"],[1,1618,"SortS"],[1,1624,"Managerwe"]],[1613,1624],[1633,1633]]],[1555989788461,[null,[[-1,1493,"#"],[1,1494,"\n"],[1,1709,"#"],[-1,2563,"\n"],[1,2623,"\n"]],[1493,1493],[2624,2624]]],[1555989788461,[null,[[1,1493,"#"],[-1,1493,"\n"],[-1,1709,"#"],[1,2564,"\n"],[-1,2623,"\n"]],[2624,2624],[1493,1493]]],[1555989728855,["28447@DESKTOP-BE7HQ26",[[-1,1631,"we"]],[1633,1633],[1631,1631]]],[1555989731714,["28447@DESKTOP-BE7HQ26",[[1,1631,"文件数：上游stage的task数量"]],[1631,1631],[1649,1649]]],[1555991190282,[null,[[-1,1493,"#"],[1,1494,"\n"],[1,1725,"#"],[-1,2579,"\n"],[1,2639,"\n"]],[1493,1493],[2640,2640]]],[1555991190283,[null,[[1,1493,"#"],[-1,1493,"\n"],[-1,1725,"#"],[1,2580,"\n"],[-1,2639,"\n"]],[2640,2640],[1493,1493]]],[1555991177276,["28447@DESKTOP-BE7HQ26",[[1,15,"\n"]],[13,13],[14,14]]],[1555991177444,["28447@DESKTOP-BE7HQ26",[[1,16,"\n"]],[14,14],[15,15]]],[1555991177778,["28447@DESKTOP-BE7HQ26",[[1,15,"<!-- GFM-TOC -->\n* [一、消息模型](#一消息模型)\n    * [点对点](#点对点)\n    * [发布/订阅](#发布订阅)\n* [二、使用场景](#二使用场景)\n    * [异步处理](#异步处理)\n    * [流量削锋](#流量削锋)\n    * [应用解耦](#应用解耦)\n* [三、可靠性](#三可靠性)\n    * [发送端的可靠性](#发送端的可靠性)\n    * [接收端的可靠性](#接收端的可靠性)\n* [参考资料](#参考资料)\n<!-- GFM-TOC -->"]],[15,15],[270,270]]],[1555991250284,[null,[[-1,1750,"#"],[1,1751,"\n"],[1,1982,"#"],[-1,2836,"\n"],[1,2896,"\n"]],[1750,1750],[2897,2897]]],[1555991250284,[null,[[1,1750,"#"],[-1,1750,"\n"],[-1,1982,"#"],[1,2837,"\n"],[-1,2896,"\n"]],[2897,2897],[1750,1750]]],[1555991194147,["28447@DESKTOP-BE7HQ26",[[-1,44,"一消息模型"]],[49,49],[44,44]]],[1555991198619,["28447@DESKTOP-BE7HQ26",[[1,44,"Sparkp"]],[44,44],[50,50]]],[1555991199170,["28447@DESKTOP-BE7HQ26",[[-1,49,"p"]],[50,50],[49,49]]],[1555991200666,["28447@DESKTOP-BE7HQ26",[[1,49,"篇"]],[49,49],[50,50]]],[1555991204879,["28447@DESKTOP-BE7HQ26",[[-1,37,"消息模型"],[1,41,"S"]],[37,41],[37,38]]],[1555991206622,["28447@DESKTOP-BE7HQ26",[[1,38,"parkpi"]],[37,37],[44,44]]],[1555991207514,["28447@DESKTOP-BE7HQ26",[[-1,42,"pi"]],[44,44],[42,42]]],[1555991208959,["28447@DESKTOP-BE7HQ26",[[1,42,"篇"]],[42,42],[43,43]]],[1555991215251,["28447@DESKTOP-BE7HQ26",[[-1,61,"点对点"],[1,64,"Spark人物提交流程"]],[61,64],[72,72]]],[1555991221540,["28447@DESKTOP-BE7HQ26",[[-1,75,"点"]],[75,76],[75,75]]],[1555991223548,["28447@DESKTOP-BE7HQ26",[[-1,75,"对点"],[1,77,"Spark人物提交流程"]],[75,77],[86,86]]],[1555991232466,["28447@DESKTOP-BE7HQ26",[[-1,310,"人物"]],[312,312],[310,310]]],[1555991233357,["28447@DESKTOP-BE7HQ26",[[1,310,"ren"]],[310,310],[313,313]]],[1555991234082,["28447@DESKTOP-BE7HQ26",[[-1,310,"ren"]],[313,313],[310,310]]],[1555991236320,["28447@DESKTOP-BE7HQ26",[[1,310,"任务"]],[310,310],[312,312]]],[1555991310277,[null,[[-1,1769,"#"],[1,1770,"\n"],[1,2001,"#"],[-1,2855,"\n"],[1,2915,"\n"]],[1769,1769],[2916,2916]]],[1555991310277,[null,[[1,1769,"#"],[-1,1769,"\n"],[-1,2001,"#"],[1,2856,"\n"],[-1,2915,"\n"]],[2916,2916],[1769,1769]]],[1555991286678,["28447@DESKTOP-BE7HQ26",[[1,75,"#￥"]],[75,75],[77,77]]],[1555991288059,["28447@DESKTOP-BE7HQ26",[[-1,76,"￥"]],[77,77],[76,76]]],[1555991288495,["28447@DESKTOP-BE7HQ26",[[1,76,"￥"]],[76,76],[77,77]]],[1555991289355,["28447@DESKTOP-BE7HQ26",[[-1,76,"￥"]],[77,77],[76,76]]],[1555991290217,["28447@DESKTOP-BE7HQ26",[[1,76,"#"]],[76,76],[77,77]]],[1555991291902,["28447@DESKTOP-BE7HQ26",[[1,46,"#"]],[46,46],[47,47]]],[1555991370278,[null,[[-1,1772,"#"],[1,1773,"\n"],[1,2004,"#"],[-1,2858,"\n"],[1,2918,"\n"]],[1772,1772],[2919,2919]]],[1555991370278,[null,[[1,1772,"#"],[-1,1772,"\n"],[-1,2004,"#"],[1,2859,"\n"],[-1,2918,"\n"]],[2919,2919],[1772,1772]]],[1555991354124,["28447@DESKTOP-BE7HQ26",[[-1,76,"##"]],[78,78],[76,76]]],[1555991430282,[null,[[-1,1770,"#"],[1,1771,"\n"],[1,2002,"#"],[-1,2856,"\n"],[1,2916,"\n"]],[1770,1770],[2917,2917]]],[1555991430282,[null,[[1,1770,"#"],[-1,1770,"\n"],[-1,2002,"#"],[1,2857,"\n"],[-1,2916,"\n"]],[2917,2917],[1770,1770]]],[1555991375971,["28447@DESKTOP-BE7HQ26",[[-1,81,"人物"]],[83,83],[81,81]]],[1555991377402,["28447@DESKTOP-BE7HQ26",[[1,81,"任务"]],[81,81],[83,83]]],[1555991379884,["28447@DESKTOP-BE7HQ26",[[-1,67,"人物"]],[69,69],[67,67]]],[1555991380922,["28447@DESKTOP-BE7HQ26",[[1,67,"任务"]],[67,67],[69,69]]],[1555991388188,["28447@DESKTOP-BE7HQ26",[[-1,104,"发布订阅"],[1,108,"Spark RDD的五大特性"]],[104,108],[118,118]]],[1555991389805,["28447@DESKTOP-BE7HQ26",[[-1,96,"发布/订阅"],[1,101,"Spark RDD的五大特性"]],[96,101],[110,110]]],[1555991395211,["28447@DESKTOP-BE7HQ26",[[-1,129,"* [二、使用场景](#二使用场景)\n    * [异步处理](#异步处理)\n    * [流量削锋](#流量削锋)\n    * [应用解耦](#应用解耦)\n* [三、可靠性](#三可靠性)\n    * [发送端的可靠性](#发送端的可靠性)\n    * [接收端的可靠性](#接收端的可靠性)\n* [参考资料](#参考资料)"]],[129,292],[129,129]]],[1555991406516,["28447@DESKTOP-BE7HQ26",[[-1,1027,"t"]],[1028,1028],[1027,1027]]],[1555991407096,["28447@DESKTOP-BE7HQ26",[[1,1027,"T"]],[1027,1027],[1028,1028]]],[1555991422434,["28447@DESKTOP-BE7HQ26",[[1,1038,"A"]],[1038,1038],[1039,1039]]],[1555991424820,["28447@DESKTOP-BE7HQ26",[[-1,1037,"a"]],[1038,1038],[1037,1037]]],[1555991430132,["28447@DESKTOP-BE7HQ26",[[1,129,"      "]],[129,129],[135,135]]],[1555991490291,[null,[[-1,1632,"#"],[1,1633,"\n"],[1,1864,"#"],[-1,2718,"\n"],[1,2778,"\n"]],[1632,1632],[2779,2779]]],[1555991490291,[null,[[1,1632,"#"],[-1,1632,"\n"],[-1,1864,"#"],[1,2719,"\n"],[-1,2778,"\n"]],[2779,2779],[1632,1632]]],[1555991431791,["28447@DESKTOP-BE7HQ26",[[1,135,"* "]],[135,135],[137,137]]],[1555991433611,["28447@DESKTOP-BE7HQ26",[[-1,134," * "]],[137,137],[134,134]]],[1555991435070,["28447@DESKTOP-BE7HQ26",[[1,134,"* "]],[134,134],[136,136]]],[1555991436891,["28447@DESKTOP-BE7HQ26",[[-1,133," "]],[134,134],[133,133]]],[1555991438302,["28447@DESKTOP-BE7HQ26",[[1,135," "]],[134,134],[135,135]]],[1555991439415,["28447@DESKTOP-BE7HQ26",[[1,135,"[]"]],[135,135],[137,137]]],[1555991440372,["28447@DESKTOP-BE7HQ26",[[1,136,"Transform和Action算子"]],[136,136],[154,154]]],[1555991442190,["28447@DESKTOP-BE7HQ26",[[1,155,"("]],[155,155],[156,156]]],[1555991442226,["28447@DESKTOP-BE7HQ26",[[1,156,"https://)"]],[156,156],[156,164]]],[1555991444332,["28447@DESKTOP-BE7HQ26",[[-1,156,"https://"],[1,164,"#"]],[156,164],[157,157]]],[1555991445014,["28447@DESKTOP-BE7HQ26",[[1,157,"Transform和Action算子"]],[157,157],[175,175]]],[1555991446932,["28447@DESKTOP-BE7HQ26",[[1,178,"    * \n"]],[177,177],[184,184]]],[1555991460198,["28447@DESKTOP-BE7HQ26",[[1,184,"【】"]],[184,184],[186,186]]],[1555991460853,["28447@DESKTOP-BE7HQ26",[[-1,184,"【】"]],[186,186],[184,184]]],[1555991461686,["28447@DESKTOP-BE7HQ26",[[1,184,"[]"]],[184,184],[186,186]]],[1555991462299,["28447@DESKTOP-BE7HQ26",[[1,185,"Spark中有了RDD，为什么还要有Dataframe和DataSet？"]],[185,185],[221,221]]],[1555991463923,["28447@DESKTOP-BE7HQ26",[[-1,220,"？"]],[221,221],[220,220]]],[1555991465649,["28447@DESKTOP-BE7HQ26",[[1,221,"（*"]],[221,221],[223,223]]],[1555991466494,["28447@DESKTOP-BE7HQ26",[[-1,221,"（*"]],[223,223],[221,221]]],[1555991467249,["28447@DESKTOP-BE7HQ26",[[1,221,"("]],[221,221],[222,222]]],[1555991467296,["28447@DESKTOP-BE7HQ26",[[1,222,"https://)"]],[222,222],[222,230]]],[1555991467786,["28447@DESKTOP-BE7HQ26",[[-1,222,"https://"],[1,230,"Spark中有了RDD，为什么还要有Dataframe和DataSet？"]],[222,230],[258,258]]],[1555991469603,["28447@DESKTOP-BE7HQ26",[[1,260,"    * \n"]],[259,259],[266,266]]],[1555991478123,["28447@DESKTOP-BE7HQ26",[[1,266,"【"]],[266,266],[267,267]]],[1555991478758,["28447@DESKTOP-BE7HQ26",[[-1,266,"【"]],[267,267],[266,266]]],[1555991479588,["28447@DESKTOP-BE7HQ26",[[1,266,"[]"]],[266,266],[268,268]]],[1555991480198,["28447@DESKTOP-BE7HQ26",[[1,267,"Spark shuffle过程"]],[267,267],[282,282]]],[1555991481479,["28447@DESKTOP-BE7HQ26",[[1,283,"（"]],[283,283],[284,284]]],[1555991482500,["28447@DESKTOP-BE7HQ26",[[-1,283,"（"]],[284,284],[283,283]]],[1555991482966,["28447@DESKTOP-BE7HQ26",[[1,283,"("]],[283,283],[284,284]]],[1555991483002,["28447@DESKTOP-BE7HQ26",[[1,284,"https://)"]],[284,284],[284,292]]],[1555991484628,["28447@DESKTOP-BE7HQ26",[[-1,284,"https://"],[1,292,"#"]],[284,292],[285,285]]],[1555991485284,["28447@DESKTOP-BE7HQ26",[[1,285,"Spark shuffle过程"]],[285,285],[300,300]]],[1555991509892,[null,[[-1,1798,"#"],[1,1799,"\n"],[1,2030,"#"],[-1,2884,"\n"],[1,2944,"\n"]],[1798,1798],[2945,2945]]],[1555991509892,[null,[[1,1798,"#"],[-1,1798,"\n"],[-1,2030,"#"],[1,2885,"\n"],[-1,2944,"\n"]],[2945,2945],[1798,1798]]],[1555991497875,["28447@DESKTOP-BE7HQ26",[[1,302,"    * \n"]],[301,301],[308,308]]],[1555991499285,["28447@DESKTOP-BE7HQ26",[[1,308,"【"]],[308,308],[309,309]]],[1555991499852,["28447@DESKTOP-BE7HQ26",[[-1,308,"【"]],[309,309],[308,308]]],[1555991500404,["28447@DESKTOP-BE7HQ26",[[1,308,"[]"]],[308,308],[310,310]]],[1555991501092,["28447@DESKTOP-BE7HQ26",[[1,309,"Spark读取Kafka的两种方式，两者区别"]],[309,309],[331,331]]],[1555991502385,["28447@DESKTOP-BE7HQ26",[[1,332,"（"]],[332,332],[333,333]]],[1555991503229,["28447@DESKTOP-BE7HQ26",[[-1,332,"（"]],[333,333],[332,332]]],[1555991504465,["28447@DESKTOP-BE7HQ26",[[1,332,"（）"]],[332,332],[334,334]]],[1555991505003,["28447@DESKTOP-BE7HQ26",[[-1,332,"（）"]],[334,334],[332,332]]],[1555991505725,["28447@DESKTOP-BE7HQ26",[[1,332,"("]],[332,332],[333,333]]],[1555991505760,["28447@DESKTOP-BE7HQ26",[[1,333,"https://)"]],[333,333],[333,341]]],[1555991507284,["28447@DESKTOP-BE7HQ26",[[-1,333,"https://"],[1,341,"#"]],[333,341],[334,334]]],[1555991508063,["28447@DESKTOP-BE7HQ26",[[1,334,"Spark读取Kafka的两种方式，两者区别"]],[334,334],[356,356]]],[1555991534227,[null,[[-1,1854,"#"],[1,1855,"\n"],[1,2086,"#"],[-1,2940,"\n"],[1,3000,"\n"]],[1854,1854],[3001,3001]]],[1555991534227,[null,[[1,1854,"#"],[-1,1854,"\n"],[-1,2086,"#"],[1,2941,"\n"],[-1,3000,"\n"]],[3001,3001],[1854,1854]]],[1555991520153,["28447@DESKTOP-BE7HQ26",[[1,222,"#"]],[222,222],[223,223]]],[1555994057286,[null,[[-1,1855,"#"],[1,1856,"\n"],[1,2087,"#"],[-1,2941,"\n"],[1,3001,"\n"]],[1855,1855],[3002,3002]]],[1555994057286,[null,[[1,1855,"#"],[-1,1855,"\n"],[-1,2087,"#"],[1,2942,"\n"],[-1,3001,"\n"]],[3002,3002],[1855,1855]]],[1555994024894,["28447@DESKTOP-BE7HQ26",[[1,359,"    * \n"]],[358,358],[365,365]]],[1555994041101,["28447@DESKTOP-BE7HQ26",[[1,365,"【】"]],[365,365],[367,367]]],[1555994041766,["28447@DESKTOP-BE7HQ26",[[-1,365,"【】"]],[367,367],[365,365]]],[1555994042572,["28447@DESKTOP-BE7HQ26",[[1,365,"[]"]],[365,365],[367,367]]],[1555994045827,["28447@DESKTOP-BE7HQ26",[[1,366,"Spark行呢个"]],[366,366],[374,374]]],[1555994047218,["28447@DESKTOP-BE7HQ26",[[-1,371,"行呢个"]],[374,374],[371,371]]],[1555994051172,["28447@DESKTOP-BE7HQ26",[[1,371,"性能体哦啊有"]],[371,371],[377,377]]],[1555994052009,["28447@DESKTOP-BE7HQ26",[[-1,373,"体哦啊有"]],[377,377],[373,373]]],[1555994054540,["28447@DESKTOP-BE7HQ26",[[1,373,"调优"]],[373,373],[375,375]]],[1555994055622,["28447@DESKTOP-BE7HQ26",[[1,376,"("]],[376,376],[377,377]]],[1555994055656,["28447@DESKTOP-BE7HQ26",[[1,377,"https://)"]],[377,377],[377,385]]],[1555994117288,[null,[[-1,1883,"#"],[1,1884,"\n"],[1,2115,"#"],[-1,2969,"\n"],[1,3029,"\n"]],[1883,1883],[3030,3030]]],[1555994117288,[null,[[1,1883,"#"],[-1,1883,"\n"],[-1,2115,"#"],[1,2970,"\n"],[-1,3029,"\n"]],[3030,3030],[1883,1883]]],[1555994057971,["28447@DESKTOP-BE7HQ26",[[-1,377,"https://"],[1,385,"#"]],[377,385],[378,378]]],[1555994058384,["28447@DESKTOP-BE7HQ26",[[1,378," "]],[378,378],[379,379]]],[1555994061668,["28447@DESKTOP-BE7HQ26",[[1,378,"Spark性能调优"]],[378,378],[387,387]]],[1555994063431,["28447@DESKTOP-BE7HQ26",[[-1,387," "]],[388,388],[387,387]]],[1555994078253,["28447@DESKTOP-BE7HQ26",[[1,389,"    * \n"]],[388,388],[395,395]]],[1555994078893,["28447@DESKTOP-BE7HQ26",[[-1,394," "]],[395,395],[394,394]]],[1555994082461,["28447@DESKTOP-BE7HQ26",[[-1,390,"   "]],[393,393],[390,390]]],[1555994085118,["28447@DESKTOP-BE7HQ26",[[1,391,"【】"]],[391,391],[393,393]]],[1555994085814,["28447@DESKTOP-BE7HQ26",[[-1,391,"【】"]],[393,393],[391,391]]],[1555994086420,["28447@DESKTOP-BE7HQ26",[[1,391,"[]"]],[391,391],[393,393]]],[1555994089848,["28447@DESKTOP-BE7HQ26",[[1,392,"二、Hadoop篇"]],[392,392],[401,401]]],[1555994092362,["28447@DESKTOP-BE7HQ26",[[1,402,"("]],[402,402],[403,403]]],[1555994092398,["28447@DESKTOP-BE7HQ26",[[1,403,"https://)"]],[403,403],[403,411]]],[1555994094369,["28447@DESKTOP-BE7HQ26",[[-1,403,"https://"],[1,411,"#"]],[403,411],[404,404]]],[1555994099609,["28447@DESKTOP-BE7HQ26",[[1,404,"Hadoop篇"]],[404,404],[411,411]]],[1555994113778,["28447@DESKTOP-BE7HQ26",[[-1,46,"#"]],[47,47],[46,46]]],[1555994177284,[null,[[-1,1908,"#"],[1,1909,"\n"],[1,2140,"#"],[-1,2994,"\n"],[1,3054,"\n"]],[1908,1908],[3055,3055]]],[1555994177284,[null,[[1,1908,"#"],[-1,1908,"\n"],[-1,2140,"#"],[1,2995,"\n"],[-1,3054,"\n"]],[3055,3055],[1908,1908]]],[1555994138670,["28447@DESKTOP-BE7HQ26",[[1,412," \n"]],[411,411],[413,413]]],[1555994140151,["28447@DESKTOP-BE7HQ26",[[1,390," "]],[390,390],[391,391]]],[1555994145224,["28447@DESKTOP-BE7HQ26",[[1,414,"    * 【】"]],[414,414],[422,422]]],[1555994145822,["28447@DESKTOP-BE7HQ26",[[-1,420,"【】"]],[422,422],[420,420]]],[1555994148834,["28447@DESKTOP-BE7HQ26",[[1,420,"[]("]],[420,420],[423,423]]],[1555994148881,["28447@DESKTOP-BE7HQ26",[[1,423,"https://)"]],[423,423],[423,431]]],[1555994149437,["28447@DESKTOP-BE7HQ26",[[-1,423,"https://"],[1,431,"Yarn的认识（简单介绍）"]],[423,431],[436,436]]],[1555994153095,["28447@DESKTOP-BE7HQ26",[[1,423,"#"]],[423,423],[424,424]]],[1555994158956,["28447@DESKTOP-BE7HQ26",[[1,421,"Yarnde"]],[421,421],[427,427]]],[1555994159402,["28447@DESKTOP-BE7HQ26",[[-1,425,"de"]],[427,427],[425,425]]],[1555994161458,["28447@DESKTOP-BE7HQ26",[[1,425,"的认识"]],[425,425],[428,428]]],[1555994163973,["28447@DESKTOP-BE7HQ26",[[1,446,"     * \n"]],[445,445],[453,453]]],[1555994167664,["28447@DESKTOP-BE7HQ26",[[-1,447,"    "]],[451,451],[447,447]]],[1555994169256,["28447@DESKTOP-BE7HQ26",[[1,449,"【】"]],[449,449],[451,451]]],[1555994169887,["28447@DESKTOP-BE7HQ26",[[-1,449,"【】"]],[451,451],[449,449]]],[1555994170773,["28447@DESKTOP-BE7HQ26",[[1,449,"[]"]],[449,449],[451,451]]],[1555994173743,["28447@DESKTOP-BE7HQ26",[[1,450,"三、"]],[450,450],[452,452]]],[1555994237284,[null,[[-1,1950,"#"],[1,1951,"\n"],[1,2182,"#"],[-1,3036,"\n"],[1,3096,"\n"]],[1950,1950],[3097,3097]]],[1555994237284,[null,[[1,1950,"#"],[-1,1950,"\n"],[-1,2182,"#"],[1,3037,"\n"],[-1,3096,"\n"]],[3097,3097],[1950,1950]]],[1555994187743,["28447@DESKTOP-BE7HQ26",[[1,452,"Zookeeper篇"]],[452,452],[462,462]]],[1555994189573,["28447@DESKTOP-BE7HQ26",[[1,463,"（）"]],[463,463],[465,465]]],[1555994190303,["28447@DESKTOP-BE7HQ26",[[-1,463,"（）"]],[465,465],[463,463]]],[1555994190950,["28447@DESKTOP-BE7HQ26",[[1,463,"("]],[463,463],[464,464]]],[1555994190998,["28447@DESKTOP-BE7HQ26",[[1,464,"https://)"]],[464,464],[464,472]]],[1555994191481,["28447@DESKTOP-BE7HQ26",[[-1,464,"https://"],[1,472,"Zookeeper篇"]],[464,472],[474,474]]],[1555994196570,["28447@DESKTOP-BE7HQ26",[[1,464,"# "]],[464,464],[466,466]]],[1555994200503,["28447@DESKTOP-BE7HQ26",[[-1,465," "]],[466,466],[465,465]]],[1555994218278,["28447@DESKTOP-BE7HQ26",[[-1,290," s"]],[291,291],[290,290]]],[1555994218605,["28447@DESKTOP-BE7HQ26",[[1,290,"S"]],[290,290],[291,291]]],[1555994227293,["28447@DESKTOP-BE7HQ26",[[-1,1901," s"]],[1903,1903],[1901,1901]]],[1555994228191,["28447@DESKTOP-BE7HQ26",[[1,1901,"S"]],[1901,1901],[1902,1902]]],[1555994297284,[null,[[-1,1971,"#"],[1,1972,"\n"],[1,2203,"#"],[-1,3057,"\n"],[1,3117,"\n"]],[1971,1971],[3118,3118]]],[1555994297284,[null,[[1,1971,"#"],[-1,1971,"\n"],[-1,2203,"#"],[1,3058,"\n"],[-1,3117,"\n"]],[3118,3118],[1971,1971]]],[1555994243918,["28447@DESKTOP-BE7HQ26",[[-1,112,"Spark "]],[118,118],[112,112]]],[1555994254238,["28447@DESKTOP-BE7HQ26",[[-1,711,"Spark "]],[711,717],[711,711]]],[1555994259422,["28447@DESKTOP-BE7HQ26",[[1,470," * \n"]],[469,469],[473,473]]],[1555994260568,["28447@DESKTOP-BE7HQ26",[[1,471,"  "]],[473,473],[475,475]]],[1555994274100,["28447@DESKTOP-BE7HQ26",[[1,475,"【】"]],[475,475],[477,477]]],[1555994274664,["28447@DESKTOP-BE7HQ26",[[-1,475,"【】"]],[477,477],[475,475]]],[1555994276123,["28447@DESKTOP-BE7HQ26",[[1,475,"[]("]],[475,475],[478,478]]],[1555994276159,["28447@DESKTOP-BE7HQ26",[[1,478,"https://)"]],[478,478],[478,486]]],[1555994276620,["28447@DESKTOP-BE7HQ26",[[-1,478,"https://"],[1,486,"Zookeeper简单介绍"]],[478,486],[491,491]]],[1555994280223,["28447@DESKTOP-BE7HQ26",[[1,478,"# "]],[478,478],[480,480]]],[1555994280781,["28447@DESKTOP-BE7HQ26",[[-1,479," "]],[480,480],[479,479]]],[1555994282166,["28447@DESKTOP-BE7HQ26",[[1,476,"Zookeeper简单介绍"]],[476,476],[489,489]]],[1555994284405,["28447@DESKTOP-BE7HQ26",[[1,507,"   * \n"]],[506,506],[512,512]]],[1555994295644,["28447@DESKTOP-BE7HQ26",[[1,512,"【"]],[512,512],[513,513]]],[1555994296143,["28447@DESKTOP-BE7HQ26",[[-1,512,"【"]],[513,513],[512,512]]],[1555994296935,["28447@DESKTOP-BE7HQ26",[[1,512,"[]"]],[512,512],[514,514]]],[1555994357304,[null,[[-1,2004,"#"],[1,2005,"\n"],[1,2236,"#"],[-1,3090,"\n"],[1,3150,"\n"]],[2004,2004],[3151,3151]]],[1555994357305,[null,[[1,2004,"#"],[-1,2004,"\n"],[-1,2236,"#"],[1,3091,"\n"],[-1,3150,"\n"]],[3151,3151],[2004,2004]]],[1555994298648,["28447@DESKTOP-BE7HQ26",[[1,513,"为什么zookeeper集群的节点数是奇数个"]],[513,513],[535,535]]],[1555994300993,["28447@DESKTOP-BE7HQ26",[[1,536,"（"]],[536,536],[537,537]]],[1555994301696,["28447@DESKTOP-BE7HQ26",[[-1,536,"（"]],[537,537],[536,536]]],[1555994302216,["28447@DESKTOP-BE7HQ26",[[1,536,"("]],[536,536],[537,537]]],[1555994302250,["28447@DESKTOP-BE7HQ26",[[1,537,"https://)"]],[537,537],[537,545]]],[1555994303702,["28447@DESKTOP-BE7HQ26",[[-1,537,"https://"],[1,545,"#"]],[537,545],[538,538]]],[1555994304433,["28447@DESKTOP-BE7HQ26",[[1,538,"为什么zookeeper集群的节点数是奇数个"]],[538,538],[560,560]]],[1555994313629,["28447@DESKTOP-BE7HQ26",[[1,562,"   * \n"]],[561,561],[567,567]]],[1555994315904,["28447@DESKTOP-BE7HQ26",[[-1,564," * "]],[567,567],[564,564]]],[1555994317910,["28447@DESKTOP-BE7HQ26",[[1,564,"* "]],[564,564],[566,566]]],[1555994319613,["28447@DESKTOP-BE7HQ26",[[-1,563," "]],[564,564],[563,563]]],[1555994320923,["28447@DESKTOP-BE7HQ26",[[1,565," "]],[564,564],[565,565]]],[1555994321922,["28447@DESKTOP-BE7HQ26",[[1,565,"[]"]],[565,565],[567,567]]],[1555994322909,["28447@DESKTOP-BE7HQ26",[[1,566,"Hive篇"]],[566,566],[571,571]]],[1555994326078,["28447@DESKTOP-BE7HQ26",[[1,572,"("]],[572,572],[573,573]]],[1555994326111,["28447@DESKTOP-BE7HQ26",[[1,573,"https://)"]],[573,573],[573,581]]],[1555994327827,["28447@DESKTOP-BE7HQ26",[[-1,573,"https://"],[1,581,"#"]],[573,581],[574,574]]],[1555994328404,["28447@DESKTOP-BE7HQ26",[[1,574,"Hive篇"]],[574,574],[579,579]]],[1555994336775,["28447@DESKTOP-BE7HQ26",[[1,582," * \n"]],[581,581],[585,585]]],[1555994337588,["28447@DESKTOP-BE7HQ26",[[1,583,"  "]],[585,585],[587,587]]],[1555994340327,["28447@DESKTOP-BE7HQ26",[[1,587,"【】"]],[587,587],[589,589]]],[1555994341320,["28447@DESKTOP-BE7HQ26",[[-1,587,"【】"]],[589,589],[587,587]]],[1555994342229,["28447@DESKTOP-BE7HQ26",[[1,587,"[]"]],[587,587],[589,589]]],[1555994345717,["28447@DESKTOP-BE7HQ26",[[1,588,"sh"]],[588,588],[590,590]]],[1555994346294,["28447@DESKTOP-BE7HQ26",[[-1,588,"sh"]],[590,590],[588,588]]],[1555994351151,["28447@DESKTOP-BE7HQ26",[[1,588,"HIve"]],[588,588],[592,592]]],[1555994352041,["28447@DESKTOP-BE7HQ26",[[-1,589,"Ive"]],[592,592],[589,589]]],[1555994354061,["28447@DESKTOP-BE7HQ26",[[1,589,"iveshi"]],[589,589],[595,595]]],[1555994354761,["28447@DESKTOP-BE7HQ26",[[-1,592,"shi"]],[595,595],[592,592]]],[1555994357088,["28447@DESKTOP-BE7HQ26",[[1,592,"是什么"]],[592,592],[595,595]]],[1555994382536,[null,[[-1,2086,"#"],[1,2087,"\n"],[1,2318,"#"],[-1,3172,"\n"],[1,3232,"\n"]],[2086,2086],[3233,3233]]],[1555994382536,[null,[[1,2086,"#"],[-1,2086,"\n"],[-1,2318,"#"],[1,3173,"\n"],[-1,3232,"\n"]],[3233,3233],[2086,2086]]],[1555994359340,["28447@DESKTOP-BE7HQ26",[[1,596,"（"]],[596,596],[597,597]]],[1555994360026,["28447@DESKTOP-BE7HQ26",[[-1,596,"（"]],[597,597],[596,596]]],[1555994360767,["28447@DESKTOP-BE7HQ26",[[1,596,"("]],[596,596],[597,597]]],[1555994360815,["28447@DESKTOP-BE7HQ26",[[1,597,"https://)"]],[597,597],[597,605]]],[1555994361838,["28447@DESKTOP-BE7HQ26",[[-1,597,"https://"],[1,605,"Hive是什么"]],[597,605],[604,604]]],[1555994367884,["28447@DESKTOP-BE7HQ26",[[1,597,"#"]],[597,597],[598,598]]],[1555994380368,["28447@DESKTOP-BE7HQ26",[[-1,4270,"是什么"]],[4273,4273],[4270,4270]]],[1555994381730,["28447@DESKTOP-BE7HQ26",[[1,4270,"是什么"]],[4270,4270],[4273,4273]]],[1555994563293,[null,[[-1,2096,"#"],[1,2097,"\n"],[1,2328,"#"],[-1,2354,""],[-1,3182,"\n"],[1,3244,"\n"],[-1,4270,"是"],[1,4273,"\n"]],[2096,2096],[4274,4274]]],[1555994563293,[null,[[1,2096,"#"],[-1,2096,"\n"],[-1,2328,"#"],[1,2355,""],[1,3183,"\n"],[-1,3244,"\n"],[1,4271,"是"],[-1,4273,"\n"]],[4274,4274],[2096,2096]]],[1555994504213,["28447@DESKTOP-BE7HQ26",[[1,2327,"Spark读取Kafka的两种方式，两者区别"]],[2327,2327],[2349,2349]]],[1555994803282,[null,[[-1,2096,"#"],[1,2097,"\n"],[1,2350,"#"],[-1,2376,""],[-1,3204,"\n"],[1,3266,"\n"],[-1,4292,"是"],[1,4295,"\n"]],[2096,2096],[4296,4296]]],[1555994803282,[null,[[1,2096,"#"],[-1,2096,"\n"],[-1,2350,"#"],[1,2377,""],[1,3205,"\n"],[-1,3266,"\n"],[1,4293,"是"],[-1,4295,"\n"]],[4296,4296],[2096,2096]]],[1555994791979,["28447@DESKTOP-BE7HQ26",[[-1,15,"<!-- GFM-TOC -->"]],[15,31],[15,15]]],[1555994796220,["28447@DESKTOP-BE7HQ26",[[-1,591,"<!-- GFM-TOC -->"]],[591,607],[591,591]]],[1555994803172,["28447@DESKTOP-BE7HQ26",[[1,550,"s"]],[550,550],[551,551]]],[1555994863290,[null,[[-1,2065,"#"],[1,2066,"\n"],[1,2319,"#"],[-1,2345,""],[-1,3173,"\n"],[1,3235,"\n"],[-1,4261,"是"],[1,4264,"\n"]],[2065,2065],[4265,4265]]],[1555994863290,[null,[[1,2065,"#"],[-1,2065,"\n"],[-1,2319,"#"],[1,2346,""],[1,3174,"\n"],[-1,3235,"\n"],[1,4262,"是"],[-1,4264,"\n"]],[4265,4265],[2065,2065]]],[1555994803300,["28447@DESKTOP-BE7HQ26",[[1,551,"i"]],[551,551],[552,552]]],[1555994803905,["28447@DESKTOP-BE7HQ26",[[-1,550,"si"]],[552,552],[550,550]]],[1555994804290,["28447@DESKTOP-BE7HQ26",[[1,550,"si"]],[550,550],[552,552]]],[1555994805012,["28447@DESKTOP-BE7HQ26",[[-1,550,"si"]],[552,552],[550,550]]],[1555994806587,["28447@DESKTOP-BE7HQ26",[[1,550,"四、"]],[550,550],[552,552]]]],null,"28447@DESKTOP-BE7HQ26"],["1834e244-e650-4f65-99b6-4fc38d5df8cf",1556089552523,"# 面试题整理\n[toc]\n\n\n* [一、Spark篇](#Spark篇)\n    * [Spark任务提交流程](#Spark任务提交流程)\n    * [Spark RDD的五大特性](#RDD的五大特性)\n    * [Transform和Action算子](#Transform和Action算子) \n    * [Spark中有了RDD，为什么还要有Dataframe和DataSet](#Spark中有了RDD，为什么还要有Dataframe和DataSet？)\n    * [Spark shuffle过程](#SparkShuffle过程)\n    * [Spark读取Kafka的两种方式，两者区别](#Spark读取Kafka的两种方式，两者区别)\n    * [Spark性能调优](#Spark性能调优)\n * [二、Hadoop篇](#Hadoop篇)\n     * [Yarn的认识](#Yarn的认识（简单介绍）)\n * [三、Zookeeper篇](#Zookeeper篇)\n   * [Zookeeper简单介绍](#Zookeeper简单介绍)\n   * [为什么zookeeper集群的节点数是奇数个](#为什么zookeeper集群的节点数是奇数个)\n * [四、Hive篇](#Hive篇) \n   * [Hive是什么](#Hive是什么)\n\n\n## Spark篇\n### Spark任务提交流程\n- 1.SparkContext提交作业\n- 2.DAGScheduler拆分stage\n- 3.生成作业\n- 4.提交任务集\n- 5.提交任务\n- 6.执行任务\n- 7.跟踪任务\n\n![任务调度总体诠释]($resource/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg)\n\n### RDD的五大特性\n   - 1. A list of partitions\n   RDD是一个由多个partition（某个节点里的某一片连续的数据）组成的的list；将数据加载为RDD时，一般会遵循数据的本地性（一般一个hdfs里的block会加载为一个partition）\n   - 2. A function for computing each split\n   RDD的每个partition上面都会有function，也就是函数应用，其作用是实现RDD之间partition的转换。\n   - 3. A list of dependencies on other RDDs\n    RDD会记录它的依赖 ，为了容错（重算，cache，checkpoint），也就是说在内存中的RDD操作时出错或丢失会进行重算。\n  - 4. Optionally,a Partitioner for Key-value RDDs\n  可选项，如果RDD里面存的数据是key-value形式，则可以传递一个自定义的Partitioner进行重新分区，例如这里自定义的Partitioner是基于key进行分区，那则会将不同RDD里面的相同key的数据放到同一个partition里面\n  - 5. Optionally, a list of preferred locations to compute each split on\n    **最优的位置**去计算，也就是**数据的本地性**。\n\n### Transform和Action算子\nTransformation不会立即执行，只是记录这些操作 \naction会执行前边的Transformation所有操作\n\n**transform算子得到新的RDD**\n常见transform算子：map（针对每个元素）、mapPartitions（针对partition）、filter、**flatMap**、union、**distinct**、**groupByKey**、**reduceByKey**、sortByKey、join\n\n**action得到值**\n常见action算子：reduce、count、collect、saveAsTextFile、countByKey、foreach\n\n[常见算子](https://my.oschina.net/134596/blog/3037972)\n[算子操作示例](https://blog.csdn.net/huozi07/article/details/50133259)\n\n### Spark中有了RDD，为什么还要有Dataframe和DataSet？\nSparkSQL不支持RDD,支持DataFrame和dataSet\n\n\n### SparkShuffle过程\nshuffle发生在两个stage之间，\nshuffle中的概念：shuffleMapTask 和 ResultTask\n两种方式：**HashShuffleManager**和 **SortShuffleManager**\nHashShuffleManager分为改进之前和改进之后，改经前文件数task1*task2\n改进之后文件数core数*task2\nSortShuffleManager文件数：上游stage的task数量\n\n[shuffle参考文章](https://blog.csdn.net/quitozang/article/details/80904040)\n\nSpark读取Kafka的两种方式，两者区别\n### Spark读取Kafka的两种方式，两者区别\n- 1.  Receiver-base：实时读取缓存到内存中\n先把数据从kafka中读取出来，然后缓存在内存，再定时处理。如果这时候集群退出，而偏移量又没处理好的话，数据就丢掉了，存在程序失败丢失数据的可能，后在Spark 1.2时引入一个配置参数spark.streaming.receiver.writeAheadLog.enable以规避此风险。\n操作的类： **KafkaUtils.createStream**\nzookeeper维护offset\n- 2.  Direct：定时批量读取\nDirect方式无需Receiver读取数据，而是需要计算时再读取数据，所以Direct方式的数据消费对内存的要求不高，只需要考虑批量计算所需要的内存即可；另外batch任务堆积时，也不会影响数据堆积。\n  操作的类： **KafkaUtils.createDirectStream**\n  程序自己维护offset\n  \n![Kafka结合Streaming的两种方式]($resource/Kafka%E7%BB%93%E5%90%88Streaming%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png)\n\n### Spark性能调优\n* 1. **小分区合并的问题**\n由于程序中过度使用filter算子或者使用不当，都会造成大量的小分区出现。\n**带来的问题就是：任务处理的数据量很小，反复地切换任务所消耗的资源反而会带来很大的系统开销。**\n**解决方案：使用重分区函数coalesce进行数据紧缩、减少分区数并设置shuffle=true保证任务是并行计算的**（或者使用**repartition**重分区，其底层使用的是coalesce并设置Shuffle=true）\n\n* 2. **数据倾斜问题**\n典型的场景是：大量的数据被分配到小部分节点计算，而其他大部分节点却只计算小部分数据。\n\n[Spark性能调优](https://www.cnblogs.com/jchubby/p/5449373.html)\n\n\n减少分区数，虽然意味着并行度降低，但是相对比之前的大量小任务过度切换的消耗，却是比较值得的。\n\n这里也可以直接使用repartition重分区函数进行操作，因为其底层使用的是coalesce并设置Shuffle=true\n\n\n* 2. **数据倾斜问题**\n\n## Hadoop篇\n\n### Yarn的认识（简单介绍）\nYarn是hadoop2.X之后出现的Hadoop 资源管理器，它是一个**资源管理系统和调度平台**。\n\nYARN 是一个资源管理、任务调度的框架，主要包含三大模块：ResourceManager（RM）、\nNodeManager（NM）、ApplicationMaster（AM）。\n- ResourceManager 负责所有资源的监控、分配和管理；\n- ApplicationMaster 负责每一个具体应用程序的调度和协调；\n- NodeManager 负责每一个节点的维护。\n对于所有的 applications，RM 拥有绝对的控制权和对资源的分配权。而每个 AM 则会和\nRM 协商资源，同时和 NodeManager 通信来执行和监控 task。\n\n![Yarn架构图]($resource/Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n[参考文章](https://blog.csdn.net/qq_33624952/article/details/79341034)\n\n## Zookeeper篇\n\n### Zookeeper简单介绍\nZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态.\n\n分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n### 为什么zookeeper集群的节点数是奇数个\n首先介绍zookeeper选举的规则：leader选举，要求**可用节点数量 > 总节点数量/2**\n设置奇数个的目的：\n**1、防止由脑裂造成的集群不可用**\n**2、在容错能力相同的情况下，奇数台更节省资源。**\n[zookeeper为什么是奇数个集群 参考文章](https://blog.csdn.net/u010476994/article/details/79806041)\n\n## Hive篇\n\n### Hive是什么\n Hive 是基于 Hadoop 构建的一套数据仓库分析系统，用来进行数据提取转化加载（ETL）（利用mapreduce挖掘hdfs上的数据）\n \n[Hive参考文章](https://blog.csdn.net/francis_lzz/article/details/77720827)\n\n\n",[[1556089529701,["28447@DESKTOP-BE7HQ26",[[-1,0,"# 面试题整理\n[toc]\n\n\n* [一、Spark篇](#Spark篇)\n    * [Spark任务提交流程](#Spark任务提交流程)\n    * [Spark RDD的五大特性](#RDD的五大特性)\n    * [Transform和Action算子](#Transform和Action算子) \n    * [Spark中有了RDD，为什么还要有Dataframe和DataSet](#Spark中有了RDD，为什么还要有Dataframe和DataSet？)\n    * [Spark shuffle过程](#SparkShuffle过程)\n    * [Spark读取Kafka的两种方式，两者区别](#Spark读取Kafka的两种方式，两者区别)\n    * [Spark性能调优](#Spark性能调优)\n * [二、Hadoop篇](#Hadoop篇)\n     * [Yarn的认识](#Yarn的认识（简单介绍）)\n * [三、Zookeeper篇](#Zookeeper篇)\n   * [Zookeeper简单介绍](#Zookeeper简单介绍)\n   * [为什么zookeeper集群的节点数是奇数个](#为什么zookeeper集群的节点数是奇数个)\n * [四、Hive篇](#Hive篇) \n   * [Hive是什么](#Hive是什么)\n\n\n## Spark篇\n### Spark任务提交流程\n- 1.SparkContext提交作业\n- 2.DAGScheduler拆分stage\n- 3.生成作业\n- 4.提交任务集\n- 5.提交任务\n- 6.执行任务\n- 7.跟踪任务\n\n![任务调度总体诠释]($resource/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg)\n\n### RDD的五大特性\n   - 1. A list of partitions\n   RDD是一个由多个partition（某个节点里的某一片连续的数据）组成的的list；将数据加载为RDD时，一般会遵循数据的本地性（一般一个hdfs里的block会加载为一个partition）\n   - 2. A function for computing each split\n   RDD的每个partition上面都会有function，也就是函数应用，其作用是实现RDD之间partition的转换。\n   - 3. A list of dependencies on other RDDs\n    RDD会记录它的依赖 ，为了容错（重算，cache，checkpoint），也就是说在内存中的RDD操作时出错或丢失会进行重算。\n  - 4. Optionally,a Partitioner for Key-value RDDs\n  可选项，如果RDD里面存的数据是key-value形式，则可以传递一个自定义的Partitioner进行重新分区，例如这里自定义的Partitioner是基于key进行分区，那则会将不同RDD里面的相同key的数据放到同一个partition里面\n  - 5. Optionally, a list of preferred locations to compute each split on\n    **最优的位置**去计算，也就是**数据的本地性**。\n\n### Transform和Action算子\nTransformation不会立即执行，只是记录这些操作 \naction会执行前边的Transformation所有操作\n\n**transform算子得到新的RDD**\n常见transform算子：map（针对每个元素）、mapPartitions（针对partition）、filter、**flatMap**、union、**distinct**、**groupByKey**、**reduceByKey**、sortByKey、join\n\n**action得到值**\n常见action算子：reduce、count、collect、saveAsTextFile、countByKey、foreach\n\n[常见算子](https://my.oschina.net/134596/blog/3037972)\n[算子操作示例](https://blog.csdn.net/huozi07/article/details/50133259)\n\n### Spark中有了RDD，为什么还要有Dataframe和DataSet？\nSparkSQL不支持RDD,支持DataFrame和dataSet\n\n\n### SparkShuffle过程\nshuffle发生在两个stage之间，\nshuffle中的概念：shuffleMapTask 和 ResultTask\n两种方式：**HashShuffleManager**和 **SortShuffleManager**\nHashShuffleManager分为改进之前和改进之后，改经前文件数task1*task2\n改进之后文件数core数*task2\nSortShuffleManager文件数：上游stage的task数量\n\n[shuffle参考文章](https://blog.csdn.net/quitozang/article/details/80904040)\n\nSpark读取Kafka的两种方式，两者区别\n### Spark读取Kafka的两种方式，两者区别\n- 1.  Receiver-base：实时读取缓存到内存中\n先把数据从kafka中读取出来，然后缓存在内存，再定时处理。如果这时候集群退出，而偏移量又没处理好的话，数据就丢掉了，存在程序失败丢失数据的可能，后在Spark 1.2时引入一个配置参数spark.streaming.receiver.writeAheadLog.enable以规避此风险。\n操作的类： **KafkaUtils.createStream**\nzookeeper维护offset\n- 2.  Direct：定时批量读取\nDirect方式无需Receiver读取数据，而是需要计算时再读取数据，所以Direct方式的数据消费对内存的要求不高，只需要考虑批量计算所需要的内存即可；另外batch任务堆积时，也不会影响数据堆积。\n  操作的类： **KafkaUtils.createDirectStream**\n  程序自己维护offset\n  \n![Kafka结合Streaming的两种方式]($resource/Kafka%E7%BB%93%E5%90%88Streaming%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png)\n\n### Spark性能调优\n* 1. **小分区合并的问题**\n由于程序中过度使用filter算子或者使用不当，都会造成大量的小分区出现。\n**带来的问题就是：任务处理的数据量很小，反复地切换任务所消耗的资源反而会带来很大的系统开销。**\n**解决方案：使用重分区函数coalesce进行数据紧缩、减少分区数并设置shuffle=true保证任务是并行计算的**（或者使用**repartition**重分区，其底层使用的是coalesce并设置Shuffle=true）\n\n* 2. **数据倾斜问题**\n典型的场景是：大量的数据被分配到小部分节点计算，而其他大部分节点却只计算小部分数据。\n\n[Spark性能调优](https://www.cnblogs.com/jchubby/p/5449373.html)\n\n\n减少分区数，虽然意味着并行度降低，但是相对比之前的大量小任务过度切换的消耗，却是比较值得的。\n\n这里也可以直接使用repartition重分区函数进行操作，因为其底层使用的是coalesce并设置Shuffle=true\n\n\n* 2. **数据倾斜问题**\n\n## Hadoop篇\n\n### Yarn的认识（简单介绍）\nYarn是hadoop2.X之后出现的Hadoop 资源管理器，它是一个**资源管理系统和调度平台**。\n\nYARN 是一个资源管理、任务调度的框架，主要包含三大模块：ResourceManager（RM）、\nNodeManager（NM）、ApplicationMaster（AM）。\n- ResourceManager 负责所有资源的监控、分配和管理；\n- ApplicationMaster 负责每一个具体应用程序的调度和协调；\n- NodeManager 负责每一个节点的维护。\n对于所有的 applications，RM 拥有绝对的控制权和对资源的分配权。而每个 AM 则会和\nRM 协商资源，同时和 NodeManager 通信来执行和监控 task。\n\n![Yarn架构图]($resource/Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png)\n\n[参考文章](https://blog.csdn.net/qq_33624952/article/details/79341034)\n\n## Zookeeper篇\n\n### Zookeeper简单介绍\nZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态.\n\n分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n### 为什么zookeeper集群的节点数是奇数个\n首先介绍zookeeper选举的规则：leader选举，要求**可用节点数量 > 总节点数量/2**\n设置奇数个的目的：\n**1、防止由脑裂造成的集群不可用**\n**2、在容错能力相同的情况下，奇数台更节省资源。**\n[zookeeper为什么是奇数个集群 参考文章](https://blog.csdn.net/u010476994/article/details/79806041)\n\n## Hive篇\n\n### Hive是什么\n Hive 是基于 Hadoop 构建的一套数据仓库分析系统，用来进行数据提取转化加载（ETL）（利用mapreduce挖掘hdfs上的数据）\n \n[Hive参考文章](https://blog.csdn.net/francis_lzz/article/details/77720827)\n\n\n"]],[0,4413],[0,0]]],[1556089530128,["28447@DESKTOP-BE7HQ26",[[1,0,"# 面试题整理\n[toc]\n\n<!-- GFM-TOC -->\n* [一、Spark篇](#Spark篇)\n    * [Spark任务提交流程](#Spark任务提交流程)\n    * [Spark RDD的五大特性](#RDD的五大特性)\n    * [Transform和Action算子](#Transform和Action算子) \n    * [Spark中有了RDD，为什么还要有Dataframe和DataSet](#Spark中有了RDD为什么还要有Dataframe和DataSet)\n    * [Spark shuffle过程](#SparkShuffle过程)\n    * [Spark读取Kafka的两种方式，两者区别](#Spark读取Kafka的两种方式及两者区别)\n    * [Spark性能调优](#Spark性能调优)\n * [二、Hadoop篇](#Hadoop篇)\n     * [Yarn的认识](#Yarn的认识)\n * [三、Zookeeper篇](#Zookeeper篇)\n   * [Zookeeper简单介绍](#Zookeeper简单介绍)\n   * [为什么zookeeper集群的节点数是奇数个](#为什么zookeeper集群的节点数是奇数个)\n * [四、Hive篇](#Hive篇) \n   * [Hive是什么](#Hive是什么)\n<!-- GFM-TOC -->\n\n## Spark篇\n### Spark任务提交流程\n- 1.SparkContext提交作业\n- 2.DAGScheduler拆分stage\n- 3.生成作业\n- 4.提交任务集\n- 5.提交任务\n- 6.执行任务\n- 7.跟踪任务\n\n<div align=\"center\"> <img src=\"picture/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg\"/> </div><br>\n\n\n### RDD的五大特性\n   - 1. A list of partitions\n   RDD是一个由多个partition（某个节点里的某一片连续的数据）组成的的list；将数据加载为RDD时，一般会遵循数据的本地性（一般一个hdfs里的block会加载为一个partition）\n   - 2. A function for computing each split\n   RDD的每个partition上面都会有function，也就是函数应用，其作用是实现RDD之间partition的转换。\n   - 3. A list of dependencies on other RDDs\n    RDD会记录它的依赖 ，为了容错（重算，cache，checkpoint），也就是说在内存中的RDD操作时出错或丢失会进行重算。\n  - 4. Optionally,a Partitioner for Key-value RDDs\n  可选项，如果RDD里面存的数据是key-value形式，则可以传递一个自定义的Partitioner进行重新分区，例如这里自定义的Partitioner是基于key进行分区，那则会将不同RDD里面的相同key的数据放到同一个partition里面\n  - 5. Optionally, a list of preferred locations to compute each split on\n    **最优的位置**去计算，也就是**数据的本地性**。\n\n### transform和action算子\nTransformation不会立即执行，只是记录这些操作 \naction会执行前边的Transformation所有操作\n\n**transform算子得到新的RDD**\n常见transform算子：map（针对每个元素）、mapPartitions（针对partition）、filter、**flatMap**、union、**distinct**、**groupByKey**、**reduceByKey**、sortByKey、join\n\n**action得到值**\n常见action算子：reduce、count、collect、saveAsTextFile、countByKey、foreach\n\n[常见算子](https://my.oschina.net/134596/blog/3037972)\n[算子操作示例](https://blog.csdn.net/huozi07/article/details/50133259)\n\n### Spark中有了RDD为什么还要有Dataframe和DataSet\nSparkSQL不支持RDD,支持DataFrame和dataSet\n\n\n### SparkShuffle过程\nshuffle发生在两个stage之间，\nshuffle中的概念：shuffleMapTask 和 ResultTask\n两种方式：**HashShuffleManager**和 **SortShuffleManager**\nHashShuffleManager分为改进之前和改进之后，改经前文件数task1*task2\n改进之后文件数core数*task2\nSortShuffleManager文件数：上游stage的task数量\n\n[shuffle参考文章](https://blog.csdn.net/quitozang/article/details/80904040)\n\n\n### Spark读取Kafka的两种方式及两者区别\n- 1.  Receiver-base：实时读取缓存到内存中\n先把数据从kafka中读取出来，然后缓存在内存，再定时处理。如果这时候集群退出，而偏移量又没处理好的话，数据就丢掉了，存在程序失败丢失数据的可能，后在Spark 1.2时引入一个配置参数spark.streaming.receiver.writeAheadLog.enable以规避此风险。\n操作的类： **KafkaUtils.createStream**\nzookeeper维护offset\n- 2.  Direct：定时批量读取\nDirect方式无需Receiver读取数据，而是需要计算时再读取数据，所以Direct方式的数据消费对内存的要求不高，只需要考虑批量计算所需要的内存即可；另外batch任务堆积时，也不会影响数据堆积。\n  操作的类： **KafkaUtils.createDirectStream**\n  程序自己维护offset\n  \n\n<div align=\"center\"> <img src=\"picture/Kafka%E7%BB%93%E5%90%88Streaming%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png\"/> </div><br>\n\n### Spark性能调优\n* 1. **小分区合并的问题**\n由于程序中过度使用filter算子或者使用不当，都会造成大量的小分区出现。\n**带来的问题就是：任务处理的数据量很小，反复地切换任务所消耗的资源反而会带来很大的系统开销。**\n**解决方案：使用重分区函数coalesce进行数据紧缩、减少分区数并设置shuffle=true保证任务是并行计算的**（或者使用**repartition**重分区，其底层使用的是coalesce并设置Shuffle=true）\n\n* 2. **数据倾斜问题**\n典型的场景是：大量的数据被分配到小部分节点计算，而其他大部分节点却只计算小部分数据。\n\n[Spark性能调优](https://www.cnblogs.com/jchubby/p/5449373.html)\n\n\n减少分区数，虽然意味着并行度降低，但是相对比之前的大量小任务过度切换的消耗，却是比较值得的。\n\n这里也可以直接使用repartition重分区函数进行操作，因为其底层使用的是coalesce并设置Shuffle=true\n\n\n* 2. **数据倾斜问题**\n\n## Hadoop篇\n\n### Yarn的认识\nYarn是hadoop2.X之后出现的Hadoop 资源管理器，它是一个**资源管理系统和调度平台**。\n\nYARN 是一个资源管理、任务调度的框架，主要包含三大模块：ResourceManager（RM）、\nNodeManager（NM）、ApplicationMaster（AM）。\n- ResourceManager 负责所有资源的监控、分配和管理；\n- ApplicationMaster 负责每一个具体应用程序的调度和协调；\n- NodeManager 负责每一个节点的维护。\n对于所有的 applications，RM 拥有绝对的控制权和对资源的分配权。而每个 AM 则会和\nRM 协商资源，同时和 NodeManager 通信来执行和监控 task。\n\n<div align=\"center\"> <img src=\"picture/Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png\"/> </div><br>\n\n[参考文章](https://blog.csdn.net/qq_33624952/article/details/79341034)\n\n## Zookeeper篇\n\n### Zookeeper简单介绍\nZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态.\n\n分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n### 为什么zookeeper集群的节点数是奇数个\n首先介绍zookeeper选举的规则：leader选举，要求**可用节点数量 > 总节点数量/2**\n设置奇数个的目的：\n**1、防止由脑裂造成的集群不可用**\n**2、在容错能力相同的情况下，奇数台更节省资源。**\n\n[zookeeper为什么是奇数个集群 参考文章](https://blog.csdn.net/u010476994/article/details/79806041)\n\n## Hive篇\n\n### Hive是什么\n Hive 是基于 Hadoop 构建的一套数据仓库分析系统，用来进行数据提取转化加载（ETL）（利用mapreduce挖掘hdfs上的数据）\n \n[Hive参考文章](https://blog.csdn.net/francis_lzz/article/details/77720827)\n\n\n\n"]],[0,0],[4488,4488]]],[1556089580762,["28447@DESKTOP-BE7HQ26",[[1,768,"https://github.com/Dannymeng/bigdata_note/blob/master/"]],[768,852],[906,906]]],[1556089598068,["28447@DESKTOP-BE7HQ26",[[1,923,"\n"]],[920,920],[921,921]]],[1556089599322,["28447@DESKTOP-BE7HQ26",[[1,921,"![ä»»å¡è°åº¦æ»ä½è¯ é.jpg](https://github.com/Dannymeng/bigdata_note/blob/master/picture/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg?raw=true)"]],[921,921],[1101,1101]]],[1556089613122,["28447@DESKTOP-BE7HQ26",[[-1,737,"<div align=\"center\"> <img src=\"https://github.com/Dannymeng/bigdata_note/blob/master/picture/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg\"/> </div><br>"]],[737,920],[737,737]]],[1556089616978,["28447@DESKTOP-BE7HQ26",[[-1,740,"ä»»å¡è°åº¦æ»ä½è¯ é"]],[740,764],[740,740]]],[1556089624038,["28447@DESKTOP-BE7HQ26",[[1,740,"Spark任务提交"]],[740,740],[749,749]]],[1556089627556,["28447@DESKTOP-BE7HQ26",[[1,749,"立寸功 "]],[749,749],[753,753]]],[1556089628499,["28447@DESKTOP-BE7HQ26",[[-1,749,"立寸功 "]],[753,753],[749,749]]],[1556089630633,["28447@DESKTOP-BE7HQ26",[[1,749,"流程图"]],[749,749],[752,752]]],[1556089652305,["28447@DESKTOP-BE7HQ26",[[-1,3814,"<div align=\"c"],[1,3827,"![Yarnæ¶æå¾.png](https://github.com/Dannym"],[1,3829,"g/bigdata_no"],[-1,3831,"r\"> <img src=\""],[1,3845,"/blob/master/"],[-1,3888,"\"/> </div><br>"],[1,3902,"?raw=true)"]],[3814,3902],[3942,3942]]],[1556089655477,["28447@DESKTOP-BE7HQ26",[[-1,3817,"arnæ¶æå¾"]],[3816,3829],[3816,3817]]],[1556089656352,["28447@DESKTOP-BE7HQ26",[[1,3817,"Arn"]],[3816,3816],[3820,3820]]],[1556089657386,["28447@DESKTOP-BE7HQ26",[[-1,3817,"Arn"]],[3820,3820],[3817,3817]]],[1556089658641,["28447@DESKTOP-BE7HQ26",[[1,3817,"arn"]],[3817,3817],[3820,3820]]],[1556089678589,["28447@DESKTOP-BE7HQ26",[[-1,2830,"<div align=\"c"],[1,2843,"![Kafkaç»åStreamingçä¸¤ç§æ¹å¼.png](https://github.com/Dannym"],[1,2845,"g/bigdata_no"],[-1,2847,"r\"> <img src=\""],[1,2861,"/blob/master/"],[-1,2950,"\"/> </div><br>"],[1,2964,"?raw=true)"]],[2830,2964],[3026,3026]]],[1556089681883,["28447@DESKTOP-BE7HQ26",[[-1,2832,"Kafkaç»åStreamingçä¸¤ç§æ¹å¼"]],[2832,2867],[2832,2832]]],[1556089683248,["28447@DESKTOP-BE7HQ26",[[1,2832,"Kfak"]],[2832,2832],[2836,2836]]],[1556089683956,["28447@DESKTOP-BE7HQ26",[[-1,2833,"fak"]],[2836,2836],[2833,2833]]],[1556089684372,["28447@DESKTOP-BE7HQ26",[[1,2833,"fak"]],[2833,2833],[2836,2836]]],[1556089684786,["28447@DESKTOP-BE7HQ26",[[-1,2835,"k"]],[2836,2836],[2835,2835]]],[1556089685202,["28447@DESKTOP-BE7HQ26",[[-1,2833,"fa"]],[2835,2835],[2833,2833]]],[1556089689874,["28447@DESKTOP-BE7HQ26",[[1,2833,"afka链接"]],[2833,2833],[2839,2839]]],[1556089690868,["28447@DESKTOP-BE7HQ26",[[-1,2837,"链接"]],[2839,2839],[2837,2837]]],[1556089691228,["28447@DESKTOP-BE7HQ26",[[1,2837,"；"]],[2837,2837],[2838,2838]]],[1556089694091,["28447@DESKTOP-BE7HQ26",[[-1,2837,"；"]],[2838,2838],[2837,2837]]],[1556089694648,["28447@DESKTOP-BE7HQ26",[[1,2837,"；"]],[2837,2837],[2838,2838]]],[1556089695226,["28447@DESKTOP-BE7HQ26",[[-1,2837,"；"]],[2838,2838],[2837,2837]]],[1556089707878,["28447@DESKTOP-BE7HQ26",[[1,2837,"连接Spark两种方式"]],[2837,2837],[2848,2848]]],[1556089907882,["28447@DESKTOP-BE7HQ26",[[1,3079,"\n"]],[3078,3078],[3079,3079]]],[1556089909296,["28447@DESKTOP-BE7HQ26",[[1,3130,"\n"]],[3129,3129],[3130,3130]]],[1556089967434,["28447@DESKTOP-BE7HQ26",[[-1,3484,"* 2. **数据倾斜问题**"]],[3484,3499],[3484,3484]]],[1556093433604,["28447@DESKTOP-BE7HQ26",[[-1,8,"[toc]"]],[8,13],[8,8]]],[1556093434225,["28447@DESKTOP-BE7HQ26",[[-1,9,"\n"]],[8,8],[7,7]]],[1556093435908,["28447@DESKTOP-BE7HQ26",[[-1,8,"\n"]],[8,8],[7,7]]],[1556093437475,["28447@DESKTOP-BE7HQ26",[[1,8,"\n"]],[7,7],[8,8]]],[1556093899919,["28447@DESKTOP-BE7HQ26",[[-1,3017,"* "]],[3019,3019],[3017,3017]]],[1556093901468,["28447@DESKTOP-BE7HQ26",[[1,3017,"· "]],[3017,3017],[3019,3019]]],[1556093902483,["28447@DESKTOP-BE7HQ26",[[-1,3017,"· "]],[3019,3019],[3017,3017]]],[1556093903315,["28447@DESKTOP-BE7HQ26",[[1,3017,"- "]],[3017,3017],[3019,3019]]],[1556093908747,["28447@DESKTOP-BE7HQ26",[[-1,3022,"**"]],[3024,3024],[3022,3022]]],[1556093909684,["28447@DESKTOP-BE7HQ26",[[-1,3030,"**"]],[3032,3032],[3030,3030]]],[1556093911646,["28447@DESKTOP-BE7HQ26",[[1,3030,"**"]],[3030,3030],[3032,3032]]],[1556093911908,["28447@DESKTOP-BE7HQ26",[[1,3022,"**"]],[3022,3022],[3024,3024]]],[1556093914390,["28447@DESKTOP-BE7HQ26",[[-1,3017,"- "]],[3019,3019],[3017,3017]]],[1556093917832,["28447@DESKTOP-BE7HQ26",[[-1,3241,"* "]],[3243,3243],[3241,3241]]],[1556094083617,["28447@DESKTOP-BE7HQ26",[[-1,3299,"[Spark性能调优](https://www.cnblogs.com/jchubby/p/5449373.html)"]],[3299,3358],[3299,3299]]],[1556094084471,["28447@DESKTOP-BE7HQ26",[[1,3414,"[Spark性能调优](https://www.cnblogs.com/jchubby/p/5449373.html)"]],[3414,3414],[3473,3473]]],[1556094086230,["28447@DESKTOP-BE7HQ26",[[-1,3301,"\n"]],[3301,3301],[3300,3300]]],[1556094086430,["28447@DESKTOP-BE7HQ26",[[-1,3300,"\n"]],[3300,3300],[3299,3299]]],[1556094086618,["28447@DESKTOP-BE7HQ26",[[-1,3299,"\n"]],[3299,3299],[3298,3298]]],[1556094087893,["28447@DESKTOP-BE7HQ26",[[-1,3298,"\n"]],[3298,3298],[3297,3297]]],[1556094088641,["28447@DESKTOP-BE7HQ26",[[1,3298,"\n"]],[3297,3297],[3298,3298]]],[1556094132837,["28447@DESKTOP-BE7HQ26",[[1,3411,"\n"]],[3409,3409],[3410,3410]]],[1556094133020,["28447@DESKTOP-BE7HQ26",[[1,3412,"\n"]],[3410,3410],[3411,3411]]],[1556094152858,["28447@DESKTOP-BE7HQ26",[[-1,3299,"减少分区数，虽然意味着并行度降低，但是相对比之前的大量小任务过度切换的消耗，却是比较值得的。\n\n这里也可以直接使用repartition重分区函数进行操作，因为其底层使用的是coalesce并设置Shuffle=true"]],[3299,3409],[3299,3299]]]],null,"28447@DESKTOP-BE7HQ26"],["39a7d826-bca9-4bd5-b5a5-c2af5f586a74",1556292162472,"# 面试题整理\n\n<!-- GFM-TOC -->\n* [一、Spark篇](#Spark篇)\n    * [Spark任务提交流程](#Spark任务提交流程)\n    * [Spark RDD的五大特性](#RDD的五大特性)\n    * [Transform和Action算子](#Transform和Action算子) \n    * [Spark中有了RDD，为什么还要有Dataframe和DataSet](#Spark中有了RDD为什么还要有Dataframe和DataSet)\n    * [Spark shuffle过程](#SparkShuffle过程)\n    * [Spark读取Kafka的两种方式，两者区别](#Spark读取Kafka的两种方式及两者区别)\n    * [Spark性能调优](#Spark性能调优)\n * [二、Hadoop篇](#Hadoop篇)\n     * [Yarn的认识](#Yarn的认识)\n * [三、Zookeeper篇](#Zookeeper篇)\n   * [Zookeeper简单介绍](#Zookeeper简单介绍)\n   * [为什么zookeeper集群的节点数是奇数个](#为什么zookeeper集群的节点数是奇数个)\n * [四、Hive篇](#Hive篇) \n   * [Hive是什么](#Hive是什么)\n<!-- GFM-TOC -->\n\n## Spark篇\n### Spark任务提交流程\n- 1.SparkContext提交作业\n- 2.DAGScheduler拆分stage\n- 3.生成作业\n- 4.提交任务集\n- 5.提交任务\n- 6.执行任务\n- 7.跟踪任务\n\n\n![Spark任务提交流程图.jpg](https://github.com/Dannymeng/bigdata_note/blob/master/picture/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg?raw=true)\n\n\n### RDD的五大特性\n   - 1. A list of partitions\n   RDD是一个由多个partition（某个节点里的某一片连续的数据）组成的的list；将数据加载为RDD时，一般会遵循数据的本地性（一般一个hdfs里的block会加载为一个partition）\n   - 2. A function for computing each split\n   RDD的每个partition上面都会有function，也就是函数应用，其作用是实现RDD之间partition的转换。\n   - 3. A list of dependencies on other RDDs\n    RDD会记录它的依赖 ，为了容错（重算，cache，checkpoint），也就是说在内存中的RDD操作时出错或丢失会进行重算。\n  - 4. Optionally,a Partitioner for Key-value RDDs\n  可选项，如果RDD里面存的数据是key-value形式，则可以传递一个自定义的Partitioner进行重新分区，例如这里自定义的Partitioner是基于key进行分区，那则会将不同RDD里面的相同key的数据放到同一个partition里面\n  - 5. Optionally, a list of preferred locations to compute each split on\n    **最优的位置**去计算，也就是**数据的本地性**。\n\n### transform和action算子\nTransformation不会立即执行，只是记录这些操作 \naction会执行前边的Transformation所有操作\n\n**transform算子得到新的RDD**\n常见transform算子：map（针对每个元素）、mapPartitions（针对partition）、filter、**flatMap**、union、**distinct**、**groupByKey**、**reduceByKey**、sortByKey、join\n\n**action得到值**\n常见action算子：reduce、count、collect、saveAsTextFile、countByKey、foreach\n\n[常见算子](https://my.oschina.net/134596/blog/3037972)\n[算子操作示例](https://blog.csdn.net/huozi07/article/details/50133259)\n\n### Spark中有了RDD为什么还要有Dataframe和DataSet\nSparkSQL不支持RDD,支持DataFrame和dataSet\n\n\n### SparkShuffle过程\nshuffle发生在两个stage之间，\nshuffle中的概念：shuffleMapTask 和 ResultTask\n两种方式：**HashShuffleManager**和 **SortShuffleManager**\nHashShuffleManager分为改进之前和改进之后，改经前文件数task1*task2\n改进之后文件数core数*task2\nSortShuffleManager文件数：上游stage的task数量\n\n[shuffle参考文章](https://blog.csdn.net/quitozang/article/details/80904040)\n\n\n### Spark读取Kafka的两种方式及两者区别\n- 1.  Receiver-base：实时读取缓存到内存中\n先把数据从kafka中读取出来，然后缓存在内存，再定时处理。如果这时候集群退出，而偏移量又没处理好的话，数据就丢掉了，存在程序失败丢失数据的可能，后在Spark 1.2时引入一个配置参数spark.streaming.receiver.writeAheadLog.enable以规避此风险。\n操作的类： **KafkaUtils.createStream**\nzookeeper维护offset\n- 2.  Direct：定时批量读取\nDirect方式无需Receiver读取数据，而是需要计算时再读取数据，所以Direct方式的数据消费对内存的要求不高，只需要考虑批量计算所需要的内存即可；另外batch任务堆积时，也不会影响数据堆积。\n  操作的类： **KafkaUtils.createDirectStream**\n  程序自己维护offset\n  \n\n![Kafka连接Spark两种方式.png](https://github.com/Dannymeng/bigdata_note/blob/master/picture/Kafka%E7%BB%93%E5%90%88Streaming%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png?raw=true)\n\n### Spark性能调优\n1. **小分区合并的问题**\n由于程序中过度使用filter算子或者使用不当，都会造成大量的小分区出现。\n\n**带来的问题就是：任务处理的数据量很小，反复地切换任务所消耗的资源反而会带来很大的系统开销。**\n\n**解决方案：使用重分区函数coalesce进行数据紧缩、减少分区数并设置shuffle=true保证任务是并行计算的**（或者使用**repartition**重分区，其底层使用的是coalesce并设置Shuffle=true）\n\n2. **数据倾斜问题**\n典型的场景是：大量的数据被分配到小部分节点计算，而其他大部分节点却只计算小部分数据。\n\n\n\n\n\n[Spark性能调优](https://www.cnblogs.com/jchubby/p/5449373.html)\n\n\n## Hadoop篇\n\n### Yarn的认识\nYarn是hadoop2.X之后出现的Hadoop 资源管理器，它是一个**资源管理系统和调度平台**。\n\nYARN 是一个资源管理、任务调度的框架，主要包含三大模块：ResourceManager（RM）、\nNodeManager（NM）、ApplicationMaster（AM）。\n- ResourceManager 负责所有资源的监控、分配和管理；\n- ApplicationMaster 负责每一个具体应用程序的调度和协调；\n- NodeManager 负责每一个节点的维护。\n对于所有的 applications，RM 拥有绝对的控制权和对资源的分配权。而每个 AM 则会和\nRM 协商资源，同时和 NodeManager 通信来执行和监控 task。\n\n![Yarn.png](https://github.com/Dannymeng/bigdata_note/blob/master/picture/Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true)\n\n[参考文章](https://blog.csdn.net/qq_33624952/article/details/79341034)\n\n## Zookeeper篇\n\n### Zookeeper简单介绍\nZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态.\n\n分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n### 为什么zookeeper集群的节点数是奇数个\n首先介绍zookeeper选举的规则：leader选举，要求**可用节点数量 > 总节点数量/2**\n设置奇数个的目的：\n**1、防止由脑裂造成的集群不可用**\n**2、在容错能力相同的情况下，奇数台更节省资源。**\n\n[zookeeper为什么是奇数个集群 参考文章](https://blog.csdn.net/u010476994/article/details/79806041)\n\n## Hive篇\n\n### Hive是什么\n Hive 是基于 Hadoop 构建的一套数据仓库分析系统，用来进行数据提取转化加载（ETL）（利用mapreduce挖掘hdfs上的数据）\n \n[Hive参考文章](https://blog.csdn.net/francis_lzz/article/details/77720827)\n\n\n\n",[[1556292144791,["28447@DESKTOP-BE7HQ26",[[1,623,"\n"]],[622,622],[623,623]]],[1556292145042,["28447@DESKTOP-BE7HQ26",[[1,624,"\n"]],[623,623],[624,624]]],[1556292146127,["28447@DESKTOP-BE7HQ26",[[1,624,"## "]],[624,624],[627,627]]],[1556292146849,["28447@DESKTOP-BE7HQ26",[[-1,626," "]],[627,627],[626,626]]],[1556292150786,["28447@DESKTOP-BE7HQ26",[[1,626,"# Sparkyu"]],[626,626],[635,635]]],[1556292151482,["28447@DESKTOP-BE7HQ26",[[-1,633,"yu"]],[635,635],[633,633]]],[1556292157390,["28447@DESKTOP-BE7HQ26",[[1,633,"运行流程"]],[633,633],[637,637]]],[1556292157713,["28447@DESKTOP-BE7HQ26",[[1,638,"\n"]],[637,637],[638,638]]],[1556292158354,["28447@DESKTOP-BE7HQ26",[[1,639,"\n"]],[638,638],[639,639]]],[1556292167418,["28447@DESKTOP-BE7HQ26",[[1,638,"![](https://img-blog.csdn.net/20180816192305504?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xvdmVjaGVuZG9uZ3hpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)"]],[638,638],[813,813]]]],null,"28447@DESKTOP-BE7HQ26"],["d3476318-81f5-48a1-9d26-08405eecf611",1556442694897,"# 面试题整理\n\n<!-- GFM-TOC -->\n* [一、Spark篇](#Spark篇)\n    * [Spark任务提交流程](#Spark任务提交流程)\n    * [Spark RDD的五大特性](#RDD的五大特性)\n    * [Transform和Action算子](#Transform和Action算子) \n    * [Spark中有了RDD，为什么还要有Dataframe和DataSet](#Spark中有了RDD为什么还要有Dataframe和DataSet)\n    * [Spark shuffle过程](#SparkShuffle过程)\n    * [Spark读取Kafka的两种方式，两者区别](#Spark读取Kafka的两种方式及两者区别)\n    * [Spark性能调优](#Spark性能调优)\n * [二、Hadoop篇](#Hadoop篇)\n     * [Yarn的认识](#Yarn的认识)\n * [三、Zookeeper篇](#Zookeeper篇)\n   * [Zookeeper简单介绍](#Zookeeper简单介绍)\n   * [为什么zookeeper集群的节点数是奇数个](#为什么zookeeper集群的节点数是奇数个)\n * [四、Hive篇](#Hive篇) \n   * [Hive是什么](#Hive是什么)\n<!-- GFM-TOC -->\n\n## Spark篇\n\n### Spark运行流程\n![](https://img-blog.csdn.net/20180816192305504?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xvdmVjaGVuZG9uZ3hpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n### Spark任务提交流程\n- 1.SparkContext提交作业\n- 2.DAGScheduler拆分stage\n- 3.生成作业\n- 4.提交任务集\n- 5.提交任务\n- 6.执行任务\n- 7.跟踪任务\n\n\n![Spark任务提交流程图.jpg](https://github.com/Dannymeng/bigdata_note/blob/master/picture/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%80%BB%E4%BD%93%E8%AF%A0%E9%87%8A.jpg?raw=true)\n\n\n### RDD的五大特性\n   - 1. A list of partitions\n   RDD是一个由多个partition（某个节点里的某一片连续的数据）组成的的list；将数据加载为RDD时，一般会遵循数据的本地性（一般一个hdfs里的block会加载为一个partition）\n   - 2. A function for computing each split\n   RDD的每个partition上面都会有function，也就是函数应用，其作用是实现RDD之间partition的转换。\n   - 3. A list of dependencies on other RDDs\n    RDD会记录它的依赖 ，为了容错（重算，cache，checkpoint），也就是说在内存中的RDD操作时出错或丢失会进行重算。\n  - 4. Optionally,a Partitioner for Key-value RDDs\n  可选项，如果RDD里面存的数据是key-value形式，则可以传递一个自定义的Partitioner进行重新分区，例如这里自定义的Partitioner是基于key进行分区，那则会将不同RDD里面的相同key的数据放到同一个partition里面\n  - 5. Optionally, a list of preferred locations to compute each split on\n    **最优的位置**去计算，也就是**数据的本地性**。\n\n### transform和action算子\nTransformation不会立即执行，只是记录这些操作 \naction会执行前边的Transformation所有操作\n\n**transform算子得到新的RDD**\n常见transform算子：map（针对每个元素）、mapPartitions（针对partition）、filter、**flatMap**、union、**distinct**、**groupByKey**、**reduceByKey**、sortByKey、join\n\n**action得到值**\n常见action算子：reduce、count、collect、saveAsTextFile、countByKey、foreach\n\n[常见算子](https://my.oschina.net/134596/blog/3037972)\n[算子操作示例](https://blog.csdn.net/huozi07/article/details/50133259)\n\n### Spark中有了RDD为什么还要有Dataframe和DataSet\nSparkSQL不支持RDD,支持DataFrame和dataSet\n\n\n### SparkShuffle过程\nshuffle发生在两个stage之间，\nshuffle中的概念：shuffleMapTask 和 ResultTask\n两种方式：**HashShuffleManager**和 **SortShuffleManager**\nHashShuffleManager分为改进之前和改进之后，改经前文件数task1*task2\n改进之后文件数core数*task2\nSortShuffleManager文件数：上游stage的task数量\n\n[shuffle参考文章](https://blog.csdn.net/quitozang/article/details/80904040)\n\n\n### Spark读取Kafka的两种方式及两者区别\n- 1.  Receiver-base：实时读取缓存到内存中\n先把数据从kafka中读取出来，然后缓存在内存，再定时处理。如果这时候集群退出，而偏移量又没处理好的话，数据就丢掉了，存在程序失败丢失数据的可能，后在Spark 1.2时引入一个配置参数spark.streaming.receiver.writeAheadLog.enable以规避此风险。\n操作的类： **KafkaUtils.createStream**\nzookeeper维护offset\n- 2.  Direct：定时批量读取\nDirect方式无需Receiver读取数据，而是需要计算时再读取数据，所以Direct方式的数据消费对内存的要求不高，只需要考虑批量计算所需要的内存即可；另外batch任务堆积时，也不会影响数据堆积。\n  操作的类： **KafkaUtils.createDirectStream**\n  程序自己维护offset\n  \n\n![Kafka连接Spark两种方式.png](https://github.com/Dannymeng/bigdata_note/blob/master/picture/Kafka%E7%BB%93%E5%90%88Streaming%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F.png?raw=true)\n\n### Spark性能调优\n1. **小分区合并的问题**\n由于程序中过度使用filter算子或者使用不当，都会造成大量的小分区出现。\n\n**带来的问题就是：任务处理的数据量很小，反复地切换任务所消耗的资源反而会带来很大的系统开销。**\n\n**解决方案：使用重分区函数coalesce进行数据紧缩、减少分区数并设置shuffle=true保证任务是并行计算的**（或者使用**repartition**重分区，其底层使用的是coalesce并设置Shuffle=true）\n\n2. **数据倾斜问题**\n典型的场景是：大量的数据被分配到小部分节点计算，而其他大部分节点却只计算小部分数据。\n\n\n\n\n\n[Spark性能调优](https://www.cnblogs.com/jchubby/p/5449373.html)\n\n\n## Hadoop篇\n\n### Yarn的认识\nYarn是hadoop2.X之后出现的Hadoop 资源管理器，它是一个**资源管理系统和调度平台**。\n\nYARN 是一个资源管理、任务调度的框架，主要包含三大模块：ResourceManager（RM）、\nNodeManager（NM）、ApplicationMaster（AM）。\n- ResourceManager 负责所有资源的监控、分配和管理；\n- ApplicationMaster 负责每一个具体应用程序的调度和协调；\n- NodeManager 负责每一个节点的维护。\n对于所有的 applications，RM 拥有绝对的控制权和对资源的分配权。而每个 AM 则会和\nRM 协商资源，同时和 NodeManager 通信来执行和监控 task。\n\n![Yarn.png](https://github.com/Dannymeng/bigdata_note/blob/master/picture/Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true)\n\n[参考文章](https://blog.csdn.net/qq_33624952/article/details/79341034)\n\n## Zookeeper篇\n\n### Zookeeper简单介绍\nZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态.\n\n分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n### 为什么zookeeper集群的节点数是奇数个\n首先介绍zookeeper选举的规则：leader选举，要求**可用节点数量 > 总节点数量/2**\n设置奇数个的目的：\n**1、防止由脑裂造成的集群不可用**\n**2、在容错能力相同的情况下，奇数台更节省资源。**\n\n[zookeeper为什么是奇数个集群 参考文章](https://blog.csdn.net/u010476994/article/details/79806041)\n\n## Hive篇\n\n### Hive是什么\n Hive 是基于 Hadoop 构建的一套数据仓库分析系统，用来进行数据提取转化加载（ETL）（利用mapreduce挖掘hdfs上的数据）\n \n[Hive参考文章](https://blog.csdn.net/francis_lzz/article/details/77720827)\n\n\n\n",[[1556442652589,["28447@DESKTOP-BE7HQ26",[[1,3569,"\n"]],[3567,3567],[3568,3568]]],[1556442652789,["28447@DESKTOP-BE7HQ26",[[1,3570,"\n"]],[3568,3568],[3569,3569]]],[1556442656574,["28447@DESKTOP-BE7HQ26",[[1,3569,"### Marp"]],[3569,3569],[3577,3577]]],[1556442657132,["28447@DESKTOP-BE7HQ26",[[-1,3575,"rp"]],[3577,3577],[3575,3575]]],[1556442660028,["28447@DESKTOP-BE7HQ26",[[1,3575,"pReduce "]],[3575,3575],[3583,3583]]],[1556442660486,["28447@DESKTOP-BE7HQ26",[[-1,3582," "]],[3583,3583],[3582,3582]]],[1556442662090,["28447@DESKTOP-BE7HQ26",[[1,3582,"原理"]],[3582,3582],[3584,3584]]],[1556442662333,["28447@DESKTOP-BE7HQ26",[[1,3586,"\n"]],[3584,3584],[3585,3585]]],[1556442675612,["28447@DESKTOP-BE7HQ26",[[1,3585,"1、读取文件系统，转化为《》"]],[3585,3585],[3599,3599]]],[1556442676388,["28447@DESKTOP-BE7HQ26",[[-1,3597,"《》"]],[3599,3599],[3597,3597]]],[1556442677205,["28447@DESKTOP-BE7HQ26",[[1,3597,"<>"]],[3597,3597],[3599,3599]]],[1556442679261,["28447@DESKTOP-BE7HQ26",[[1,3598,"k,V"]],[3598,3598],[3601,3601]]],[1556442680997,["28447@DESKTOP-BE7HQ26",[[-1,3598,"k"]],[3599,3599],[3598,3598]]],[1556442681508,["28447@DESKTOP-BE7HQ26",[[1,3598,"K"]],[3598,3598],[3599,3599]]],[1556442683147,["28447@DESKTOP-BE7HQ26",[[1,3602,","]],[3602,3602],[3603,3603]]],[1556442684403,["28447@DESKTOP-BE7HQ26",[[-1,3602,","]],[3603,3603],[3602,3602]]],[1556442686828,["28447@DESKTOP-BE7HQ26",[[1,3602,"，Kwei"]],[3602,3602],[3607,3607]]],[1556442687547,["28447@DESKTOP-BE7HQ26",[[-1,3604,"wei"]],[3607,3607],[3604,3604]]],[1556442691322,["28447@DESKTOP-BE7HQ26",[[1,3604,"为偏移量"]],[3604,3604],[3608,3608]]],[1556442701315,["28447@DESKTOP-BE7HQ26",[[1,3610,"\n"]],[3608,3608],[3609,3609]]],[1556442709328,["28447@DESKTOP-BE7HQ26",[[1,3609,"2、根据map吹"]],[3609,3609],[3617,3617]]],[1556442709746,["28447@DESKTOP-BE7HQ26",[[-1,3616,"吹"]],[3617,3617],[3616,3616]]],[1556442720661,["28447@DESKTOP-BE7HQ26",[[1,3616,"处理业务，得到宁一个《"]],[3616,3616],[3627,3627]]],[1556442722165,["28447@DESKTOP-BE7HQ26",[[-1,3623,"宁一个《"]],[3627,3627],[3623,3623]]],[1556442722964,["28447@DESKTOP-BE7HQ26",[[1,3623,"ni"]],[3623,3623],[3625,3625]]],[1556442723593,["28447@DESKTOP-BE7HQ26",[[-1,3623,"ni"]],[3625,3625],[3623,3623]]],[1556442725501,["28447@DESKTOP-BE7HQ26",[[1,3623,"宁一个"]],[3623,3623],[3626,3626]]],[1556442726795,["28447@DESKTOP-BE7HQ26",[[-1,3623,"宁一个"]],[3626,3626],[3623,3623]]],[1556442727389,["28447@DESKTOP-BE7HQ26",[[1,3623,"n"]],[3623,3623],[3624,3624]]],[1556442727801,["28447@DESKTOP-BE7HQ26",[[-1,3623,"n"]],[3624,3624],[3623,3623]]],[1556442734653,["28447@DESKTOP-BE7HQ26",[[1,3623,"另一个<>"]],[3623,3623],[3628,3628]]],[1556442735645,["28447@DESKTOP-BE7HQ26",[[1,3627,"k"]],[3627,3627],[3628,3628]]],[1556442736524,["28447@DESKTOP-BE7HQ26",[[-1,3627,"k"]],[3628,3628],[3627,3627]]],[1556442738290,["28447@DESKTOP-BE7HQ26",[[1,3627,"K,V"]],[3627,3627],[3630,3630]]],[1556442739889,["28447@DESKTOP-BE7HQ26",[[1,3633,"\n"]],[3631,3631],[3632,3632]]],[1556442741401,["28447@DESKTOP-BE7HQ26",[[1,3632,"3\\"]],[3632,3632],[3634,3634]]],[1556442742010,["28447@DESKTOP-BE7HQ26",[[-1,3633,"\\"]],[3634,3634],[3633,3633]]],[1556442745425,["28447@DESKTOP-BE7HQ26",[[1,3633,"、对<>"]],[3633,3633],[3637,3637]]],[1556442747685,["28447@DESKTOP-BE7HQ26",[[1,3636,"K,V"]],[3636,3636],[3639,3639]]],[1556442750198,["28447@DESKTOP-BE7HQ26",[[1,3640,"fe"]],[3640,3640],[3642,3642]]],[1556442750801,["28447@DESKTOP-BE7HQ26",[[-1,3640,"fe"]],[3642,3642],[3640,3640]]],[1556442752094,["28447@DESKTOP-BE7HQ26",[[1,3640,"分组"]],[3640,3640],[3642,3642]]],[1556442757437,["28447@DESKTOP-BE7HQ26",[[1,3644,"\n"]],[3642,3642],[3643,3643]]],[1556442770159,["28447@DESKTOP-BE7HQ26",[[1,3643,"4、以组为单位规约"]],[3643,3643],[3652,3652]]],[1556442771142,["28447@DESKTOP-BE7HQ26",[[-1,3650,"规约"]],[3652,3652],[3650,3650]]],[1556442773435,["28447@DESKTOP-BE7HQ26",[[1,3650,"归约"]],[3650,3650],[3652,3652]]],[1556442774093,["28447@DESKTOP-BE7HQ26",[[1,3654,"\n"]],[3652,3652],[3653,3653]]],[1556442786685,["28447@DESKTOP-BE7HQ26",[[1,3653,"5、迭代，将最终产生的<>"]],[3653,3653],[3666,3666]]],[1556442789984,["28447@DESKTOP-BE7HQ26",[[1,3665,"K,V"]],[3665,3665],[3668,3668]]],[1556442793281,["28447@DESKTOP-BE7HQ26",[[1,3669,"保存到"]],[3669,3669],[3672,3672]]],[1556442794204,["28447@DESKTOP-BE7HQ26",[[-1,3671,"到"]],[3672,3672],[3671,3671]]],[1556442798926,["28447@DESKTOP-BE7HQ26",[[1,3671,"到输出中"]],[3671,3671],[3675,3675]]],[1556442804977,["28447@DESKTOP-BE7HQ26",[[1,3585,"- "]],[3585,3585],[3587,3587]]],[1556442806428,["28447@DESKTOP-BE7HQ26",[[1,3611,"="]],[3611,3611],[3612,3612]]],[1556442806747,["28447@DESKTOP-BE7HQ26",[[-1,3611,"="]],[3612,3612],[3611,3611]]],[1556442807345,["28447@DESKTOP-BE7HQ26",[[1,3611,"- "]],[3611,3611],[3613,3613]]],[1556442809286,["28447@DESKTOP-BE7HQ26",[[1,3636,"- "]],[3636,3636],[3638,3638]]],[1556442810546,["28447@DESKTOP-BE7HQ26",[[1,3649,"- "]],[3649,3649],[3651,3651]]],[1556442811837,["28447@DESKTOP-BE7HQ26",[[1,3661,"- "]],[3661,3661],[3663,3663]]],[1556457251606,["28447@DESKTOP-BE7HQ26",[[1,899,"Tasks"]],[899,899],[904,904]]],[1556457251997,["28447@DESKTOP-BE7HQ26",[[-1,903,"s"]],[904,904],[903,903]]],[1556457255516,["28447@DESKTOP-BE7HQ26",[[1,903,"Scheduler"]],[903,903],[912,912]]],[1556457465814,["28447@DESKTOP-BE7HQ26",[[-1,1190,"的"]],[1190,1190],[1189,1189]]]],null,"28447@DESKTOP-BE7HQ26"]]}