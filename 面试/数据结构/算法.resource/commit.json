{"compress":true,"commitItems":[["c5e4391f-7f98-4aa0-b57a-24fcddab0fa7",1554533237006,"",[[1554533178533,["28447@DESKTOP-BE7HQ26",[[1,0,"# 算法\n\n\n\n"]],[0,0],[7,7]]],[1554533188172,["28447@DESKTOP-BE7HQ26",[[-1,7,"\n"],[1,8,"#"]],[7,7],[8,8]]],[1554533190253,["28447@DESKTOP-BE7HQ26",[[1,8,"# 直接"]],[8,8],[12,12]]],[1554533192383,["28447@DESKTOP-BE7HQ26",[[-1,10,"直接"]],[12,12],[10,10]]],[1554533194587,["28447@DESKTOP-BE7HQ26",[[1,10,"插入排序"]],[10,10],[14,14]]],[1554533195067,["28447@DESKTOP-BE7HQ26",[[1,14,"\n\n"]],[14,14],[15,15]]],[1554533271555,["28447@DESKTOP-BE7HQ26",[[1,16,"\n"]],[15,15],[16,16]]],[1554533272400,["28447@DESKTOP-BE7HQ26",[[-1,16,"\n"],[1,17,"*"]],[16,16],[17,17]]],[1554533272594,["28447@DESKTOP-BE7HQ26",[[1,17,"***"]],[17,17],[18,18]]],[1554533275623,["28447@DESKTOP-BE7HQ26",[[1,18,"思想"]],[18,18],[20,20]]],[1554533277979,["28447@DESKTOP-BE7HQ26",[[1,15,"****"]],[15,15],[17,17]]],[1554533280847,["28447@DESKTOP-BE7HQ26",[[1,26,"\n\n"]],[26,26],[27,27]]],[1554533281973,["28447@DESKTOP-BE7HQ26",[[-1,27,"\n"],[1,28,"鞍山酒店"]],[27,27],[31,31]]],[1554533282956,["28447@DESKTOP-BE7HQ26",[[-1,28,"山酒店"]],[31,31],[28,28]]],[1554533283188,["28447@DESKTOP-BE7HQ26",[[-1,27,"鞍"],[1,28,"\n"]],[28,28],[27,27]]],[1554533285803,["28447@DESKTOP-BE7HQ26",[[-1,15,"****"]],[15,19],[15,15]]],[1554533286353,["28447@DESKTOP-BE7HQ26",[[1,6,"****"]],[6,6],[10,10]]],[1554533289555,["28447@DESKTOP-BE7HQ26",[[1,24,"："]],[24,24],[25,25]]],[1554533290561,["28447@DESKTOP-BE7HQ26",[[1,29,"\n"]],[27,27],[28,28]]],[1554533292472,["28447@DESKTOP-BE7HQ26",[[1,27," "]],[27,27],[28,28]]],[1554533297188,["28447@DESKTOP-BE7HQ26",[[1,29,"每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左侧数组依然有序。"]],[29,29],[66,66]]],[1554533297416,["28447@DESKTOP-BE7HQ26",[[1,28,"每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左侧数组依然有序。"]],[28,28],[65,65]]],[1554533298021,["28447@DESKTOP-BE7HQ26",[[-1,28,"每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左侧数组依然有序。"]],[65,65],[28,28]]],[1554533299839,["28447@DESKTOP-BE7HQ26",[[-1,28,"\n"]],[29,29],[28,28]]],[1554533708541,["28447@DESKTOP-BE7HQ26",[[1,67,"\n"]],[66,66],[67,67]]],[1554533891983,["28447@DESKTOP-BE7HQ26",[[-1,67,"\n"],[1,68,"·"]],[67,67],[68,68]]],[1554533892382,["28447@DESKTOP-BE7HQ26",[[1,68,"··"]],[68,68],[70,70]]],[1554533892892,["28447@DESKTOP-BE7HQ26",[[-1,68,"··"]],[70,70],[68,68]]],[1554533893085,["28447@DESKTOP-BE7HQ26",[[-1,67,"·"],[1,68,"\n"]],[68,68],[67,67]]],[1554533893437,["28447@DESKTOP-BE7HQ26",[[-1,67,"\n"],[1,68,"`"]],[67,67],[68,68]]],[1554533893840,["28447@DESKTOP-BE7HQ26",[[1,68,"``"]],[68,68],[70,70]]],[1554533893867,["28447@DESKTOP-BE7HQ26",[[1,70,"language\n```\n"]],[70,70],[70,78]]],[1554533894695,["28447@DESKTOP-BE7HQ26",[[-1,70,"language"],[1,78,"j"]],[70,78],[71,71]]],[1554533895068,["28447@DESKTOP-BE7HQ26",[[1,71,"ava"]],[71,71],[74,74]]],[1554533895480,["28447@DESKTOP-BE7HQ26",[[1,75,"\n"]],[74,74],[75,75]]],[1554535163787,["28447@DESKTOP-BE7HQ26",[[1,75,"public static void insertsort(int[] num) {\n\n    int i, j;\n for (i = 1; i < num.length; i++) {\n        //记录j\n  for (j = i - 1; j >= 0; j--) {\n            if (num[j] < num[i])\n                break;\n  }\n        int temp = num[i];\n  //将j与i之间的元素整体后移一个单位\n  for (int k = i - 1; k > j; k--) {\n            num[k + 1] = num[k];\n  }\n        num[j + 1] = temp;\n  }\n}"]],[75,75],[430,430]]],[1554535168210,["28447@DESKTOP-BE7HQ26",[[1,134,"  "]],[134,134],[136,136]]],[1554535173140,["28447@DESKTOP-BE7HQ26",[[1,187,"    "]],[186,186],[190,190]]],[1554535175205,["28447@DESKTOP-BE7HQ26",[[1,136,"  "]],[135,135],[137,137]]],[1554535177557,["28447@DESKTOP-BE7HQ26",[[-1,137," "]],[137,137],[136,136]]],[1554535192594,["28447@DESKTOP-BE7HQ26",[[-1,229,"      "]],[235,235],[229,229]]],[1554535199495,["28447@DESKTOP-BE7HQ26",[[-1,172,"        "]],[180,180],[172,172]]],[1554535202064,["28447@DESKTOP-BE7HQ26",[[1,172,"      "]],[172,172],[178,178]]],[1554535206455,["28447@DESKTOP-BE7HQ26",[[-1,258,"      "]],[264,264],[258,258]]],[1554535212623,["28447@DESKTOP-BE7HQ26",[[-1,275,"  "]],[277,277],[275,275]]],[1554535213949,["28447@DESKTOP-BE7HQ26",[[1,275,"  "]],[275,275],[277,277]]],[1554535216225,["28447@DESKTOP-BE7HQ26",[[-1,256,"  "]],[258,258],[256,256]]],[1554535222902,["28447@DESKTOP-BE7HQ26",[[-1,358,"      "]],[364,364],[358,358]]],[1554535224143,["28447@DESKTOP-BE7HQ26",[[-1,389,"  "]],[391,391],[389,389]]],[1554535230659,["28447@DESKTOP-BE7HQ26",[[1,418,"\n"]],[417,417],[418,418]]],[1554535231485,["28447@DESKTOP-BE7HQ26",[[-1,418,"\n"],[1,419,"/"]],[418,418],[419,419]]],[1554535231685,["28447@DESKTOP-BE7HQ26",[[1,419,"/"]],[419,419],[420,420]]],[1554535232921,["28447@DESKTOP-BE7HQ26",[[-1,419,"/"]],[420,420],[419,419]]],[1554535233141,["28447@DESKTOP-BE7HQ26",[[-1,418,"/"],[1,419,"\n"]],[419,419],[418,418]]],[1554535233702,["28447@DESKTOP-BE7HQ26",[[-1,418,"\n"],[1,419,"["]],[418,418],[419,419]]],[1554535234610,["28447@DESKTOP-BE7HQ26",[[1,419,"]["]],[419,419],[421,421]]],[1554535234633,["28447@DESKTOP-BE7HQ26",[[1,421,"reference-id]"]],[421,421],[421,433]]],[1554535243783,["28447@DESKTOP-BE7HQ26",[[-1,421,"reference-id"],[1,433,"https://www.cnblogs.com/skywang12345/p/3596881.html"]],[421,433],[472,472]]],[1554535247752,["28447@DESKTOP-BE7HQ26",[[-1,420,"["]],[421,421],[420,420]]],[1554535248782,["28447@DESKTOP-BE7HQ26",[[1,420,"("]],[420,420],[421,421]]],[1554535248807,["28447@DESKTOP-BE7HQ26",[[1,429,")https://"]],[421,421],[421,429]]],[1554535249992,["28447@DESKTOP-BE7HQ26",[[1,429,"www.cnblogs.com/skywang12345/p/3596881.html"]],[421,429],[472,472]]],[1554535252679,["28447@DESKTOP-BE7HQ26",[[-1,473,"https://www.cnblogs.com/skywang12345/p/3596881.html]"]],[473,525],[473,473]]],[1554535262173,["28447@DESKTOP-BE7HQ26",[[1,419,"插入排序参考文章"]],[419,419],[427,427]]],[1554535264421,["28447@DESKTOP-BE7HQ26",[[1,481,"\n\n"]],[481,481],[482,482]]],[1554535264594,["28447@DESKTOP-BE7HQ26",[[1,483,"\n"]],[482,482],[483,483]]],[1554535270739,["28447@DESKTOP-BE7HQ26",[[1,483,"****"]],[483,483],[487,487]]],[1554535271867,["28447@DESKTOP-BE7HQ26",[[1,488,"\n"]],[487,487],[488,488]]],[1554535272051,["28447@DESKTOP-BE7HQ26",[[1,489,"\n"]],[488,488],[489,489]]],[1554535384659,["28447@DESKTOP-BE7HQ26",[[1,490,"\n"]],[487,487],[488,488]]],[1554535384841,["28447@DESKTOP-BE7HQ26",[[1,491,"\n"]],[488,488],[489,489]]],[1554535390706,["28447@DESKTOP-BE7HQ26",[[1,488,"希尔排序"]],[488,488],[492,492]]],[1554535391086,["28447@DESKTOP-BE7HQ26",[[1,496,"\n"]],[492,492],[493,493]]],[1554535393211,["28447@DESKTOP-BE7HQ26",[[-1,488,"希尔排序"]],[488,492],[488,488]]],[1554535394303,["28447@DESKTOP-BE7HQ26",[[1,488,"****"]],[488,488],[490,490]]],[1554535394618,["28447@DESKTOP-BE7HQ26",[[1,490,"希尔排序"]],[490,490],[494,494]]],[1554535396780,["28447@DESKTOP-BE7HQ26",[[1,501,"\n"]],[496,496],[497,497]]],[1554535398586,["28447@DESKTOP-BE7HQ26",[[1,502,"\n"]],[497,497],[498,498]]],[1554535401731,["28447@DESKTOP-BE7HQ26",[[1,497,"思想："]],[497,497],[500,500]]],[1554535407564,["28447@DESKTOP-BE7HQ26",[[-1,488,"**"]],[488,490],[488,488]]],[1554535409344,["28447@DESKTOP-BE7HQ26",[[1,488,"## "]],[488,488],[491,491]]],[1554535411012,["28447@DESKTOP-BE7HQ26",[[-1,495,"**"]],[497,497],[495,495]]],[1554535413260,["28447@DESKTOP-BE7HQ26",[[-1,496,"思想："]],[496,499],[496,496]]],[1554535414247,["28447@DESKTOP-BE7HQ26",[[1,496,"****"]],[496,496],[498,498]]],[1554535414480,["28447@DESKTOP-BE7HQ26",[[1,498,"思想："]],[498,498],[501,501]]],[1554535417002,["28447@DESKTOP-BE7HQ26",[[1,503," "]],[503,503],[504,504]]],[1554535445006,["28447@DESKTOP-BE7HQ26",[[1,505,"先将待排序序列的数组元素分成多个子序列，使得每个子序列的元素个数相对较少，然后对各个子序列分别进行直接插入排序，待整个待排序序列“基本有序”后，再对所有元素进行一次直接插入排序"]],[505,505],[593,593]]],[1554535446994,["28447@DESKTOP-BE7HQ26",[[-1,504,"\n"]],[505,505],[504,504]]],[1554535449463,["28447@DESKTOP-BE7HQ26",[[1,597,"\n"]],[592,592],[593,593]]],[1554535449656,["28447@DESKTOP-BE7HQ26",[[1,598,"\n"]],[593,593],[594,594]]],[1554535449810,["28447@DESKTOP-BE7HQ26",[[1,599,"\n"]],[594,594],[595,595]]],[1554535452815,["28447@DESKTOP-BE7HQ26",[[1,594,"```"]],[594,594],[597,597]]],[1554535452848,["28447@DESKTOP-BE7HQ26",[[1,597,"language\n```\n"]],[597,597],[597,605]]],[1554535453660,["28447@DESKTOP-BE7HQ26",[[-1,597,"language"],[1,605,"j"]],[597,605],[598,598]]],[1554535454074,["28447@DESKTOP-BE7HQ26",[[1,598,"ava"]],[598,598],[601,601]]],[1554535454566,["28447@DESKTOP-BE7HQ26",[[1,602,"\n"]],[601,601],[602,602]]],[1554535737012,["28447@DESKTOP-BE7HQ26",[[-1,136," "]],[137,137],[136,136]]],[1554535738073,["28447@DESKTOP-BE7HQ26",[[-1,122," "]],[123,123],[122,122]]],[1554541105627,["28447@DESKTOP-BE7HQ26",[[1,600,"public static void shellSort(int[] num) {\n    int n = num.length;\n  //gap:步长\n  for (int gap = n / 2; gap > 0; gap /= 2) {\n        //共gap组，对每组都执行插入排序\n  for (int i = 0; i < gap; i++) {\n            for (int j = i + gap; j < n; j += gap) {\n                //如果a[j] < a[j-gap],寻找a[j]的正确位置，并将后面的数据的位置都往后移动\n  if (num[j - gap] > num[j]) {\n                    int tmp = num[j];\n int k = j - gap;\n while (k >= 0 && num[k] > tmp) {\n                        num[k + gap] = num[k];\n  k -= gap;\n  }\n                    num[k + gap] = tmp;\n  }\n            }\n        }\n    }\n}"]],[600,600],[1159,1159]]],[1554541121850,["28447@DESKTOP-BE7HQ26",[[-1,791,"    "]],[795,795],[791,791]]],[1554541124458,["28447@DESKTOP-BE7HQ26",[[-1,840,"        "]],[848,848],[840,840]]],[1554541127562,["28447@DESKTOP-BE7HQ26",[[1,890,"      "]],[890,890],[896,896]]],[1554541131102,["28447@DESKTOP-BE7HQ26",[[-1,932,"             "]],[945,945],[932,932]]],[1554541131886,["28447@DESKTOP-BE7HQ26",[[1,932," "]],[932,932],[933,933]]],[1554541134409,["28447@DESKTOP-BE7HQ26",[[1,952,"        "]],[952,952],[960,960]]],[1554541135871,["28447@DESKTOP-BE7HQ26",[[-1,959," "]],[960,960],[959,959]]],[1554541139968,["28447@DESKTOP-BE7HQ26",[[1,977,"        "]],[977,977],[985,985]]],[1554541140700,["28447@DESKTOP-BE7HQ26",[[1,751,"  "]],[750,750],[752,752]]],[1554541143069,["28447@DESKTOP-BE7HQ26",[[-1,986," "]],[987,987],[986,986]]],[1554541148546,["28447@DESKTOP-BE7HQ26",[[-1,1027,"                "]],[1043,1043],[1027,1027]]],[1554541149327,["28447@DESKTOP-BE7HQ26",[[1,1027,"  "]],[1027,1027],[1029,1029]]],[1554541152579,["28447@DESKTOP-BE7HQ26",[[1,1054,"        "]],[1053,1053],[1061,1061]]],[1554541153328,["28447@DESKTOP-BE7HQ26",[[1,1029,"  "]],[1029,1029],[1031,1031]]],[1554541154162,["28447@DESKTOP-BE7HQ26",[[1,1064,"  "]],[1062,1062],[1064,1064]]],[1554541158053,["28447@DESKTOP-BE7HQ26",[[1,1078,"       "]],[1077,1078],[1085,1085]]],[1554541159818,["28447@DESKTOP-BE7HQ26",[[-1,1084," "]],[1085,1085],[1084,1084]]],[1554541162249,["28447@DESKTOP-BE7HQ26",[[-1,1098,"        "]],[1098,1106],[1098,1098]]],[1554541169450,["28447@DESKTOP-BE7HQ26",[[1,1120,"        "]],[1120,1120],[1128,1128]]],[1554541181899,["28447@DESKTOP-BE7HQ26",[[-1,1094,"    "]],[1098,1098],[1094,1094]]],[1554541198416,["28447@DESKTOP-BE7HQ26",[[-1,1135,"   "]],[1138,1138],[1135,1135]]],[1554541204200,["28447@DESKTOP-BE7HQ26",[[1,935,"  "]],[935,935],[937,937]]],[1554541205065,["28447@DESKTOP-BE7HQ26",[[1,963,"  "]],[963,963],[965,965]]],[1554541206102,["28447@DESKTOP-BE7HQ26",[[1,990,"    "]],[990,990],[994,994]]],[1554541209203,["28447@DESKTOP-BE7HQ26",[[-1,992,"  "]],[994,994],[992,992]]],[1554541210631,["28447@DESKTOP-BE7HQ26",[[1,1090,"  "]],[1089,1089],[1091,1091]]],[1554541212576,["28447@DESKTOP-BE7HQ26",[[1,1102,"  "]],[1102,1102],[1104,1104]]],[1554541216102,["28447@DESKTOP-BE7HQ26",[[-1,1133," "]],[1134,1134],[1133,1133]]],[1554541221322,["28447@DESKTOP-BE7HQ26",[[1,842,"  "]],[842,842],[844,844]]],[1554541222545,["28447@DESKTOP-BE7HQ26",[[1,900,"  "]],[900,900],[902,902]]],[1554541223513,["28447@DESKTOP-BE7HQ26",[[1,941,"  "]],[940,940],[942,942]]],[1554541224104,["28447@DESKTOP-BE7HQ26",[[1,971,"  "]],[970,970],[972,972]]],[1554541224738,["28447@DESKTOP-BE7HQ26",[[1,1000,"  "]],[998,998],[1000,1000]]],[1554541225280,["28447@DESKTOP-BE7HQ26",[[1,1047,"  "]],[1044,1044],[1046,1046]]],[1554541225847,["28447@DESKTOP-BE7HQ26",[[1,1084,"  "]],[1081,1081],[1083,1083]]],[1554541226400,["28447@DESKTOP-BE7HQ26",[[1,1106,"  "]],[1104,1104],[1106,1106]]],[1554541227074,["28447@DESKTOP-BE7HQ26",[[1,1120,"  "]],[1119,1119],[1121,1121]]],[1554541227898,["28447@DESKTOP-BE7HQ26",[[1,1151,"  "]],[1149,1149],[1151,1151]]],[1554541236932,["28447@DESKTOP-BE7HQ26",[[-1,1173," "]],[1174,1174],[1173,1173]]],[1554541238418,["28447@DESKTOP-BE7HQ26",[[-1,1178," "]],[1179,1179],[1178,1178]]],[1554541240245,["28447@DESKTOP-BE7HQ26",[[-1,1172," "]],[1173,1173],[1172,1172]]],[1554541257321,["28447@DESKTOP-BE7HQ26",[[1,1185,"【"]],[1185,1185],[1186,1186]]],[1554541258087,["28447@DESKTOP-BE7HQ26",[[-1,1185,"【"]],[1186,1186],[1185,1185]]],[1554541259991,["28447@DESKTOP-BE7HQ26",[[1,1185,"[]("]],[1185,1185],[1188,1188]]],[1554541260016,["28447@DESKTOP-BE7HQ26",[[1,1188,"https://)"]],[1188,1188],[1188,1196]]],[1554541260602,["28447@DESKTOP-BE7HQ26",[[1,1188,"public static void s"],[1,1189,"ellSor"],[1,1190,"(in"],[1,1191,"[] num) {\n    int n = num.length;\n  //ga"],[-1,1192,"s"],[1,1194,"步长\n  for (int gap = n / 2; gap > 0; gap /= 2) {\n        "],[1,1196,"共gap组，对每组都执行插入排序\n  for (int i = 0; i < gap; i++) {\n            for (int j = i + gap; j < n; j += gap) {\n                //如果a[j] < a[j-gap],寻找a[j]的正确位置，并将后面的数据的位置都往后移动\n  if (num[j - gap] > num[j]) {\n                    int tmp = num[j];\n int k = j - gap;\n while (k >= 0 && num[k] > tmp) {\n                        num[k + gap] = num[k];\n  k -= gap;\n  }\n                    num[k + gap] = tmp;\n  }\n            }\n        }\n    }\n}"]],[1188,1196],[1747,1747]]],[1554541261740,["28447@DESKTOP-BE7HQ26",[[-1,1188,"public static void s"],[-1,1209,"ellSor"],[-1,1216,"(in"],[-1,1220,"[] num) {\n    int n = num.length;\n  //ga"],[1,1261,"s"],[-1,1262,"步长\n  for (int gap = n / 2; gap > 0; gap /= 2) {\n        "],[-1,1320,"共gap组，对每组都执行插入排序\n  for (int i = 0; i < gap; i++) {\n            for (int j = i + gap; j < n; j += gap) {\n                //如果a[j] < a[j-gap],寻找a[j]的正确位置，并将后面的数据的位置都往后移动\n  if (num[j - gap] > num[j]) {\n                    int tmp = num[j];\n int k = j - gap;\n while (k >= 0 && num[k] > tmp) {\n                        num[k + gap] = num[k];\n  k -= gap;\n  }\n                    num[k + gap] = tmp;\n  }\n            }\n        }\n    }\n}"]],[1747,1747],[1188,1196]]],[1554541280081,["28447@DESKTOP-BE7HQ26",[[1,1196,"blog.csdn.net/qq_37592492/article/details/81157153"]],[1188,1196],[1246,1246]]],[1554541292458,["28447@DESKTOP-BE7HQ26",[[1,1186,"希尔排序参考文章"]],[1186,1186],[1194,1194]]],[1554541297464,["28447@DESKTOP-BE7HQ26",[[1,1185,"\n"]],[1185,1185],[1186,1186]]],[1554541406148,["28447@DESKTOP-BE7HQ26",[[1,1258,"···===="]],[1258,1258],[1263,1263]]],[1554541407213,["28447@DESKTOP-BE7HQ26",[[-1,1258,"···=="]],[1263,1263],[1258,1258]]],[1554541410566,["28447@DESKTOP-BE7HQ26",[[1,1260,"=="]],[1260,1260],[1262,1262]]],[1554541411842,["28447@DESKTOP-BE7HQ26",[[1,1266,"\n"]],[1262,1262],[1263,1263]]],[1554541412450,["28447@DESKTOP-BE7HQ26",[[-1,1266,"\n"]],[1263,1263],[1262,1262]]],[1554541413027,["28447@DESKTOP-BE7HQ26",[[-1,1260,"=="]],[1262,1262],[1260,1260]]],[1554541414460,["28447@DESKTOP-BE7HQ26",[[1,1260,"=="]],[1260,1260],[1262,1262]]],[1554541415630,["28447@DESKTOP-BE7HQ26",[[1,1260,"asd"]],[1260,1260],[1263,1263]]],[1554541418721,["28447@DESKTOP-BE7HQ26",[[-1,1268,"\n"]],[1266,1266],[1265,1265]]],[1554541420239,["28447@DESKTOP-BE7HQ26",[[-1,1258,"==asd=="]],[1265,1265],[1258,1258]]],[1554541421258,["28447@DESKTOP-BE7HQ26",[[1,1258,"****"]],[1258,1258],[1260,1260]]],[1554541423098,["28447@DESKTOP-BE7HQ26",[[1,1265,"\n"]],[1263,1263],[1264,1264]]],[1554541423701,["28447@DESKTOP-BE7HQ26",[[-1,1265,"\n"]],[1264,1264],[1263,1263]]],[1554541428996,["28447@DESKTOP-BE7HQ26",[[1,1263,"## gui"]],[1263,1263],[1269,1269]]],[1554541429881,["28447@DESKTOP-BE7HQ26",[[-1,1266,"gui"]],[1269,1269],[1266,1266]]],[1554541432887,["28447@DESKTOP-BE7HQ26",[[1,1266,"归并排序"]],[1266,1266],[1270,1270]]],[1554541433388,["28447@DESKTOP-BE7HQ26",[[1,1272,"\n"]],[1270,1270],[1271,1271]]],[1554541439279,["28447@DESKTOP-BE7HQ26",[[1,1271,"****"]],[1271,1271],[1273,1273]]],[1554541441817,["28447@DESKTOP-BE7HQ26",[[1,1273,"思想： "]],[1273,1273],[1277,1277]]],[1554541442624,["28447@DESKTOP-BE7HQ26",[[-1,1276," "]],[1277,1277],[1276,1276]]],[1554561706236,["28447@DESKTOP-BE7HQ26",[[1,1280,"\n"]],[1278,1278],[1279,1279]]],[1554561706736,["28447@DESKTOP-BE7HQ26",[[1,1281,"\n"]],[1279,1279],[1280,1280]]],[1554561709199,["28447@DESKTOP-BE7HQ26",[[1,1280,"## "]],[1280,1280],[1283,1283]]],[1554561729504,["28447@DESKTOP-BE7HQ26",[[-1,1280,"## "]],[1280,1283],[1280,1280]]],[1554561731803,["28447@DESKTOP-BE7HQ26",[[1,11,"\n"]],[10,10],[11,11]]],[1554561731992,["28447@DESKTOP-BE7HQ26",[[1,12,"\n"]],[11,11],[12,12]]],[1554561732192,["28447@DESKTOP-BE7HQ26",[[1,13,"\n"]],[12,12],[13,13]]],[1554561738508,["28447@DESKTOP-BE7HQ26",[[1,11,"## 堆排序"]],[11,11],[17,17]]],[1554561739834,["28447@DESKTOP-BE7HQ26",[[1,20,"\n"]],[17,17],[18,18]]],[1554561761006,["28447@DESKTOP-BE7HQ26",[[1,18,"****"]],[18,18],[20,20]]],[1554561764318,["28447@DESKTOP-BE7HQ26",[[1,20,"思想："]],[20,20],[23,23]]],[1554561766024,["28447@DESKTOP-BE7HQ26",[[1,25," 堆排序是利用**堆**这种数据结构而设计的一种排序算法，堆排序是一种**选择排序，**它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构"]],[25,25],[114,114]]],[1554561776023,["28447@DESKTOP-BE7HQ26",[[1,115,"![](https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217182750011-675658660.png)"]],[115,115],[210,210]]],[1554561786297,["28447@DESKTOP-BE7HQ26",[[1,212,"\n"]],[210,210],[211,211]]],[1554561788545,["28447@DESKTOP-BE7HQ26",[[1,211,"```"]],[211,211],[214,214]]],[1554561790183,["28447@DESKTOP-BE7HQ26",[[1,216,"\n"]],[214,214],[215,215]]],[1554561790898,["28447@DESKTOP-BE7HQ26",[[1,215,"```"]],[215,215],[218,218]]],[1554561792446,["28447@DESKTOP-BE7HQ26",[[1,214,"java"]],[214,214],[218,218]]],[1554561792784,["28447@DESKTOP-BE7HQ26",[[1,219,"\n"]],[218,218],[219,219]]],[1554561818041,["28447@DESKTOP-BE7HQ26",[[1,219,"public class HeapSort {\n\n    public static void main(String[] args) {\n        int[] num = {4, 6, 11, 5, 9,13,12,7};\n  sort(num);\n for (int i : num) {\n            System.out.println(i);\n  }\n    }\n\n    public static void sort(int[] num) {\n\n        //1、创建大顶堆\n  for (int i = num.length / 2 - 1; i >= 0; i--) {\n            adjustHeap(num, i, num.length);\n  }\n        //2、调整堆结构+交换堆顶元素与末尾元素\n  for (int j = num.length - 1; j > 0; j--) {\n            swap(num, 0, j); //将第一个元素和末尾元素交换\n  adjustHeap(num, 0, j); //重新对堆进行调整\n  }\n    }\n\n    //调整大顶堆\n  public static void adjustHeap(int[] num, int i, int length) {\n        int temp = num[i]; //取出当前元素i\n  for (int k = i * 2 + 1; k < length; k = 2 * k + 1) {\n            if (k + 1 < length && num[k] < num[k + 1]) { //如果左子节点小于右子节点，k指向右子节点\n  k++;\n  }\n            if (temp < num[k]) {  //如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）\n  num[i] = num[k];\n  i = k;\n  } else {\n                break;\n  }\n        }\n        num[i] = temp;\n  }\n\n    //交换元素\n  public static void swap(int[] num, int a, int b) {\n        int temp = num[a];\n  num[a] = num[b];\n  num[b] = temp;\n  }\n\n}"]],[219,219],[1302,1302]]],[1554561826693,["28447@DESKTOP-BE7HQ26",[[1,337,"      "]],[337,337],[343,343]]],[1554561829533,["28447@DESKTOP-BE7HQ26",[[1,355,"        "]],[355,355],[363,363]]],[1554561830480,["28447@DESKTOP-BE7HQ26",[[-1,362," "]],[363,363],[362,362]]],[1554561832919,["28447@DESKTOP-BE7HQ26",[[1,419,"      "]],[419,419],[425,425]]],[1554561836163,["28447@DESKTOP-BE7HQ26",[[1,496,"      "]],[496,496],[502,502]]],[1554561839573,["28447@DESKTOP-BE7HQ26",[[1,596,"      "]],[596,596],[602,602]]],[1554561841341,["28447@DESKTOP-BE7HQ26",[[1,636,"      "]],[635,635],[641,641]]],[1554561844707,["28447@DESKTOP-BE7HQ26",[[1,732,"          "]],[731,731],[741,741]]],[1554561846236,["28447@DESKTOP-BE7HQ26",[[1,778,"      "]],[778,778],[784,784]]],[1554561847633,["28447@DESKTOP-BE7HQ26",[[1,790,"  "]],[788,788],[790,790]]],[1554561849550,["28447@DESKTOP-BE7HQ26",[[-1,791," "]],[792,792],[791,791]]],[1554561852056,["28447@DESKTOP-BE7HQ26",[[1,808,"    "]],[807,807],[811,811]]],[1554561852933,["28447@DESKTOP-BE7HQ26",[[-1,811," "]],[811,811],[810,810]]],[1554561856793,["28447@DESKTOP-BE7HQ26",[[1,912,"      "]],[911,911],[917,917]]],[1554561860232,["28447@DESKTOP-BE7HQ26",[[1,1053,"          "]],[1053,1053],[1063,1063]]],[1554561862134,["28447@DESKTOP-BE7HQ26",[[1,1070,"        "]],[1070,1070],[1078,1078]]],[1554561863093,["28447@DESKTOP-BE7HQ26",[[-1,1077," "]],[1078,1078],[1077,1077]]],[1554561865003,["28447@DESKTOP-BE7HQ26",[[-1,1088,"   "]],[1091,1091],[1088,1088]]],[1554561868334,["28447@DESKTOP-BE7HQ26",[[1,1144,"          "]],[1144,1144],[1154,1154]]],[1554561875736,["28447@DESKTOP-BE7HQ26",[[1,1173,"          "]],[1173,1173],[1183,1183]]],[1554561877419,["28447@DESKTOP-BE7HQ26",[[1,1192,"        "]],[1191,1191],[1199,1199]]],[1554561880603,["28447@DESKTOP-BE7HQ26",[[1,1234,"        "]],[1234,1234],[1242,1242]]],[1554561883355,["28447@DESKTOP-BE7HQ26",[[1,1354,"  "]],[1348,1348],[1350,1350]]],[1554561884340,["28447@DESKTOP-BE7HQ26",[[1,1295,"  "]],[1294,1294],[1296,1296]]],[1554561888223,["28447@DESKTOP-BE7HQ26",[[-1,1352,"      "]],[1358,1358],[1352,1352]]],[1554561889004,["28447@DESKTOP-BE7HQ26",[[1,1352,"  "]],[1352,1352],[1354,1354]]],[1554561890183,["28447@DESKTOP-BE7HQ26",[[1,1375,"    "]],[1374,1374],[1378,1378]]],[1554561891483,["28447@DESKTOP-BE7HQ26",[[1,1398,"    "]],[1398,1398],[1402,1402]]],[1554561894213,["28447@DESKTOP-BE7HQ26",[[-1,1421,"\n"]],[1421,1421],[1420,1420]]],[1554561899612,["28447@DESKTOP-BE7HQ26",[[1,1354,"  "]],[1353,1353],[1355,1355]]],[1554561900325,["28447@DESKTOP-BE7HQ26",[[1,1381," "]],[1380,1381],[1382,1382]]],[1554561901796,["28447@DESKTOP-BE7HQ26",[[1,1405,"  "]],[1404,1404],[1406,1406]]],[1554561902442,["28447@DESKTOP-BE7HQ26",[[1,1382,"  "]],[1381,1381],[1383,1383]]],[1554561903417,["28447@DESKTOP-BE7HQ26",[[-1,1383," "]],[1383,1383],[1382,1382]]],[1554561912364,["28447@DESKTOP-BE7HQ26",[[-1,1221,"    "]],[1225,1225],[1221,1221]]],[1554561920794,["28447@DESKTOP-BE7HQ26",[[1,11,"\n"]],[10,10],[11,11]]],[1554561920994,["28447@DESKTOP-BE7HQ26",[[1,12,"\n"]],[11,11],[12,12]]],[1554561924505,["28447@DESKTOP-BE7HQ26",[[1,11,"## kuai"]],[11,11],[18,18]]],[1554561925433,["28447@DESKTOP-BE7HQ26",[[-1,14,"kuai"]],[18,18],[14,14]]],[1554561932366,["28447@DESKTOP-BE7HQ26",[[1,14,"快速排序"]],[14,14],[18,18]]],[1554561932944,["28447@DESKTOP-BE7HQ26",[[1,20,"\n"]],[18,18],[19,19]]],[1554561933334,["28447@DESKTOP-BE7HQ26",[[1,21,"\n"]],[19,19],[20,20]]],[1554561934937,["28447@DESKTOP-BE7HQ26",[[1,19,"****"]],[19,19],[21,21]]],[1554561937335,["28447@DESKTOP-BE7HQ26",[[1,21,"思想："]],[21,21],[24,24]]],[1554561939748,["28447@DESKTOP-BE7HQ26",[[1,28,"****"]],[28,28],[30,30]]],[1554561942014,["28447@DESKTOP-BE7HQ26",[[1,28,"\n"]],[27,27],[28,28]]],[1554561942275,["28447@DESKTOP-BE7HQ26",[[1,29,"\n"]],[28,28],[29,29]]],[1554561946533,["28447@DESKTOP-BE7HQ26",[[1,1453,"****"]],[1453,1453],[1457,1457]]],[1554561948508,["28447@DESKTOP-BE7HQ26",[[1,1453,"\n"]],[1453,1453],[1454,1454]]],[1554561970965,["28447@DESKTOP-BE7HQ26",[[1,26,"选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），比基准值大的都在右边（一般是无序的）。一般选择序列的第一个元素"]],[26,26],[91,91]]],[1554561972054,["28447@DESKTOP-BE7HQ26",[[1,26," "]],[26,26],[27,27]]],[1554561973614,["28447@DESKTOP-BE7HQ26",[[1,92,"。"]],[92,92],[93,93]]],[1554561974634,["28447@DESKTOP-BE7HQ26",[[1,97,"\n"]],[93,93],[94,94]]],[1554561975347,["28447@DESKTOP-BE7HQ26",[[1,98,"\n"]],[94,94],[95,95]]],[1554561991885,["28447@DESKTOP-BE7HQ26",[[1,94,"```"]],[94,94],[97,97]]],[1554561992873,["28447@DESKTOP-BE7HQ26",[[1,102,"\n"]],[97,97],[98,98]]],[1554561993558,["28447@DESKTOP-BE7HQ26",[[1,98,"```"]],[98,98],[101,101]]],[1554561995384,["28447@DESKTOP-BE7HQ26",[[1,97,"java"]],[97,97],[101,101]]],[1554561995594,["28447@DESKTOP-BE7HQ26",[[1,102,"\n"]],[101,101],[102,102]]],[1554561996115,["28447@DESKTOP-BE7HQ26",[[1,102,"public static void quciksort(int[] num, int low, int high) {\n    int start = low;\n int end = high;\n int key = num[start];    //\n  while (start < end) {\n        //从后往前比较\n  while (start < end && num[end] > key)\n            end--;\n if (num[end] <= key) {\n            int temp = num[end];\n  num[end] = num[start];\n  num[start] = temp;\n  }\n\n        //从前往后比较\n  while (start < end && num[start] < key)\n            start++;\n if (num[start] >= key) {\n            int temp = num[start];\n  num[start] = num[end];\n  num[end] = temp;\n  }\n    }\n    if (start > low) quciksort(num, low, start - 1);\n if (end < high) quciksort(num, end + 1, high); }"]],[102,102],[735,735]]],[1554561999533,["28447@DESKTOP-BE7HQ26",[[1,185,"  "]],[185,185],[187,187]]],[1554562000222,["28447@DESKTOP-BE7HQ26",[[1,204,"  "]],[204,204],[206,206]]],[1554562000837,["28447@DESKTOP-BE7HQ26",[[1,236,"  "]],[235,235],[237,237]]],[1554562008165,["28447@DESKTOP-BE7HQ26",[[1,279,"      "]],[279,279],[284,284]]],[1554562011034,["28447@DESKTOP-BE7HQ26",[[1,343,"      "]],[343,343],[349,349]]],[1554562016052,["28447@DESKTOP-BE7HQ26",[[1,407,"          "]],[407,407],[417,417]]],[1554562018923,["28447@DESKTOP-BE7HQ26",[[1,442,"          "]],[442,442],[452,452]]],[1554562020734,["28447@DESKTOP-BE7HQ26",[[1,473,"      "]],[472,472],[478,478]]],[1554562023103,["28447@DESKTOP-BE7HQ26",[[-1,481,"\n"]],[481,481],[480,480]]],[1554562025514,["28447@DESKTOP-BE7HQ26",[[1,500,"      "]],[499,499],[505,505]]],[1554562028653,["28447@DESKTOP-BE7HQ26",[[1,568,"            "]],[568,568],[580,580]]],[1554562029623,["28447@DESKTOP-BE7HQ26",[[-1,579," "]],[580,580],[579,579]]],[1554562050764,["28447@DESKTOP-BE7HQ26",[[1,666,"    "]],[664,664],[668,668]]],[1554562052890,["28447@DESKTOP-BE7HQ26",[[1,641,"          "]],[639,639],[649,649]]],[1554562054602,["28447@DESKTOP-BE7HQ26",[[1,616,"  "]],[616,616],[618,618]]],[1554562055383,["28447@DESKTOP-BE7HQ26",[[1,653,"  "]],[652,652],[654,654]]],[1554562057392,["28447@DESKTOP-BE7HQ26",[[1,618,"  "]],[617,617],[619,619]]],[1554562057903,["28447@DESKTOP-BE7HQ26",[[1,657,"  "]],[657,657],[659,659]]],[1554562060868,["28447@DESKTOP-BE7HQ26",[[1,688,"          "]],[687,687],[697,697]]],[1554562062813,["28447@DESKTOP-BE7HQ26",[[1,717,"          "]],[716,716],[726,726]]],[1554562064752,["28447@DESKTOP-BE7HQ26",[[1,733,"      "]],[732,732],[738,738]]],[1554562066360,["28447@DESKTOP-BE7HQ26",[[1,745,"    "]],[745,745],[749,749]]],[1554562075335,["28447@DESKTOP-BE7HQ26",[[-1,737,"  "]],[739,739],[737,737]]],[1554562077085,["28447@DESKTOP-BE7HQ26",[[1,797,"  "]],[796,796],[798,798]]],[1554562077855,["28447@DESKTOP-BE7HQ26",[[1,799,"      "]],[798,798],[804,804]]],[1554562079334,["28447@DESKTOP-BE7HQ26",[[1,852,"\n         "]],[852,852],[862,862]]],[1554562081946,["28447@DESKTOP-BE7HQ26",[[-1,854,"        "]],[862,862],[854,854]]],[1554562082636,["28447@DESKTOP-BE7HQ26",[[-1,804," "]],[805,805],[804,804]]],[1554562105050,["28447@DESKTOP-BE7HQ26",[[1,859,"****"]],[859,859],[861,861]]],[1554562105747,["28447@DESKTOP-BE7HQ26",[[-1,861,"**"]],[861,861],[859,859]]],[1554562106353,["28447@DESKTOP-BE7HQ26",[[-1,858,"\n"]],[859,859],[858,858]]],[1554562107324,["28447@DESKTOP-BE7HQ26",[[1,858,"\n"]],[858,858],[859,859]]],[1554562108584,["28447@DESKTOP-BE7HQ26",[[-1,859,"**"]],[861,861],[859,859]]],[1554562110034,["28447@DESKTOP-BE7HQ26",[[1,859,"[]"]],[859,859],[861,861]]],[1554562111646,["28447@DESKTOP-BE7HQ26",[[1,860,"ka"]],[860,860],[862,862]]],[1554562112143,["28447@DESKTOP-BE7HQ26",[[-1,860,"ka"]],[862,862],[860,860]]],[1554562113857,["28447@DESKTOP-BE7HQ26",[[1,860,"快啊拍"]],[860,860],[863,863]]],[1554562114744,["28447@DESKTOP-BE7HQ26",[[-1,860,"快啊拍"]],[863,863],[860,860]]],[1554562117794,["28447@DESKTOP-BE7HQ26",[[1,860,"快拍"]],[860,860],[862,862]]],[1554562119143,["28447@DESKTOP-BE7HQ26",[[-1,861,"拍"]],[862,862],[861,861]]],[1554562126218,["28447@DESKTOP-BE7HQ26",[[1,861,"排参考文章"]],[861,861],[866,866]]],[1554562128693,["28447@DESKTOP-BE7HQ26",[[1,867,"("]],[867,867],[868,868]]],[1554562128720,["28447@DESKTOP-BE7HQ26",[[1,868,"https://)"]],[868,868],[868,876]]],[1554562130574,["28447@DESKTOP-BE7HQ26",[[-1,868,"https:"],[1,874,"public static void quciksort(int[] num, int low, int high) {\n    int start = low;\n int end = high;\n int key = num[start];    //\n  while (start < end) {\n        //从后往前比较\n  while (start < end && num[end] > key)\n            end--;\n if (num[end] <= key) {\n            int temp = num[end];\n  num[end] = num[start];\n  num[start] = temp;\n  }\n\n        "],[1,876,"从前往后比较\n  while (start < end && num[start] < key)\n            start++;\n if (num[start] >= key) {\n            int temp = num[start];\n  num[start] = num[end];\n  num[end] = temp;\n  }\n    }\n    if (start > low) quciksort(num, low, start - 1);\n if (end < high) quciksort(num, end + 1, high); }"]],[868,876],[1501,1501]]],[1554562131266,["28447@DESKTOP-BE7HQ26",[[1,868,"https:"],[-1,868,"public static void quciksort(int[] num, int low, int high) {\n    int start = low;\n int end = high;\n int key = num[start];    //\n  while (start < end) {\n        //从后往前比较\n  while (start < end && num[end] > key)\n            end--;\n if (num[end] <= key) {\n            int temp = num[end];\n  num[end] = num[start];\n  num[start] = temp;\n  }\n\n        "],[-1,1214,"从前往后比较\n  while (start < end && num[start] < key)\n            start++;\n if (num[start] >= key) {\n            int temp = num[start];\n  num[start] = num[end];\n  num[end] = temp;\n  }\n    }\n    if (start > low) quciksort(num, low, start - 1);\n if (end < high) quciksort(num, end + 1, high); }"]],[1501,1501],[868,876]]],[1554562138651,["28447@DESKTOP-BE7HQ26",[[1,876,"www.cnblogs.com/hjy9420/p/5032309.html"]],[868,876],[914,914]]],[1554562143104,["28447@DESKTOP-BE7HQ26",[[1,2343,"\n"]],[2342,2342],[2343,2343]]],[1554562144591,["28447@DESKTOP-BE7HQ26",[[1,2342,"[]"]],[2342,2342],[2344,2344]]],[1554562145760,["28447@DESKTOP-BE7HQ26",[[1,2343,"du"]],[2343,2343],[2345,2345]]],[1554562146253,["28447@DESKTOP-BE7HQ26",[[-1,2343,"du"]],[2345,2345],[2343,2343]]],[1554562152568,["28447@DESKTOP-BE7HQ26",[[1,2343,"堆排序参考文章"]],[2343,2343],[2350,2350]]],[1554562153663,["28447@DESKTOP-BE7HQ26",[[1,2351,"("]],[2351,2351],[2352,2352]]],[1554562153690,["28447@DESKTOP-BE7HQ26",[[1,2352,"https://)"]],[2352,2352],[2352,2360]]],[1554562162286,["28447@DESKTOP-BE7HQ26",[[1,2360,"www.cnblogs.com/chengxiao/p/6129630.html"]],[2352,2360],[2400,2400]]],[1554562251507,["28447@DESKTOP-BE7HQ26",[[1,5,"*****"]],[5,5],[8,8]]],[1554562252393,["28447@DESKTOP-BE7HQ26",[[-1,9,"*"]],[8,8],[7,7]]],[1554562253583,["28447@DESKTOP-BE7HQ26",[[1,10,"\n"]],[9,9],[10,10]]],[1554562254647,["28447@DESKTOP-BE7HQ26",[[1,10,"| 算法 | 稳定性 | 时间复杂度 | 空间复杂度 | 备注 |\n| :-: | :-: | :-: | :-: | :-: |\n| 选择排序 | × | N2 | 1 |  |\n| 冒泡排序 | √ | N2 | 1 |  |\n| 插入排序 | √ | N ~ N2 | 1 | 时间复杂度和初始顺序有关 |\n| 希尔排序 | × | N 的若干倍乘于递增序列的长度 | 1 | 改进版插入排序 |\n| 快速排序 | × | NlogN | logN |  |\n| 三向切分快速排序 | × | N ~ NlogN | logN | 适用于有大量重复主键 |\n| 归并排序 | √ | NlogN | N |  |\n| 堆排序 | × | NlogN | 1 | 无法利用局部性原理 |"]],[10,10],[355,355]]],[1554562300158,["28447@DESKTOP-BE7HQ26",[[1,356,"\n"]],[356,356],[357,357]]],[1554562302436,["28447@DESKTOP-BE7HQ26",[[1,5,"\n"]],[5,5],[6,6]]],[1554562392078,["28447@DESKTOP-BE7HQ26",[[1,358,"\n"]],[357,357],[358,358]]],[1554562393497,["28447@DESKTOP-BE7HQ26",[[1,359,"\n"]],[357,357],[358,358]]],[1554562393927,["28447@DESKTOP-BE7HQ26",[[1,358,"快速排序是最快的通用排序算法，它的内循环的指令很少，而且它还能利用缓存，因为它总是顺序地访问数据。它的运行时间近似为 ~cNlogN，这里的 c 比其它线性对数级别的排序算法都要小"]],[358,358],[448,448]]]],null,"28447@DESKTOP-BE7HQ26"],["ab113340-7012-4ce8-8994-602bcd935f00",1568774085533,"# 算法\n\n****\n| 算法 | 稳定性 | 时间复杂度 | 空间复杂度 | 备注 |\n| :-: | :-: | :-: | :-: | :-: |\n| 选择排序 | × | N2 | 1 |  |\n| 冒泡排序 | √ | N2 | 1 |  |\n| 插入排序 | √ | N ~ N2 | 1 | 时间复杂度和初始顺序有关 |\n| 希尔排序 | × | N 的若干倍乘于递增序列的长度 | 1 | 改进版插入排序 |\n| 快速排序 | × | NlogN | logN |  |\n| 三向切分快速排序 | × | N ~ NlogN | logN | 适用于有大量重复主键 |\n| 归并排序 | √ | NlogN | N |  |\n| 堆排序 | × | NlogN | 1 | 无法利用局部性原理 |\n\n快速排序是最快的通用排序算法，它的内循环的指令很少，而且它还能利用缓存，因为它总是顺序地访问数据。它的运行时间近似为 ~cNlogN，这里的 c 比其它线性对数级别的排序算法都要小\n\n****\n## 快速排序\n**思想：** 选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），比基准值大的都在右边（一般是无序的）。一般选择序列的第一个元素。\n```java\npublic static void quciksort(int[] num, int low, int high) {\n    int start = low;\n   int end = high;\n   int key = num[start];    //\n    while (start < end) {\n        //从后往前比较\n        while (start < end && num[end] > key)\n            end--;\n       if (num[end] <= key) {\n            int temp = num[end];\n            num[end] = num[start];\n            num[start] = temp;\n        }\n        //从前往后比较\n        while (start < end && num[start] < key)\n            start++;\n            if (num[start] >= key) {\n                int temp = num[start];\n                num[start] = num[end];\n                num[end] = temp;\n            }\n        }\n        if (start > low) quciksort(num, low, start - 1);\n        if (end < high) quciksort(num, end + 1, high); \n }\n```\n[快排参考文章](https://www.cnblogs.com/hjy9420/p/5032309.html)\n\n\n\n****\n## 堆排序\n**思想：** 堆排序是利用**堆**这种数据结构而设计的一种排序算法，堆排序是一种**选择排序，**它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构\n![](https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217182750011-675658660.png)\n```java\npublic class HeapSort {\n\n    public static void main(String[] args) {\n        int[] num = {4, 6, 11, 5, 9,13,12,7};\n        sort(num);\n        for (int i : num) {\n            System.out.println(i);\n        }\n    }\n\n    public static void sort(int[] num) {\n\n        //1、创建大顶堆\n        for (int i = num.length / 2 - 1; i >= 0; i--) {\n            adjustHeap(num, i, num.length);\n        }\n        //2、调整堆结构+交换堆顶元素与末尾元素\n        for (int j = num.length - 1; j > 0; j--) {\n            swap(num, 0, j); //将第一个元素和末尾元素交换\n            adjustHeap(num, 0, j); //重新对堆进行调整\n        }\n     }\n\n    //调整大顶堆\n     public static void adjustHeap(int[] num, int i, int length) {\n        int temp = num[i]; //取出当前元素i\n        for (int k = i * 2 + 1; k < length; k = 2 * k + 1) {\n            if (k + 1 < length && num[k] < num[k + 1]) { //如果左子节点小于右子节点，k指向右子节点\n            k++;\n         }\n         if (temp < num[k]) {  //如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）\n            num[i] = num[k];\n            i = k;\n          } else {\n            break;\n          }\n        }\n        num[i] = temp;\n  }\n\n    //交换元素\n    public static void swap(int[] num, int a, int b) {\n        int temp = num[a];\n        num[a] = num[b];\n        num[b] = temp;\n  }\n}\n```\n[堆排序参考文章](https://www.cnblogs.com/chengxiao/p/6129630.html)\n\n****\n## 插入排序\n\n**思想：** 每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左侧数组依然有序。\n\n```java\npublic static void insertsort(int[] num) {\n\n   int i, j;\n   for (i = 1; i < num.length; i++) {\n      //记录j\n      for (j = i - 1; j >= 0; j--) {\n      if (num[j] < num[i])\n        break;\n  }\n        int temp = num[i];\n  //将j与i之间的元素整体后移一个单位\n  for (int k = i - 1; k > j; k--) {\n      num[k + 1] = num[k];\n  }\n      num[j + 1] = temp;\n  }\n}\n```\n[插入排序参考文章](https://www.cnblogs.com/skywang12345/p/3596881.html)\n\n****\n## 希尔排序\n**思想：** 先将待排序序列的数组元素分成多个子序列，使得每个子序列的元素个数相对较少，然后对各个子序列分别进行直接插入排序，待整个待排序序列“基本有序”后，再对所有元素进行一次直接插入排序\n\n```java\npublic static void shellSort(int[] num) {\n    int n = num.length;\n  //gap:步长\n  for (int gap = n / 2; gap > 0; gap /= 2) {\n        //共gap组，对每组都执行插入排序\n    for (int i = 0; i < gap; i++) {\n        for (int j = i + gap; j < n; j += gap) {\n          //如果a[j] < a[j-gap],寻找a[j]的正确位置，并将后面的数据的位置都往后移动\n          if (num[j - gap] > num[j]) {\n            int tmp = num[j];\n            int k = j - gap;\n            while (k >= 0 && num[k] > tmp) {\n              num[k + gap] = num[k];\n              k -= gap;\n            }\n            num[k + gap] = tmp;\n           }\n         }\n      }\n   }\n}\n```\n\n[希尔排序参考文章](https://blog.csdn.net/qq_37592492/article/details/81157153)\n\n****\n## 归并排序\n**思想：**\n\n\n\n",[[1568774071100,["28447@DESKTOP-BE7HQ26",[[1,91,"……"]],[91,91],[93,93]]],[1568774072181,["28447@DESKTOP-BE7HQ26",[[-1,91,"……"]],[93,93],[91,91]]],[1568774073036,["28447@DESKTOP-BE7HQ26",[[1,91,"^"]],[91,91],[92,92]]],[1568774075984,["28447@DESKTOP-BE7HQ26",[[1,90,"$$"]],[90,90],[92,92]]],[1568774078003,["28447@DESKTOP-BE7HQ26",[[1,95,"$$"]],[95,95],[97,97]]],[1568774084047,["28447@DESKTOP-BE7HQ26",[[-1,96,"$"]],[97,97],[96,96]]],[1568774085649,["28447@DESKTOP-BE7HQ26",[[-1,91,"$"]],[92,92],[91,91]]],[1568774088268,["28447@DESKTOP-BE7HQ26",[[1,91,"$"]],[91,91],[92,92]]],[1568774090545,["28447@DESKTOP-BE7HQ26",[[1,96,"$"]],[96,96],[97,97]]]],null,"28447@DESKTOP-BE7HQ26"],["b8dc0d67-4fcf-486d-a5f7-fe5e62e1746f",1569253224639,"# 算法\n\n****\n| 算法 | 稳定性 | 时间复杂度 | 空间复杂度 | 备注 |\n| :-: | :-: | :-: | :-: | :-: |\n| 选择排序 | × | $$N^2$$ | 1 |  |\n| 冒泡排序 | √ | N2 | 1 |  |\n| 插入排序 | √ | N ~ N2 | 1 | 时间复杂度和初始顺序有关 |\n| 希尔排序 | × | N 的若干倍乘于递增序列的长度 | 1 | 改进版插入排序 |\n| 快速排序 | × | NlogN | logN |  |\n| 三向切分快速排序 | × | N ~ NlogN | logN | 适用于有大量重复主键 |\n| 归并排序 | √ | NlogN | N |  |\n| 堆排序 | × | NlogN | 1 | 无法利用局部性原理 |\n\n快速排序是最快的通用排序算法，它的内循环的指令很少，而且它还能利用缓存，因为它总是顺序地访问数据。它的运行时间近似为 ~cNlogN，这里的 c 比其它线性对数级别的排序算法都要小\n\n****\n## 快速排序\n**思想：** 选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），比基准值大的都在右边（一般是无序的）。一般选择序列的第一个元素。\n```java\npublic static void quciksort(int[] num, int low, int high) {\n    int start = low;\n   int end = high;\n   int key = num[start];    //\n    while (start < end) {\n        //从后往前比较\n        while (start < end && num[end] > key)\n            end--;\n       if (num[end] <= key) {\n            int temp = num[end];\n            num[end] = num[start];\n            num[start] = temp;\n        }\n        //从前往后比较\n        while (start < end && num[start] < key)\n            start++;\n            if (num[start] >= key) {\n                int temp = num[start];\n                num[start] = num[end];\n                num[end] = temp;\n            }\n        }\n        if (start > low) quciksort(num, low, start - 1);\n        if (end < high) quciksort(num, end + 1, high); \n }\n```\n[快排参考文章](https://www.cnblogs.com/hjy9420/p/5032309.html)\n\n\n\n****\n## 堆排序\n**思想：** 堆排序是利用**堆**这种数据结构而设计的一种排序算法，堆排序是一种**选择排序，**它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构\n![](https://images2015.cnblogs.com/blog/1024555/201612/1024555-20161217182750011-675658660.png)\n```java\npublic class HeapSort {\n\n    public static void main(String[] args) {\n        int[] num = {4, 6, 11, 5, 9,13,12,7};\n        sort(num);\n        for (int i : num) {\n            System.out.println(i);\n        }\n    }\n\n    public static void sort(int[] num) {\n\n        //1、创建大顶堆\n        for (int i = num.length / 2 - 1; i >= 0; i--) {\n            adjustHeap(num, i, num.length);\n        }\n        //2、调整堆结构+交换堆顶元素与末尾元素\n        for (int j = num.length - 1; j > 0; j--) {\n            swap(num, 0, j); //将第一个元素和末尾元素交换\n            adjustHeap(num, 0, j); //重新对堆进行调整\n        }\n     }\n\n    //调整大顶堆\n     public static void adjustHeap(int[] num, int i, int length) {\n        int temp = num[i]; //取出当前元素i\n        for (int k = i * 2 + 1; k < length; k = 2 * k + 1) {\n            if (k + 1 < length && num[k] < num[k + 1]) { //如果左子节点小于右子节点，k指向右子节点\n            k++;\n         }\n         if (temp < num[k]) {  //如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）\n            num[i] = num[k];\n            i = k;\n          } else {\n            break;\n          }\n        }\n        num[i] = temp;\n  }\n\n    //交换元素\n    public static void swap(int[] num, int a, int b) {\n        int temp = num[a];\n        num[a] = num[b];\n        num[b] = temp;\n  }\n}\n```\n[堆排序参考文章](https://www.cnblogs.com/chengxiao/p/6129630.html)\n\n****\n## 插入排序\n\n**思想：** 每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左侧数组依然有序。\n\n```java\npublic static void insertsort(int[] num) {\n\n   int i, j;\n   for (i = 1; i < num.length; i++) {\n      //记录j\n      for (j = i - 1; j >= 0; j--) {\n      if (num[j] < num[i])\n        break;\n  }\n        int temp = num[i];\n  //将j与i之间的元素整体后移一个单位\n  for (int k = i - 1; k > j; k--) {\n      num[k + 1] = num[k];\n  }\n      num[j + 1] = temp;\n  }\n}\n```\n[插入排序参考文章](https://www.cnblogs.com/skywang12345/p/3596881.html)\n\n****\n## 希尔排序\n**思想：** 先将待排序序列的数组元素分成多个子序列，使得每个子序列的元素个数相对较少，然后对各个子序列分别进行直接插入排序，待整个待排序序列“基本有序”后，再对所有元素进行一次直接插入排序\n\n```java\npublic static void shellSort(int[] num) {\n    int n = num.length;\n  //gap:步长\n  for (int gap = n / 2; gap > 0; gap /= 2) {\n        //共gap组，对每组都执行插入排序\n    for (int i = 0; i < gap; i++) {\n        for (int j = i + gap; j < n; j += gap) {\n          //如果a[j] < a[j-gap],寻找a[j]的正确位置，并将后面的数据的位置都往后移动\n          if (num[j - gap] > num[j]) {\n            int tmp = num[j];\n            int k = j - gap;\n            while (k >= 0 && num[k] > tmp) {\n              num[k + gap] = num[k];\n              k -= gap;\n            }\n            num[k + gap] = tmp;\n           }\n         }\n      }\n   }\n}\n```\n\n[希尔排序参考文章](https://blog.csdn.net/qq_37592492/article/details/81157153)\n\n****\n## 归并排序\n**思想：**\n\n\n\n",[[1569253176743,["28447@DESKTOP-BE7HQ26",[[-1,1428,"，"]],[1429,1429],[1428,1428]]],[1569253179779,["28447@DESKTOP-BE7HQ26",[[1,1428,"，"]],[1428,1428],[1429,1429]]],[1569253181232,["28447@DESKTOP-BE7HQ26",[[-1,1428,"，"]],[1429,1429],[1428,1428]]],[1569253183037,["28447@DESKTOP-BE7HQ26",[[1,1428,","]],[1428,1428],[1429,1429]]]],null,"28447@DESKTOP-BE7HQ26"]]}