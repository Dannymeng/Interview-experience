{"compress":true,"commitItems":[["3e98aee2-f441-4c6d-934e-6fce7b5ad6cb",1554652449679,"",[[1554652396867,["28447@DESKTOP-BE7HQ26",[[1,0,"# JVM面试题\n\n\n\n"]],[0,0],[11,11]]],[1554652437669,["28447@DESKTOP-BE7HQ26",[[-1,11,"\n"],[1,12,"【"]],[11,11],[12,12]]],[1554652437762,["28447@DESKTOP-BE7HQ26",[[1,12,"】"]],[12,12],[13,13]]],[1554652439242,["28447@DESKTOP-BE7HQ26",[[-1,12,"】"]],[13,13],[12,12]]],[1554652439432,["28447@DESKTOP-BE7HQ26",[[-1,11,"【"],[1,12,"\n"]],[12,12],[11,11]]],[1554652440192,["28447@DESKTOP-BE7HQ26",[[-1,11,"\n"],[1,12,"["]],[11,11],[12,12]]],[1554652440369,["28447@DESKTOP-BE7HQ26",[[1,12,"]"]],[12,12],[13,13]]],[1554652447862,["28447@DESKTOP-BE7HQ26",[[1,12,"JVM常见面试题"]],[12,12],[20,20]]],[1554652449162,["28447@DESKTOP-BE7HQ26",[[1,21,"("]],[21,21],[22,22]]],[1554652449184,["28447@DESKTOP-BE7HQ26",[[1,22,"https://)"]],[22,22],[22,30]]],[1554652449662,["28447@DESKTOP-BE7HQ26",[[1,30,"www.cnblogs.com/goody9807/p/6511480.html"]],[22,30],[70,70]]],[1554652451272,["28447@DESKTOP-BE7HQ26",[[1,71,"\n\n"]],[71,71],[72,72]]],[1554652451502,["28447@DESKTOP-BE7HQ26",[[1,73,"\n"]],[72,72],[73,73]]],[1554652453089,["28447@DESKTOP-BE7HQ26",[[-1,73,"\n"],[1,74,"*"]],[73,73],[74,74]]],[1554652453288,["28447@DESKTOP-BE7HQ26",[[1,74,"***"]],[74,74],[75,75]]],[1554652454962,["28447@DESKTOP-BE7HQ26",[[1,77,"\n\n"]],[77,77],[78,78]]],[1554652455562,["28447@DESKTOP-BE7HQ26",[[1,79,"\n"]],[78,78],[79,79]]],[1554652460994,["28447@DESKTOP-BE7HQ26",[[-1,79,"\n"],[1,80,"#"]],[79,79],[80,80]]],[1554652466698,["28447@DESKTOP-BE7HQ26",[[1,80,"# 1\\. "]],[80,80],[86,86]]],[1554655041164,["28447@DESKTOP-BE7HQ26",[[1,81,"# 11.JVM内存分哪几个区，每个区的作用是什么?\n\n> Java虚拟机主要分为以下一个区:\n> \n> **方法区：**\n>"],[1,86,"有时候也成为**永久代**，在该区内很少发生垃圾回收，但是并不代表不发生GC，在这里进行的GC主要是对方法区里的常量池和对类型的卸载\n> 2\\. 方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。\n> 3\\. 该区域是被线程共享的。\n> 4\\. 方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。\n> \n> **虚拟机栈:**\n> 1\\. 虚拟机栈也就是我们平常所称的**栈内存**,它为java方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。\n> 2\\. 虚拟机栈是线程私有的，它的生命周期与线程相同。\n> 3\\. 局部变量表里存储的是基本数据类型、returnAddress类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定\n> 4.操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式\n> 5.每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引用。\n> \n> **本地方法栈**\n> 本地方法栈和虚拟机栈类似，只不过本地方法栈为Native方法服务。\n> \n> **堆**\n> java堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。\n> \n> **程序计数器**\n> 内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个java虚拟机规范没有规定任何OOM情况的区域。\n\n### 12.如和判断一个对象是否存活?(或者GC对象的判定方法)\n\n> 判断一个对象是否存活有两种方法:\n> 1. **引用计数法**\n> 所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象时，就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对象没有被引用，也就是“死对象”,将会被垃圾回收.\n> 引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象A引用对象B，对象B又引用者对象A，那么此时A,B对象的引用计数器都不为零，也就造成无法完成垃圾回收，所以主流的虚拟机都没有采用这种算法。\n> \n> 2.**可达性算法**(引用链法)\n> 该算法的思想是：从一个被称为**GC Roots**的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。\n> 在java中可以作为GC Roots的对象有以下几种:\n> \n> *   虚拟机栈中引用的对象\n> *   方法区类静态属性引用的对象\n> *   方法区常量池引用的对象\n> *   本地方法栈JNI引用的对象\n> \n> 虽然这些算法可以判定一个对象是否能被回收，但是当满足上述条件时，一个对象比**不一定会被回收**。当一个对象不可达GC Root时，这个对象并 \n> **不会立马被回收**，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记\n> 如果对象在可达性分析中没有与GC Root的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行finalize()方法。当对象没有覆盖finalize()方法或者已被虚拟机调用过，那么就认为是没必要的。\n> 如果该对象有必要执行finalize()方法，那么这个对象将会放在一个称为F-Queue的对队列中，虚拟机会触发一个Finalize()线程去执行，此线程是低优先级的，并且虚拟机不会承诺一直等待它运行完，这是因为如果finalize()执行缓慢或者发生了死锁，那么就会造成F-Queue队列一直等待，造成了内存回收系统的崩溃。GC对处于F-Queue中的对象进行第二次被标记，这时，该对象将被移除”即将回收”集合，等待回收。\n\n### 13.简述java垃圾回收机制?\n\n> 在java中，程序员是不需要显示的去释放一个对象的内存的，而是由虚拟机自行执行。在JVM中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫面那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。\n\n### 14.java中垃圾收集的方法有哪些?\n\n> 1.  **标记-清除:**\n>     这是垃圾收集算法中最基础的，根据名字就可以知道，它的思想就是标记哪些要被回收的对象，然后统一回收。这种方法很简单，但是会有两个主要问题：1.效率不高，标记和清除的效率都很低；2.会产生大量不连续的内存碎片，导致以后程序在分配较大的对象时，由于没有充足的连续内存而提前触发一次GC动作。\n> 2.  **复制算法:**\n>     为了解决效率问题，复制算法将可用内存按容量划分为相等的两部分，然后每次只使用其中的一块，当一块内存用完时，就将还存活的对象复制到第二块内存上，然后一次性清楚完第一块内存，再将第二块上的对象复制到第一块。但是这种方式，内存的代价太高，每次基本上都要浪费一般的内存。\n>     于是将该算法进行了改进，内存区域不再是按照1：1去划分，而是将内存划分为8:1:1三部分，较大那份内存交Eden区，其余是两块较小的内存区叫Survior区。每次都会优先使用Eden区，若Eden区满，就将对象复制到第二块内存区上，然后清除Eden区，如果此时存活的对象太多，以至于Survivor不够时，会将这些对象通过分配担保机制复制到老年代中。(java堆又分为新生代和老年代)\n> 3.  **标记-整理**\n>     该算法主要是为了解决标记-清除，产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。\n> 4.  **分代收集** \n>     现在的虚拟机垃圾收集大多采用这种方式，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用**复制**算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用**标记-整理** 或者 **标记-清除**。\n\n### 15.java内存模型\n\n> java内存模型(JMM)是线程间通信的控制机制.JMM定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java内存模型的抽象示意图如下：\n> ![](http://cdn2.infoqstatic.com/statics_s1_20151006-0049u2/resource/articles/java-memory-model-1/zh/resources/11.png)\n> 从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：\n> 1\\. 首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。\n> 2\\. 然后，线程B到主内存中去读取线程A之前已更新过的共享变量。\n> 写的很好:http://www.infoq.com/cn/articles/java-memory-model-1\n\n### 16.java类加载过程?\n\n> java类加载需要经历一下7个过程：\n> **加载**\n> 加载时类加载的第一个过程，在这个阶段，将完成一下三件事情：\n> 1\\. 通过一个类的全限定名获取该类的二进制流。\n> 2\\. 将该二进制流中的静态存储结构转化为方法去运行时数据结构。 \n> 3\\. 在内存中生成该类的Class对象，作为该类的数据访问入口。\n> \n> **验证**\n> 验证的目的是为了确保Class文件的字节流中的信息不回危害到虚拟机.在该阶段主要完成以下四钟验证:\n> 1\\. 文件格式验证：验证字节流是否符合Class文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型.\n> 2\\. 元数据验证:对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。\n> 3\\. 字节码验证：是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如：方法中的类型转换是否正确，跳转指令是否正确等。\n> 4\\. 符号引用验证：这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。\n> \n> **准备**\n> 准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。\n\n```\n    public static int value=123;//在准备阶段value初始值为0 。在初始化阶段才会变为123 。\n\n```\n\n> **解析**\n> 该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。\n> \n> **初始化**\n> 初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。\n\n### 17\\. 简述java类加载机制?\n\n> 虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的java类型。\n\n### 18\\. 类加载器双亲委派模型机制？\n\n> 当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。\n\n### 19.什么是类加载器，类加载器有哪些?\n\n> 实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。\n> 主要有一下四种类加载器:\n> 1\\. 启动类加载器(Bootstrap ClassLoader)用来加载java核心类库，无法被java程序直接引用。\n> 2\\. 扩展类加载器(extensions class loader):它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。\n> 3\\. 系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。\n> 4\\. 用户自定义类加载器，通过继承 java.lang.ClassLoader类的方式实现。\n\n### **20.简述java内存分配与回收策率以及Minor GC和Major GC**\n\n> 1.  对象优先在堆的Eden区分配。\n> 2.  大对象直接进入老年代.\n> 3.  长期存活的对象将直接进入老年代.\n>     当Eden区没有足够的空间进行分配时，虚拟机会执行一次Minor GC.Minor Gc通常发生在新生代的Eden区，在这个区的对象生存期短，往往发生Gc的频率较高，回收速度比较快;Full Gc/Major GC 发生在老年代，一般情况下，触发老年代GC的时候不会触发Minor GC,但是通过配置，可以在Full GC之前进行一次Minor GC这样可以加快老年代的回收速度。"]],[79,86],[5270,5270]]]],null,"28447@DESKTOP-BE7HQ26"],["0c4a8caf-3d7c-46a7-941b-3c9d4a5ef7fb",1554655174462,"# JVM面试题\n\n\n[JVM常见面试题](https://www.cnblogs.com/goody9807/p/6511480.html)\n\n****\n\n### 11.JVM内存分哪几个区，每个区的作用是什么?\n\n> Java虚拟机主要分为以下一个区:\n> \n> **方法区：**\n> 1\\. 有时候也成为**永久代**，在该区内很少发生垃圾回收，但是并不代表不发生GC，在这里进行的GC主要是对方法区里的常量池和对类型的卸载\n> 2\\. 方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。\n> 3\\. 该区域是被线程共享的。\n> 4\\. 方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。\n> \n> **虚拟机栈:**\n> 1\\. 虚拟机栈也就是我们平常所称的**栈内存**,它为java方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。\n> 2\\. 虚拟机栈是线程私有的，它的生命周期与线程相同。\n> 3\\. 局部变量表里存储的是基本数据类型、returnAddress类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定\n> 4.操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式\n> 5.每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引用。\n> \n> **本地方法栈**\n> 本地方法栈和虚拟机栈类似，只不过本地方法栈为Native方法服务。\n> \n> **堆**\n> java堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。\n> \n> **程序计数器**\n> 内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个java虚拟机规范没有规定任何OOM情况的区域。\n\n### 12.如和判断一个对象是否存活?(或者GC对象的判定方法)\n\n> 判断一个对象是否存活有两种方法:\n> 1. **引用计数法**\n> 所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象时，就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对象没有被引用，也就是“死对象”,将会被垃圾回收.\n> 引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象A引用对象B，对象B又引用者对象A，那么此时A,B对象的引用计数器都不为零，也就造成无法完成垃圾回收，所以主流的虚拟机都没有采用这种算法。\n> \n> 2.**可达性算法**(引用链法)\n> 该算法的思想是：从一个被称为**GC Roots**的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。\n> 在java中可以作为GC Roots的对象有以下几种:\n> \n> *   虚拟机栈中引用的对象\n> *   方法区类静态属性引用的对象\n> *   方法区常量池引用的对象\n> *   本地方法栈JNI引用的对象\n> \n> 虽然这些算法可以判定一个对象是否能被回收，但是当满足上述条件时，一个对象比**不一定会被回收**。当一个对象不可达GC Root时，这个对象并 \n> **不会立马被回收**，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记\n> 如果对象在可达性分析中没有与GC Root的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行finalize()方法。当对象没有覆盖finalize()方法或者已被虚拟机调用过，那么就认为是没必要的。\n> 如果该对象有必要执行finalize()方法，那么这个对象将会放在一个称为F-Queue的对队列中，虚拟机会触发一个Finalize()线程去执行，此线程是低优先级的，并且虚拟机不会承诺一直等待它运行完，这是因为如果finalize()执行缓慢或者发生了死锁，那么就会造成F-Queue队列一直等待，造成了内存回收系统的崩溃。GC对处于F-Queue中的对象进行第二次被标记，这时，该对象将被移除”即将回收”集合，等待回收。\n\n### 13.简述java垃圾回收机制?\n\n> 在java中，程序员是不需要显示的去释放一个对象的内存的，而是由虚拟机自行执行。在JVM中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫面那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。\n\n### 14.java中垃圾收集的方法有哪些?\n\n> 1.  **标记-清除:**\n>     这是垃圾收集算法中最基础的，根据名字就可以知道，它的思想就是标记哪些要被回收的对象，然后统一回收。这种方法很简单，但是会有两个主要问题：1.效率不高，标记和清除的效率都很低；2.会产生大量不连续的内存碎片，导致以后程序在分配较大的对象时，由于没有充足的连续内存而提前触发一次GC动作。\n> 2.  **复制算法:**\n>     为了解决效率问题，复制算法将可用内存按容量划分为相等的两部分，然后每次只使用其中的一块，当一块内存用完时，就将还存活的对象复制到第二块内存上，然后一次性清楚完第一块内存，再将第二块上的对象复制到第一块。但是这种方式，内存的代价太高，每次基本上都要浪费一般的内存。\n>     于是将该算法进行了改进，内存区域不再是按照1：1去划分，而是将内存划分为8:1:1三部分，较大那份内存交Eden区，其余是两块较小的内存区叫Survior区。每次都会优先使用Eden区，若Eden区满，就将对象复制到第二块内存区上，然后清除Eden区，如果此时存活的对象太多，以至于Survivor不够时，会将这些对象通过分配担保机制复制到老年代中。(java堆又分为新生代和老年代)\n> 3.  **标记-整理**\n>     该算法主要是为了解决标记-清除，产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。\n> 4.  **分代收集** \n>     现在的虚拟机垃圾收集大多采用这种方式，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用**复制**算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用**标记-整理** 或者 **标记-清除**。\n\n### 15.java内存模型\n\n> java内存模型(JMM)是线程间通信的控制机制.JMM定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java内存模型的抽象示意图如下：\n> ![](http://cdn2.infoqstatic.com/statics_s1_20151006-0049u2/resource/articles/java-memory-model-1/zh/resources/11.png)\n> 从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：\n> 1\\. 首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。\n> 2\\. 然后，线程B到主内存中去读取线程A之前已更新过的共享变量。\n> 写的很好:http://www.infoq.com/cn/articles/java-memory-model-1\n\n### 16.java类加载过程?\n\n> java类加载需要经历一下7个过程：\n> **加载**\n> 加载时类加载的第一个过程，在这个阶段，将完成一下三件事情：\n> 1\\. 通过一个类的全限定名获取该类的二进制流。\n> 2\\. 将该二进制流中的静态存储结构转化为方法去运行时数据结构。 \n> 3\\. 在内存中生成该类的Class对象，作为该类的数据访问入口。\n> \n> **验证**\n> 验证的目的是为了确保Class文件的字节流中的信息不回危害到虚拟机.在该阶段主要完成以下四钟验证:\n> 1\\. 文件格式验证：验证字节流是否符合Class文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型.\n> 2\\. 元数据验证:对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。\n> 3\\. 字节码验证：是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如：方法中的类型转换是否正确，跳转指令是否正确等。\n> 4\\. 符号引用验证：这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。\n> \n> **准备**\n> 准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。\n\n```\n    public static int value=123;//在准备阶段value初始值为0 。在初始化阶段才会变为123 。\n\n```\n\n> **解析**\n> 该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。\n> \n> **初始化**\n> 初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。\n\n### 17\\. 简述java类加载机制?\n\n> 虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的java类型。\n\n### 18\\. 类加载器双亲委派模型机制？\n\n> 当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。\n\n### 19.什么是类加载器，类加载器有哪些?\n\n> 实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。\n> 主要有一下四种类加载器:\n> 1\\. 启动类加载器(Bootstrap ClassLoader)用来加载java核心类库，无法被java程序直接引用。\n> 2\\. 扩展类加载器(extensions class loader):它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。\n> 3\\. 系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。\n> 4\\. 用户自定义类加载器，通过继承 java.lang.ClassLoader类的方式实现。\n\n### **20.简述java内存分配与回收策率以及Minor GC和Major GC**\n\n> 1.  对象优先在堆的Eden区分配。\n> 2.  大对象直接进入老年代.\n> 3.  长期存活的对象将直接进入老年代.\n>     当Eden区没有足够的空间进行分配时，虚拟机会执行一次Minor GC.Minor Gc通常发生在新生代的Eden区，在这个区的对象生存期短，往往发生Gc的频率较高，回收速度比较快;Full Gc/Major GC 发生在老年代，一般情况下，触发老年代GC的时候不会触发Minor GC,但是通过配置，可以在Full GC之前进行一次Minor GC这样可以加快老年代的回收速度。",[[1554655157833,["28447@DESKTOP-BE7HQ26",[[-1,110," "]],[111,111],[110,110]]],[1554655161412,["28447@DESKTOP-BE7HQ26",[[1,110," "],[-1,128,""],[-1,1086," "],[1,1087," "],[-1,1588," "],[1,1589," "],[-1,2819," "],[1,2820," "],[-1,2956," 或者 "],[1,2960," 或者 "],[-1,3621," "],[1,3622," "]],[110,110],[111,111]]],[1554655163648,["28447@DESKTOP-BE7HQ26",[[-1,110," "],[1,129,""],[1,1087," "],[-1,1087," "],[1,1589," "],[-1,1589," "],[1,2820," "],[-1,2820," "],[1,2957," 或者 "],[-1,2957," 或者 "],[1,3622," "],[-1,3622," "]],[111,111],[110,110]]],[1554655164189,["28447@DESKTOP-BE7HQ26",[[1,110," "]],[110,110],[111,111]]],[1554655165408,["28447@DESKTOP-BE7HQ26",[[-1,109,"> "]],[111,111],[109,109]]],[1554655169524,["28447@DESKTOP-BE7HQ26",[[1,109,"  "]],[109,109],[111,111]]],[1554655170575,["28447@DESKTOP-BE7HQ26",[[-1,109,"  "]],[111,111],[109,109]]],[1554655170999,["28447@DESKTOP-BE7HQ26",[[1,109,"> "]],[109,109],[111,111]]]],null,"28447@DESKTOP-BE7HQ26"],["69148adc-ed83-415b-b133-d7e327d0ed55",1554689036051,"# JVM面试题\n\n\n[JVM常见面试题](https://www.cnblogs.com/goody9807/p/6511480.html)\n\n****\n\n### 11.JVM内存分哪几个区，每个区的作用是什么?\n\n> Java虚拟机主要分为以下一个区:\n> \n> **方法区：**\n> 1\\. 有时候也成为**永久代**，在该区内很少发生垃圾回收，但是并不代表不发生GC，在这里进行的GC主要是对方法区里的常量池和对类型的卸载\n> 2\\. 方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。\n> 3\\. 该区域是被线程共享的。\n> 4\\. 方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。\n> \n> **虚拟机栈:**\n> 1\\. 虚拟机栈也就是我们平常所称的**栈内存**,它为java方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。\n> 2\\. 虚拟机栈是线程私有的，它的生命周期与线程相同。\n> 3\\. 局部变量表里存储的是基本数据类型、returnAddress类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定\n> 4.操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式\n> 5.每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引用。\n> \n> **本地方法栈**\n> 本地方法栈和虚拟机栈类似，只不过本地方法栈为Native方法服务。\n> \n> **堆**\n> java堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。\n> \n> **程序计数器**\n> 内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个java虚拟机规范没有规定任何OOM情况的区域。\n\n### 12.如和判断一个对象是否存活?(或者GC对象的判定方法)\n\n> 判断一个对象是否存活有两种方法:\n> 1. **引用计数法**\n> 所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象时，就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对象没有被引用，也就是“死对象”,将会被垃圾回收.\n> 引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象A引用对象B，对象B又引用者对象A，那么此时A,B对象的引用计数器都不为零，也就造成无法完成垃圾回收，所以主流的虚拟机都没有采用这种算法。\n> \n> 2.**可达性算法**(引用链法)\n> 该算法的思想是：从一个被称为**GC Roots**的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。\n> 在java中可以作为GC Roots的对象有以下几种:\n> \n> *   虚拟机栈中引用的对象\n> *   方法区类静态属性引用的对象\n> *   方法区常量池引用的对象\n> *   本地方法栈JNI引用的对象\n> \n> 虽然这些算法可以判定一个对象是否能被回收，但是当满足上述条件时，一个对象比**不一定会被回收**。当一个对象不可达GC Root时，这个对象并 \n> **不会立马被回收**，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记\n> 如果对象在可达性分析中没有与GC Root的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行finalize()方法。当对象没有覆盖finalize()方法或者已被虚拟机调用过，那么就认为是没必要的。\n> 如果该对象有必要执行finalize()方法，那么这个对象将会放在一个称为F-Queue的对队列中，虚拟机会触发一个Finalize()线程去执行，此线程是低优先级的，并且虚拟机不会承诺一直等待它运行完，这是因为如果finalize()执行缓慢或者发生了死锁，那么就会造成F-Queue队列一直等待，造成了内存回收系统的崩溃。GC对处于F-Queue中的对象进行第二次被标记，这时，该对象将被移除”即将回收”集合，等待回收。\n\n### 13.简述java垃圾回收机制?\n\n> 在java中，程序员是不需要显示的去释放一个对象的内存的，而是由虚拟机自行执行。在JVM中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫面那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。\n\n### 14.java中垃圾收集的方法有哪些?\n\n> 1.  **标记-清除:**\n>     这是垃圾收集算法中最基础的，根据名字就可以知道，它的思想就是标记哪些要被回收的对象，然后统一回收。这种方法很简单，但是会有两个主要问题：1.效率不高，标记和清除的效率都很低；2.会产生大量不连续的内存碎片，导致以后程序在分配较大的对象时，由于没有充足的连续内存而提前触发一次GC动作。\n> 2.  **复制算法:**\n>     为了解决效率问题，复制算法将可用内存按容量划分为相等的两部分，然后每次只使用其中的一块，当一块内存用完时，就将还存活的对象复制到第二块内存上，然后一次性清楚完第一块内存，再将第二块上的对象复制到第一块。但是这种方式，内存的代价太高，每次基本上都要浪费一般的内存。\n>     于是将该算法进行了改进，内存区域不再是按照1：1去划分，而是将内存划分为8:1:1三部分，较大那份内存交Eden区，其余是两块较小的内存区叫Survior区。每次都会优先使用Eden区，若Eden区满，就将对象复制到第二块内存区上，然后清除Eden区，如果此时存活的对象太多，以至于Survivor不够时，会将这些对象通过分配担保机制复制到老年代中。(java堆又分为新生代和老年代)\n> 3.  **标记-整理**\n>     该算法主要是为了解决标记-清除，产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。\n> 4.  **分代收集** \n>     现在的虚拟机垃圾收集大多采用这种方式，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用**复制**算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用**标记-整理** 或者 **标记-清除**。\n\n### 15.java内存模型\n\n> java内存模型(JMM)是线程间通信的控制机制.JMM定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java内存模型的抽象示意图如下：\n> ![](http://cdn2.infoqstatic.com/statics_s1_20151006-0049u2/resource/articles/java-memory-model-1/zh/resources/11.png)\n> 从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：\n> 1\\. 首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。\n> 2\\. 然后，线程B到主内存中去读取线程A之前已更新过的共享变量。\n> 写的很好:http://www.infoq.com/cn/articles/java-memory-model-1\n\n### 16.java类加载过程?\n\n> java类加载需要经历一下7个过程：\n> **加载**\n> 加载时类加载的第一个过程，在这个阶段，将完成一下三件事情：\n> 1\\. 通过一个类的全限定名获取该类的二进制流。\n> 2\\. 将该二进制流中的静态存储结构转化为方法去运行时数据结构。 \n> 3\\. 在内存中生成该类的Class对象，作为该类的数据访问入口。\n> \n> **验证**\n> 验证的目的是为了确保Class文件的字节流中的信息不回危害到虚拟机.在该阶段主要完成以下四钟验证:\n> 1\\. 文件格式验证：验证字节流是否符合Class文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型.\n> 2\\. 元数据验证:对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。\n> 3\\. 字节码验证：是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如：方法中的类型转换是否正确，跳转指令是否正确等。\n> 4\\. 符号引用验证：这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。\n> \n> **准备**\n> 准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。\n\n```\n    public static int value=123;//在准备阶段value初始值为0 。在初始化阶段才会变为123 。\n\n```\n\n> **解析**\n> 该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。\n> \n> **初始化**\n> 初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。\n\n### 17\\. 简述java类加载机制?\n\n> 虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的java类型。\n\n### 18\\. 类加载器双亲委派模型机制？\n\n> 当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。\n\n### 19.什么是类加载器，类加载器有哪些?\n\n> 实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。\n> 主要有一下四种类加载器:\n> 1\\. 启动类加载器(Bootstrap ClassLoader)用来加载java核心类库，无法被java程序直接引用。\n> 2\\. 扩展类加载器(extensions class loader):它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。\n> 3\\. 系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。\n> 4\\. 用户自定义类加载器，通过继承 java.lang.ClassLoader类的方式实现。\n\n### **20.简述java内存分配与回收策率以及Minor GC和Major GC**\n\n> 1.  对象优先在堆的Eden区分配。\n> 2.  大对象直接进入老年代.\n> 3.  长期存活的对象将直接进入老年代.\n>     当Eden区没有足够的空间进行分配时，虚拟机会执行一次Minor GC.Minor Gc通常发生在新生代的Eden区，在这个区的对象生存期短，往往发生Gc的频率较高，回收速度比较快;Full Gc/Major GC 发生在老年代，一般情况下，触发老年代GC的时候不会触发Minor GC,但是通过配置，可以在Full GC之前进行一次Minor GC这样可以加快老年代的回收速度。",[[1554688983294,["28447@DESKTOP-BE7HQ26",[[-1,109,"> "]],[111,111],[109,109]]],[1554688984660,["28447@DESKTOP-BE7HQ26",[[-1,127,"> "]],[127,129],[127,127]]],[1554688985694,["28447@DESKTOP-BE7HQ26",[[-1,128,"> "]],[128,130],[128,128]]],[1554688992752,["28447@DESKTOP-BE7HQ26",[[-1,137,"> "]],[139,139],[137,137]]],[1554688995077,["28447@DESKTOP-BE7HQ26",[[-1,208,">"]],[209,209],[208,208]]],[1554688996500,["28447@DESKTOP-BE7HQ26",[[-1,259,">"]],[259,260],[259,259]]],[1554688997949,["28447@DESKTOP-BE7HQ26",[[-1,276,"> "]],[276,278],[276,276]]],[1554688999333,["28447@DESKTOP-BE7HQ26",[[-1,259," "]],[260,260],[259,259]]],[1554689003496,["28447@DESKTOP-BE7HQ26",[[-1,360,"> "]],[360,362],[360,360]]],[1554689004367,["28447@DESKTOP-BE7HQ26",[[-1,361,">"]],[362,362],[361,361]]],[1554689005620,["28447@DESKTOP-BE7HQ26",[[-1,372,"> "]],[372,374],[372,372]]],[1554689007637,["28447@DESKTOP-BE7HQ26",[[-1,457,">"]],[457,458],[457,457]]],[1554689008972,["28447@DESKTOP-BE7HQ26",[[-1,486,">"]],[486,487],[486,486]]],[1554689013413,["28447@DESKTOP-BE7HQ26",[[1,137,"-"],[-1,208,""],[-1,1067," "],[1,1068," "],[-1,1569," "],[1,1570," "],[-1,2800," "],[1,2801," "],[-1,2937," 或者 "],[1,2941," 或者 "],[-1,3602," "],[1,3603," "]],[137,137],[138,138]]],[1554689013515,["28447@DESKTOP-BE7HQ26",[[1,138," "]],[138,138],[139,139]]],[1554689015933,["28447@DESKTOP-BE7HQ26",[[1,211,"- "]],[211,211],[213,213]]],[1554689018485,["28447@DESKTOP-BE7HQ26",[[-1,210," "]],[211,211],[210,210]]],[1554689020948,["28447@DESKTOP-BE7HQ26",[[1,262,"- "]],[262,262],[264,264]]],[1554689022631,["28447@DESKTOP-BE7HQ26",[[1,280,"- "]],[280,280],[282,282]]],[1554689027183,["28447@DESKTOP-BE7HQ26",[[-1,617,"> "]],[617,619],[617,617]]],[1554689028372,["28447@DESKTOP-BE7HQ26",[[-1,673,">"]],[673,674],[673,673]]],[1554689030138,["28447@DESKTOP-BE7HQ26",[[-1,758,">"]],[758,759],[758,758]]],[1554689030933,["28447@DESKTOP-BE7HQ26",[[-1,760,">"]],[761,761],[760,760]]],[1554689031924,["28447@DESKTOP-BE7HQ26",[[-1,771,">"]],[771,772],[771,771]]],[1554689032858,["28447@DESKTOP-BE7HQ26",[[-1,807," "]],[808,808],[807,807]]],[1554689033613,["28447@DESKTOP-BE7HQ26",[[-1,808,"> **堆**\n>"]],[808,817],[808,808]]],[1554689037900,["28447@DESKTOP-BE7HQ26",[[-1,806,">"]],[806,807],[806,806]]],[1554689038748,["28447@DESKTOP-BE7HQ26",[[-1,807,"> "]],[807,809],[807,807]]],[1554689039778,["28447@DESKTOP-BE7HQ26",[[-1,813,">"]],[813,814],[813,813]]],[1554689040915,["28447@DESKTOP-BE7HQ26",[[-1,876,">"]],[877,877],[876,876]]],[1554689041861,["28447@DESKTOP-BE7HQ26",[[-1,878,">"]],[879,879],[878,878]]],[1554689043400,["28447@DESKTOP-BE7HQ26",[[-1,889,">"]],[889,890],[889,889]]],[1554689046795,["28447@DESKTOP-BE7HQ26",[[-1,1037,">"]],[1037,1038],[1037,1037]]],[1554689047526,["28447@DESKTOP-BE7HQ26",[[-1,1055,">"]],[1056,1056],[1055,1055]]],[1554689050109,["28447@DESKTOP-BE7HQ26",[[-1,1069,"> "]],[1071,1071],[1069,1069]]],[1554689051611,["28447@DESKTOP-BE7HQ26",[[1,1069,"> "]],[1069,1069],[1071,1071]]],[1554689052068,["28447@DESKTOP-BE7HQ26",[[1,1055,">"]],[1055,1055],[1056,1056]]],[1554689053767,["28447@DESKTOP-BE7HQ26",[[-1,1055,">"]],[1056,1056],[1055,1055]]],[1554689054734,["28447@DESKTOP-BE7HQ26",[[-1,1069,">"]],[1069,1070],[1069,1069]]],[1554689056036,["28447@DESKTOP-BE7HQ26",[[-1,1175,">"]],[1175,1176],[1175,1175]]],[1554689057366,["28447@DESKTOP-BE7HQ26",[[-1,1277," "]],[1278,1278],[1277,1277]]],[1554689058266,["28447@DESKTOP-BE7HQ26",[[-1,1279," "]],[1280,1280],[1279,1279]]],[1554689059107,["28447@DESKTOP-BE7HQ26",[[-1,1276,">"]],[1277,1277],[1276,1276]]],[1554689060153,["28447@DESKTOP-BE7HQ26",[[-1,1277,">"]],[1278,1278],[1277,1277]]],[1554689061380,["28447@DESKTOP-BE7HQ26",[[-1,1295,"> "]],[1295,1297],[1295,1295]]],[1554689063106,["28447@DESKTOP-BE7HQ26",[[-1,1369," "]],[1370,1370],[1369,1369]]],[1554689065030,["28447@DESKTOP-BE7HQ26",[[-1,1397,"> "]],[1397,1399],[1397,1397]]],[1554689065732,["28447@DESKTOP-BE7HQ26",[[-1,1368,">"]],[1369,1369],[1368,1368]]],[1554689066900,["28447@DESKTOP-BE7HQ26",[[-1,1397,"> "]],[1399,1399],[1397,1397]]],[1554689067834,["28447@DESKTOP-BE7HQ26",[[-1,1412,"> "]],[1414,1414],[1412,1412]]],[1554689068688,["28447@DESKTOP-BE7HQ26",[[-1,1430,">"]],[1431,1431],[1430,1430]]],[1554689068931,["28447@DESKTOP-BE7HQ26",[[-1,1429,"\n"]],[1430,1430],[1429,1429]]],[1554689070299,["28447@DESKTOP-BE7HQ26",[[-1,1446,"> "]],[1448,1448],[1446,1446]]],[1554689073927,["28447@DESKTOP-BE7HQ26",[[1,1430,"\n"]],[1430,1430],[1431,1431]]],[1554689081076,["28447@DESKTOP-BE7HQ26",[[-1,1465,"> "]],[1466,1467],[1465,1465]]],[1554689082312,["28447@DESKTOP-BE7HQ26",[[-1,1466,"> "]],[1468,1468],[1466,1466]]],[1554689084327,["28447@DESKTOP-BE7HQ26",[[-1,1539,">"]],[1540,1540],[1539,1539]]],[1554689085476,["28447@DESKTOP-BE7HQ26",[[-1,1581,">"]],[1582,1582],[1581,1581]]],[1554689086556,["28447@DESKTOP-BE7HQ26",[[-1,1697,">"]],[1698,1698],[1697,1697]]],[1554689088796,["28447@DESKTOP-BE7HQ26",[[-1,1934,"> "]],[1934,1936],[1934,1934]]],[1554689090870,["28447@DESKTOP-BE7HQ26",[[-1,2099,"> "]],[2101,2101],[2099,2099]]],[1554689091789,["28447@DESKTOP-BE7HQ26",[[-1,2114,"> "]],[2116,2116],[2114,2114]]],[1554689093587,["28447@DESKTOP-BE7HQ26",[[-1,2261,">"]],[2262,2262],[2261,2261]]],[1554689093821,["28447@DESKTOP-BE7HQ26",[[-1,2260,"\n"]],[2261,2261],[2260,2260]]],[1554689094655,["28447@DESKTOP-BE7HQ26",[[1,2260,"\n    "]],[2260,2260],[2265,2265]]],[1554689155008,[null,[[1,807,"**堆**\n j"],[1,813,"有"],[-1,867,">"],[-1,870,">"],[1,876,"计"],[1,878,"*"],[-1,880,">"],[1,889,"节"],[-1,1028,">"],[1,1037,"否"],[-1,1046,">"],[1,1055,"计"],[-1,1060,">"],[-1,1069," "],[1,1070,"就是"],[-1,1166,">"],[1,1175,"个"],[-1,1267,"> "],[-1,1270,"> "],[1,1276,"可达"],[1,1277,"算法"],[-1,1286,"> "],[1,1295,"：从"],[-1,1359,"> "],[1,1368,"以作"],[-1,1387,"> "],[-1,1390,"> "],[1,1396,"虚拟"],[1,1397,"栈中"],[-1,1403,"> "],[1,1412,"类静"],[1,1420," "],[-1,1421,"> "],[1,1429,"区常"],[-1,1430,"\n"],[-1,1438,"> "],[1,1447,"法栈"],[-1,1456,"> "],[-1,1459,"> "],[1,1465,"算法"],[1,1466,"以判"],[-1,1530,">"],[1,1539,"回"],[-1,1572,">"],[1,1581,"性"],[-1,1688,">"],[1,1697,"要"],[-1,1925,"> "],[1,1934,"程序"],[-1,2090,"> "],[1,2099,"记-"],[-1,2105,"> "],[1,2114,"圾收"],[-1,2252,">"],[1,2253,"    "],[-1,2260,"\n    "],[1,2265,"复制"]],[807,807],[2267,2267]]],[1554689155008,[null,[[-1,807,"**堆**\n j"],[-1,821,"有"],[1,876,">"],[1,878,">"],[-1,883,"计"],[-1,886,"*"],[1,889,">"],[-1,897,"节"],[1,1037,">"],[-1,1045,"否"],[1,1055,">"],[-1,1063,"计"],[1,1069,">"],[1,1077," "],[-1,1077,"就是"],[1,1175,">"],[-1,1183,"个"],[1,1276,"> "],[1,1277,"> "],[-1,1281,"可达"],[-1,1284,"算法"],[1,1295,"> "],[-1,1302,"：从"],[1,1368,"> "],[-1,1375,"以作"],[1,1396,"> "],[1,1397,"> "],[-1,1401,"虚拟"],[-1,1404,"栈中"],[1,1412,"> "],[-1,1419,"类静"],[-1,1429," "],[1,1431,"> "],[-1,1437,"区常"],[1,1440,"\n"],[1,1447,"> "],[-1,1454,"法栈"],[1,1465,"> "],[1,1466,"> "],[-1,1470,"算法"],[-1,1473,"以判"],[1,1539,">"],[-1,1547,"回"],[1,1581,">"],[-1,1589,"性"],[1,1697,">"],[-1,1705,"要"],[1,1934,"> "],[-1,1941,"程序"],[1,2099,"> "],[-1,2106,"记-"],[1,2114,"> "],[-1,2121,"圾收"],[1,2261,">"],[-1,2261,"    "],[1,2272,"\n    "],[-1,2272,"复制"]],[2267,2267],[807,807]]],[1554689097596,["28447@DESKTOP-BE7HQ26",[[-1,2261,"     "]],[2266,2266],[2261,2261]]],[1554689099056,["28447@DESKTOP-BE7HQ26",[[-1,2275,">    "]],[2275,2280],[2275,2275]]],[1554689102683,["28447@DESKTOP-BE7HQ26",[[-1,2408,">    "]],[2413,2413],[2408,2408]]],[1554689106436,["28447@DESKTOP-BE7HQ26",[[-1,2602,"> "]],[2604,2604],[2602,2602]]],[1554689107586,["28447@DESKTOP-BE7HQ26",[[-1,2616,">  "]],[2619,2619],[2616,2616]]],[1554689107869,["28447@DESKTOP-BE7HQ26",[[-1,2615,"\n"]],[2616,2616],[2615,2615]]],[1554689108840,["28447@DESKTOP-BE7HQ26",[[1,2615,"\n"]],[2615,2615],[2616,2616]]],[1554689111314,["28447@DESKTOP-BE7HQ26",[[-1,2728,"> "]],[2730,2730],[2728,2728]]],[1554689113082,["28447@DESKTOP-BE7HQ26",[[-1,2742,">    "]],[2747,2747],[2742,2742]]],[1554689116304,["28447@DESKTOP-BE7HQ26",[[-1,2905,"> "]],[2907,2907],[2905,2905]]],[1554689119204,["28447@DESKTOP-BE7HQ26",[[-1,3102,"> "]],[3104,3104],[3102,3102]]],[1554689125752,["28447@DESKTOP-BE7HQ26",[[-1,3220,">"]],[3220,3221],[3220,3220]]],[1554689127360,["28447@DESKTOP-BE7HQ26",[[-1,3256,"> "]],[3258,3258],[3256,3256]]],[1554689128170,["28447@DESKTOP-BE7HQ26",[[-1,3291,">"]],[3292,3292],[3291,3291]]],[1554689130208,["28447@DESKTOP-BE7HQ26",[[-1,3326,">"]],[3327,3327],[3326,3326]]],[1554689133353,["28447@DESKTOP-BE7HQ26",[[-1,3406," "]],[3407,3407],[3406,3406]]],[1554689134312,["28447@DESKTOP-BE7HQ26",[[-1,3426," "]],[3427,3427],[3426,3426]]],[1554689135025,["28447@DESKTOP-BE7HQ26",[[-1,3405,">"]],[3406,3406],[3405,3405]]],[1554689135743,["28447@DESKTOP-BE7HQ26",[[-1,3424,">"]],[3425,3425],[3424,3424]]],[1554689136959,["28447@DESKTOP-BE7HQ26",[[-1,3431,"> "]],[3433,3433],[3431,3431]]],[1554689138428,["28447@DESKTOP-BE7HQ26",[[-1,3461,"> "]],[3463,3463],[3461,3461]]],[1554689140023,["28447@DESKTOP-BE7HQ26",[[-1,3486,"> "]],[3488,3488],[3486,3486]]],[1554689141274,["28447@DESKTOP-BE7HQ26",[[-1,3520,"> "]],[3522,3522],[3520,3520]]],[1554689143350,["28447@DESKTOP-BE7HQ26",[[-1,3554,"> "]],[3556,3556],[3554,3554]]],[1554689144329,["28447@DESKTOP-BE7HQ26",[[-1,3555,"> "]],[3557,3557],[3555,3555]]],[1554689145164,["28447@DESKTOP-BE7HQ26",[[-1,3562,">"]],[3563,3563],[3562,3562]]],[1554689145404,["28447@DESKTOP-BE7HQ26",[[-1,3561,"\n"]],[3562,3562],[3561,3561]]],[1554689146221,["28447@DESKTOP-BE7HQ26",[[1,3561,"\n"]],[3561,3561],[3562,3562]]],[1554689152340,["28447@DESKTOP-BE7HQ26",[[-1,3613,">"]],[3614,3614],[3613,3613]]],[1554689152587,["28447@DESKTOP-BE7HQ26",[[-1,3612,"\n"]],[3613,3613],[3612,3612]]],[1554689153343,["28447@DESKTOP-BE7HQ26",[[1,3612,"\n "]],[3612,3612],[3614,3614]]],[1554689154859,["28447@DESKTOP-BE7HQ26",[[-1,3683,"> "]],[3685,3685],[3683,3683]]],[1554689215009,[null,[[1,807,"**堆**\n j"],[1,813,"有"],[-1,867,">"],[-1,870,">"],[1,876,"计"],[1,878,"*"],[-1,880,">"],[1,889,"节"],[-1,1028,">"],[1,1037,"否"],[-1,1046,">"],[1,1055,"计"],[-1,1060,">"],[-1,1069," "],[1,1070,"就是"],[-1,1166,">"],[1,1175,"个"],[-1,1267,"> "],[-1,1270,"> "],[1,1276,"可达"],[1,1277,"算法"],[-1,1286,"> "],[1,1295,"：从"],[-1,1359,"> "],[1,1368,"以作"],[-1,1387,"> "],[-1,1390,"> "],[1,1396,"虚拟"],[1,1397,"栈中"],[-1,1403,"> "],[1,1412,"类静"],[1,1420," "],[-1,1421,"> "],[1,1429,"区常"],[-1,1430,"\n"],[-1,1438,"> "],[1,1447,"法栈"],[-1,1456,"> "],[-1,1459,"> "],[1,1465,"算法"],[1,1466,"以判"],[-1,1530,">"],[1,1539,"回"],[-1,1572,">"],[1,1581,"性"],[-1,1688,">"],[1,1697,"要"],[-1,1925,"> "],[1,1934,"程序"],[-1,2090,"> "],[1,2099,"记-"],[-1,2105,"> "],[1,2114,"圾收"],[-1,2252,"> "],[-1,2260,"\n"],[1,2261,"复制算"],[-1,2266,">    "],[1,2275,"决效率问题"],[-1,2399,">    "],[1,2408,"该算法进行"],[-1,2593,"> "],[1,2602,"记-"],[-1,2607,">"],[-1,2611,"  "],[-1,2615,"\n"],[1,2616,"法主要是"],[-1,2719,"> "],[1,2728,"代收"],[-1,2733,">    "],[1,2742,"虚拟机垃圾"],[-1,2896,"> "],[1,2905,"型("],[-1,3093,"> "],[1,3102,"p:"],[-1,3211,">"],[1,3220,"程"],[-1,3247,"> "],[1,3256,"线程"],[-1,3282,">"],[1,3291,"线"],[-1,3317,">"],[1,3325,"t"],[-1,3396,"> "],[1,3405,"需要"],[-1,3415,"> "],[1,3431,"第一"],[-1,3452,"> "],[1,3461,"个类"],[-1,3477,"> "],[1,3486,"进制"],[-1,3511,"> "],[1,3520,"中生"],[-1,3545,"> "],[-1,3548,"> "],[1,3554,"**"],[1,3555," "],[-1,3561,"\n"],[1,3562,"为了"],[-1,3604,">"],[1,3605," "],[-1,3612,"\n "],[1,3614,"格式"],[-1,3674,"> "],[1,3683,"验证"]],[807,807],[3685,3685]]],[1554689215009,[null,[[-1,807,"**堆**\n j"],[-1,821,"有"],[1,876,">"],[1,878,">"],[-1,883,"计"],[-1,886,"*"],[1,889,">"],[-1,897,"节"],[1,1037,">"],[-1,1045,"否"],[1,1055,">"],[-1,1063,"计"],[1,1069,">"],[1,1077," "],[-1,1077,"就是"],[1,1175,">"],[-1,1183,"个"],[1,1276,"> "],[1,1277,"> "],[-1,1281,"可达"],[-1,1284,"算法"],[1,1295,"> "],[-1,1302,"：从"],[1,1368,"> "],[-1,1375,"以作"],[1,1396,"> "],[1,1397,"> "],[-1,1401,"虚拟"],[-1,1404,"栈中"],[1,1412,"> "],[-1,1419,"类静"],[-1,1429," "],[1,1431,"> "],[-1,1437,"区常"],[1,1440,"\n"],[1,1447,"> "],[-1,1454,"法栈"],[1,1465,"> "],[1,1466,"> "],[-1,1470,"算法"],[-1,1473,"以判"],[1,1539,">"],[-1,1547,"回"],[1,1581,">"],[-1,1589,"性"],[1,1697,">"],[-1,1705,"要"],[1,1934,"> "],[-1,1941,"程序"],[1,2099,"> "],[-1,2106,"记-"],[1,2114,"> "],[-1,2121,"圾收"],[1,2261,"> "],[1,2267,"\n"],[-1,2267,"复制算"],[1,2275,">    "],[-1,2279,"决效率问题"],[1,2408,">    "],[-1,2412,"该算法进行"],[1,2602,"> "],[-1,2609,"记-"],[1,2616,">"],[1,2619,"  "],[1,2621,"\n"],[-1,2621,"法主要是"],[1,2728,"> "],[-1,2735,"代收"],[1,2742,">    "],[-1,2746,"虚拟机垃圾"],[1,2905,"> "],[-1,2912,"型("],[1,3102,"> "],[-1,3109,"p:"],[1,3220,">"],[-1,3228,"程"],[1,3256,"> "],[-1,3263,"线程"],[1,3291,">"],[-1,3299,"线"],[1,3326,">"],[-1,3333,"t"],[1,3405,"> "],[-1,3412,"需要"],[1,3424,"> "],[-1,3438,"第一"],[1,3461,"> "],[-1,3468,"个类"],[1,3486,"> "],[-1,3493,"进制"],[1,3520,"> "],[-1,3527,"中生"],[1,3554,"> "],[1,3555,"> "],[-1,3559,"**"],[-1,3562," "],[1,3569,"\n"],[-1,3569,"为了"],[1,3613,">"],[-1,3613," "],[1,3621,"\n "],[-1,3621,"格式"],[1,3683,"> "],[-1,3690,"验证"]],[3685,3685],[807,807]]],[1554689156561,["28447@DESKTOP-BE7HQ26",[[-1,3733,"> "]],[3735,3735],[3733,3733]]],[1554689158274,["28447@DESKTOP-BE7HQ26",[[-1,3823,"> "]],[3825,3825],[3823,3823]]],[1554689160101,["28447@DESKTOP-BE7HQ26",[[-1,3871,">"]],[3871,3872],[3871,3871]]],[1554689160856,["28447@DESKTOP-BE7HQ26",[[-1,3868,">"]],[3868,3869],[3868,3868]]],[1554689161767,["28447@DESKTOP-BE7HQ26",[[-1,3878,">"]],[3878,3879],[3878,3878]]],[1554689163839,["28447@DESKTOP-BE7HQ26",[[-1,4048,"> "]],[4048,4050],[4048,4048]]],[1554689165430,["28447@DESKTOP-BE7HQ26",[[-1,4055,"> "]],[4055,4057],[4055,4055]]],[1554689166539,["28447@DESKTOP-BE7HQ26",[[-1,4108,"> "]],[4108,4110],[4108,4108]]],[1554689167204,["28447@DESKTOP-BE7HQ26",[[-1,4110," "]],[4111,4111],[4110,4110]]],[1554689168148,["28447@DESKTOP-BE7HQ26",[[-1,4118,">"]],[4119,4119],[4118,4118]]],[1554689168901,["28447@DESKTOP-BE7HQ26",[[-1,4109,">"]],[4110,4110],[4109,4109]]],[1554689171098,["28447@DESKTOP-BE7HQ26",[[-1,4239,">"]],[4239,4240],[4239,4239]]],[1554689172524,["28447@DESKTOP-BE7HQ26",[[-1,4304,"### "]],[4304,4308],[4304,4304]]],[1554689174078,["28447@DESKTOP-BE7HQ26",[[1,4304,"### "]],[4304,4304],[4304,4308]]],[1554689176746,["28447@DESKTOP-BE7HQ26",[[-1,4328,"> "]],[4330,4330],[4328,4328]]],[1554689179138,["28447@DESKTOP-BE7HQ26",[[-1,4426,">"]],[4427,4427],[4426,4426]]],[1554689179944,["28447@DESKTOP-BE7HQ26",[[-1,4460,">"]],[4461,4461],[4460,4460]]],[1554689180686,["28447@DESKTOP-BE7HQ26",[[-1,4474,">"]],[4475,4475],[4474,4474]]],[1554689181710,["28447@DESKTOP-BE7HQ26",[[-1,4536,">"]],[4537,4537],[4536,4536]]],[1554689182615,["28447@DESKTOP-BE7HQ26",[[-1,4636,">"]],[4637,4637],[4636,4636]]],[1554689183865,["28447@DESKTOP-BE7HQ26",[[-1,4776,">"]],[4777,4777],[4776,4776]]],[1554689185769,["28447@DESKTOP-BE7HQ26",[[-1,4873,"> "]],[4875,4875],[4873,4873]]],[1554689186685,["28447@DESKTOP-BE7HQ26",[[-1,4893,"> "]],[4895,4895],[4893,4893]]],[1554689187474,["28447@DESKTOP-BE7HQ26",[[-1,4909,"> "]],[4911,4911],[4909,4909]]],[1554689188906,["28447@DESKTOP-BE7HQ26",[[-1,4930,">  "]],[4933,4933],[4930,4930]]],[1554689202562,["28447@DESKTOP-BE7HQ26",[[1,379,"- "]],[379,379],[381,381]]],[1554689205460,["28447@DESKTOP-BE7HQ26",[[1,467,"- "]],[467,467],[469,469]]],[1554689207389,["28447@DESKTOP-BE7HQ26",[[-1,466," "]],[467,467],[466,466]]],[1554689209109,["28447@DESKTOP-BE7HQ26",[[1,496,"-"]],[496,496],[497,497]]],[1554689213025,["28447@DESKTOP-BE7HQ26",[[1,621,"- "]],[621,621],[623,623]]],[1554689275019,[null,[[1,813,"**堆**\n j"],[1,819,"有"],[-1,873,">"],[-1,876,">"],[1,882,"计"],[1,885,"*"],[-1,886,">"],[1,895,"节"],[-1,1034,">"],[1,1043,"否"],[-1,1052,">"],[1,1061,"计"],[-1,1066,">"],[-1,1075," "],[1,1076,"就是"],[-1,1172,">"],[1,1181,"个"],[-1,1273,"> "],[-1,1276,"> "],[1,1282,"可达"],[1,1283,"算法"],[-1,1292,"> "],[1,1301,"：从"],[-1,1365,"> "],[1,1374,"以作"],[-1,1393,"> "],[-1,1396,"> "],[1,1402,"虚拟"],[1,1403,"栈中"],[-1,1409,"> "],[1,1418,"类静"],[-1,1426,"\n>"],[1,1429,"\n"],[1,1435,"区常"],[-1,1436,"\n"],[-1,1444,"> "],[1,1453,"法栈"],[-1,1462,"> "],[-1,1465,"> "],[1,1471,"算法"],[1,1472,"以判"],[-1,1536,">"],[1,1545,"回"],[-1,1578,">"],[1,1587,"性"],[-1,1694,">"],[1,1703,"要"],[-1,1931,"> "],[1,1940,"程序"],[-1,2096,"> "],[1,2105,"记-"],[-1,2111,"> "],[1,2120,"圾收"],[-1,2258,"> "],[-1,2266,"\n"],[1,2267,"复制算"],[-1,2272,">    "],[1,2281,"决效率问题"],[-1,2405,">    "],[1,2414,"该算法进行"],[-1,2599,"> "],[1,2608,"记-"],[-1,2613,"> "],[-1,2618," "],[-1,2621,"\n"],[1,2622,"法主要是"],[-1,2725,"> "],[1,2734,"代收"],[-1,2739,">    "],[1,2748,"虚拟机垃圾"],[-1,2902,"> "],[1,2911,"型("],[-1,3099,"> "],[1,3108,"p:"],[-1,3217,">"],[1,3226,"程"],[-1,3253,"> "],[1,3262,"线程"],[-1,3288,">"],[1,3297,"线"],[-1,3323,">"],[1,3331,"t"],[-1,3402,"> "],[1,3411,"需要"],[-1,3421,"> "],[1,3437,"第一"],[-1,3458,"> "],[1,3467,"个类"],[-1,3483,"> "],[1,3492,"进制"],[-1,3517,"> "],[1,3526,"中生"],[-1,3551,"> "],[-1,3554,"> "],[1,3560,"**"],[1,3561," "],[-1,3567,"\n"],[1,3568,"为了"],[-1,3610,">"],[1,3611," "],[-1,3618,"\n "],[1,3620,"格式"],[-1,3680,"> "],[1,3689,"验证"],[-1,3730,"> "],[1,3739,"验证"],[-1,3820,"> "],[1,3829,"用验"],[-1,3865,">"],[-1,3868,">"],[1,3874,"*"],[1,3884,"的"],[-1,4045,"> "],[1,4061,"符号"],[-1,4105,"> "],[-1,4108,"> "],[1,4114,"化*"],[1,4115,"\n"],[1,4123,"的"],[-1,4236,">"],[1,4245,"的"],[-1,4310,"### "],[1,4314,"类加载器"],[-1,4325,"> "],[1,4334,"类加"],[-1,4423,">"],[1,4432,"限"],[-1,4457,">"],[1,4466,"类"],[-1,4471,">"],[1,4480,"加"],[-1,4533,">"],[1,4542,"加"],[-1,4633,">"],[1,4642,"加"],[-1,4773,">"],[1,4782,"定"],[-1,4870,"> "],[1,4879,"先在"],[-1,4890,"> "],[1,4899,"直接"],[-1,4906,"> "],[1,4915,"活的"],[-1,4927,">  "],[1,4936,"en区"]],[813,813],[4939,4939]]],[1554689275019,[null,[[-1,813,"**堆**\n j"],[-1,827,"有"],[1,882,">"],[1,884,">"],[-1,889,"计"],[-1,893,"*"],[1,895,">"],[-1,903,"节"],[1,1043,">"],[-1,1051,"否"],[1,1061,">"],[-1,1069,"计"],[1,1075,">"],[1,1083," "],[-1,1083,"就是"],[1,1181,">"],[-1,1189,"个"],[1,1282,"> "],[1,1283,"> "],[-1,1287,"可达"],[-1,1290,"算法"],[1,1301,"> "],[-1,1308,"：从"],[1,1374,"> "],[-1,1381,"以作"],[1,1402,"> "],[1,1403,"> "],[-1,1407,"虚拟"],[-1,1410,"栈中"],[1,1418,"> "],[-1,1425,"类静"],[1,1435,"\n>"],[-1,1436,"\n"],[-1,1443,"区常"],[1,1446,"\n"],[1,1453,"> "],[-1,1460,"法栈"],[1,1471,"> "],[1,1472,"> "],[-1,1476,"算法"],[-1,1479,"以判"],[1,1545,">"],[-1,1553,"回"],[1,1587,">"],[-1,1595,"性"],[1,1703,">"],[-1,1711,"要"],[1,1940,"> "],[-1,1947,"程序"],[1,2105,"> "],[-1,2112,"记-"],[1,2120,"> "],[-1,2127,"圾收"],[1,2267,"> "],[1,2273,"\n"],[-1,2273,"复制算"],[1,2281,">    "],[-1,2285,"决效率问题"],[1,2414,">    "],[-1,2418,"该算法进行"],[1,2608,"> "],[-1,2615,"记-"],[1,2622,"> "],[1,2625," "],[1,2627,"\n"],[-1,2627,"法主要是"],[1,2734,"> "],[-1,2741,"代收"],[1,2748,">    "],[-1,2752,"虚拟机垃圾"],[1,2911,"> "],[-1,2918,"型("],[1,3108,"> "],[-1,3115,"p:"],[1,3226,">"],[-1,3234,"程"],[1,3262,"> "],[-1,3269,"线程"],[1,3297,">"],[-1,3305,"线"],[1,3332,">"],[-1,3339,"t"],[1,3411,"> "],[-1,3418,"需要"],[1,3430,"> "],[-1,3444,"第一"],[1,3467,"> "],[-1,3474,"个类"],[1,3492,"> "],[-1,3499,"进制"],[1,3526,"> "],[-1,3533,"中生"],[1,3560,"> "],[1,3561,"> "],[-1,3565,"**"],[-1,3568," "],[1,3575,"\n"],[-1,3575,"为了"],[1,3619,">"],[-1,3619," "],[1,3627,"\n "],[-1,3627,"格式"],[1,3689,"> "],[-1,3696,"验证"],[1,3739,"> "],[-1,3746,"验证"],[1,3829,"> "],[-1,3836,"用验"],[1,3874,">"],[1,3876,">"],[-1,3881,"*"],[-1,3892,"的"],[1,4054,"> "],[-1,4068,"符号"],[1,4114,"> "],[1,4115,"> "],[-1,4119,"化*"],[-1,4122,"\n"],[-1,4131,"的"],[1,4245,">"],[-1,4253,"的"],[1,4319,"### "],[-1,4319,"类加载器"],[1,4334,"> "],[-1,4341,"类加"],[1,4432,">"],[-1,4440,"限"],[1,4466,">"],[-1,4474,"类"],[1,4480,">"],[-1,4488,"加"],[1,4542,">"],[-1,4550,"加"],[1,4642,">"],[-1,4650,"加"],[1,4782,">"],[-1,4790,"定"],[1,4879,"> "],[-1,4886,"先在"],[1,4899,"> "],[-1,4906,"直接"],[1,4915,"> "],[-1,4922,"活的"],[1,4936,">  "],[-1,4942,"en区"]],[4939,4939],[813,813]]],[1554689216592,["28447@DESKTOP-BE7HQ26",[[1,679,"-"]],[679,679],[680,680]]],[1554689221703,["28447@DESKTOP-BE7HQ26",[[1,1062,"-"]],[1062,1062],[1063,1063]]],[1554689229478,["28447@DESKTOP-BE7HQ26",[[1,1285,"- "]],[1285,1285],[1287,1287]]],[1554689264805,["28447@DESKTOP-BE7HQ26",[[1,2109,"- "]],[2109,2109],[2111,2111]]],[1554689270474,["28447@DESKTOP-BE7HQ26",[[-1,2109,"- "]],[2111,2111],[2109,2109]]],[1554689335013,[null,[[1,814,"**堆**\n j"],[1,820,"有"],[-1,874,">"],[-1,877,">"],[1,883,"计"],[1,886,"*"],[-1,887,">"],[1,896,"节"],[-1,1035,">"],[1,1044,"否"],[-1,1053,">"],[1,1054,"-"],[-1,1062,"-"],[1,1063,"计"],[-1,1068,">"],[-1,1077," "],[1,1078,"就是"],[-1,1174,">"],[1,1183,"个"],[-1,1275,"> \n>"],[1,1279,"\n-"],[-1,1284,"性- "],[1,1287,"可达性算法"],[-1,1296,"> "],[1,1305,"：从"],[-1,1369,"> "],[1,1378,"以作"],[-1,1397,"> "],[-1,1400,"> "],[1,1406,"虚拟"],[1,1407,"栈中"],[-1,1413,"> "],[1,1422,"类静"],[1,1430," "],[-1,1431,"> "],[1,1439,"区常"],[-1,1440,"\n"],[-1,1448,"> "],[1,1457,"法栈"],[-1,1466,"> "],[-1,1469,"> "],[1,1475,"算法"],[1,1476,"以判"],[-1,1540,">"],[1,1549,"回"],[-1,1582,">"],[1,1591,"性"],[-1,1698,">"],[1,1707,"要"],[-1,1935,"> "],[1,1944,"程序"],[-1,2100,"> "],[1,2109,"记-"],[-1,2115,"> "],[1,2124,"圾收"],[-1,2262,"> "],[-1,2270,"\n"],[1,2271,"复制算"],[-1,2276,">    "],[1,2285,"决效率问题"],[-1,2409,">    "],[1,2418,"该算法进行"],[-1,2603,"> "],[1,2612,"记-"],[-1,2617,"> "],[-1,2622," "],[-1,2625,"\n"],[1,2626,"法主要是"],[-1,2729,"> "],[1,2738,"代收"],[-1,2743,">    "],[1,2752,"虚拟机垃圾"],[-1,2906,"> "],[1,2915,"型("],[-1,3103,"> "],[1,3112,"p:"],[-1,3221,">"],[1,3230,"程"],[-1,3257,"> "],[1,3266,"线程"],[-1,3292,">"],[1,3301,"线"],[-1,3327,">"],[1,3336,"t"],[-1,3406,"> "],[1,3415,"需要"],[-1,3425,"> "],[1,3441,"第一"],[-1,3462,"> "],[1,3471,"个类"],[-1,3487,"> "],[1,3496,"进制"],[-1,3521,"> "],[1,3530,"中生"],[-1,3555,"> "],[-1,3558,"> "],[1,3564,"**"],[1,3565," "],[-1,3571,"\n"],[1,3572,"为了"],[-1,3614,">"],[1,3615," "],[-1,3622,"\n "],[1,3624,"格式"],[-1,3684,"> "],[1,3693,"验证"],[-1,3734,"> "],[1,3743,"验证"],[-1,3824,"> "],[1,3833,"用验"],[-1,3869,">"],[-1,3872,">"],[1,3879,"*"],[1,3888,"的"],[-1,4049,"> "],[1,4065,"符号"],[-1,4109,"> "],[-1,4112,"> "],[1,4118,"化"],[1,4119,"*\n"],[1,4127,"的"],[-1,4240,">"],[1,4249,"的"],[-1,4314,"### "],[1,4318,"类加载器"],[-1,4329,"> "],[1,4338,"类加"],[-1,4427,">"],[1,4436,"限"],[-1,4461,">"],[1,4470,"类"],[-1,4475,">"],[1,4484,"加"],[-1,4537,">"],[1,4546,"加"],[-1,4637,">"],[1,4646,"加"],[-1,4777,">"],[1,4786,"定"],[-1,4874,"> "],[1,4883,"先在"],[-1,4894,"> "],[1,4903,"直接"],[-1,4910,"> "],[1,4919,"活的"],[-1,4931,">  "],[1,4940,"en区"]],[814,814],[4943,4943]]],[1554689335013,[null,[[-1,814,"**堆**\n j"],[-1,828,"有"],[1,883,">"],[1,885,">"],[-1,890,"计"],[-1,894,"*"],[1,896,">"],[-1,904,"节"],[1,1044,">"],[-1,1052,"否"],[1,1062,">"],[-1,1062,"-"],[1,1071,"-"],[-1,1071,"计"],[1,1077,">"],[1,1085," "],[-1,1085,"就是"],[1,1183,">"],[-1,1191,"个"],[1,1284,"> \n>"],[-1,1284,"\n-"],[1,1291,"性- "],[-1,1291,"可达性算法"],[1,1305,"> "],[-1,1312,"：从"],[1,1378,"> "],[-1,1385,"以作"],[1,1406,"> "],[1,1407,"> "],[-1,1411,"虚拟"],[-1,1414,"栈中"],[1,1422,"> "],[-1,1429,"类静"],[-1,1439," "],[1,1441,"> "],[-1,1447,"区常"],[1,1450,"\n"],[1,1457,"> "],[-1,1464,"法栈"],[1,1475,"> "],[1,1476,"> "],[-1,1480,"算法"],[-1,1483,"以判"],[1,1549,">"],[-1,1557,"回"],[1,1591,">"],[-1,1599,"性"],[1,1707,">"],[-1,1715,"要"],[1,1944,"> "],[-1,1951,"程序"],[1,2109,"> "],[-1,2116,"记-"],[1,2124,"> "],[-1,2131,"圾收"],[1,2271,"> "],[1,2277,"\n"],[-1,2277,"复制算"],[1,2285,">    "],[-1,2289,"决效率问题"],[1,2418,">    "],[-1,2422,"该算法进行"],[1,2612,"> "],[-1,2619,"记-"],[1,2626,"> "],[1,2629," "],[1,2631,"\n"],[-1,2631,"法主要是"],[1,2738,"> "],[-1,2745,"代收"],[1,2752,">    "],[-1,2756,"虚拟机垃圾"],[1,2915,"> "],[-1,2922,"型("],[1,3112,"> "],[-1,3119,"p:"],[1,3230,">"],[-1,3238,"程"],[1,3266,"> "],[-1,3273,"线程"],[1,3301,">"],[-1,3309,"线"],[1,3336,">"],[-1,3344,"t"],[1,3415,"> "],[-1,3422,"需要"],[1,3434,"> "],[-1,3448,"第一"],[1,3471,"> "],[-1,3478,"个类"],[1,3496,"> "],[-1,3503,"进制"],[1,3530,"> "],[-1,3537,"中生"],[1,3564,"> "],[1,3565,"> "],[-1,3569,"**"],[-1,3572," "],[1,3579,"\n"],[-1,3579,"为了"],[1,3623,">"],[-1,3623," "],[1,3631,"\n "],[-1,3631,"格式"],[1,3693,"> "],[-1,3700,"验证"],[1,3743,"> "],[-1,3750,"验证"],[1,3833,"> "],[-1,3840,"用验"],[1,3878,">"],[1,3880,">"],[-1,3886,"*"],[-1,3896,"的"],[1,4058,"> "],[-1,4072,"符号"],[1,4118,"> "],[1,4119,"> "],[-1,4123,"化"],[-1,4125,"*\n"],[-1,4135,"的"],[1,4249,">"],[-1,4257,"的"],[1,4323,"### "],[-1,4323,"类加载器"],[1,4338,"> "],[-1,4345,"类加"],[1,4436,">"],[-1,4444,"限"],[1,4470,">"],[-1,4478,"类"],[1,4484,">"],[-1,4492,"加"],[1,4546,">"],[-1,4554,"加"],[1,4646,">"],[-1,4654,"加"],[1,4786,">"],[-1,4794,"定"],[1,4883,"> "],[-1,4890,"先在"],[1,4903,"> "],[-1,4910,"直接"],[1,4919,"> "],[-1,4926,"活的"],[1,4940,">  "],[-1,4946,"en区"]],[4943,4943],[814,814]]],[1554689283789,["28447@DESKTOP-BE7HQ26",[[1,3266,"- "]],[3266,3266],[3268,3268]]],[1554689285568,["28447@DESKTOP-BE7HQ26",[[1,3304,"- "]],[3304,3304],[3306,3306]]],[1554689289834,["28447@DESKTOP-BE7HQ26",[[1,3475,"- "]],[3475,3475],[3477,3477]]],[1554689291454,["28447@DESKTOP-BE7HQ26",[[1,3502,"- "]],[3502,3502],[3504,3504]]],[1554689293492,["28447@DESKTOP-BE7HQ26",[[1,3538,"- "]],[3538,3538],[3540,3540]]],[1554689296835,["28447@DESKTOP-BE7HQ26",[[-1,3634," "]],[3635,3635],[3634,3634]]],[1554689297721,["28447@DESKTOP-BE7HQ26",[[1,3634,"- "]],[3634,3634],[3636,3636]]],[1554689300622,["28447@DESKTOP-BE7HQ26",[[1,3704,"- "]],[3704,3704],[3706,3706]]],[1554689303060,["28447@DESKTOP-BE7HQ26",[[1,3756,"- "]],[3756,3756],[3758,3758]]],[1554689305255,["28447@DESKTOP-BE7HQ26",[[-1,3633," "]],[3634,3634],[3633,3633]]],[1554689395021,[null,[[1,814,"**堆**\n j"],[1,820,"有"],[-1,874,">"],[-1,877,">"],[1,883,"计"],[1,886,"*"],[-1,887,">"],[1,896,"节"],[-1,1035,">"],[1,1044,"否"],[-1,1053,">"],[1,1054,"-"],[-1,1062,"-"],[1,1063,"计"],[-1,1068,">"],[-1,1077," "],[1,1078,"就是"],[-1,1174,">"],[1,1183,"个"],[-1,1275,"> \n>"],[1,1279,"\n-"],[-1,1284,"性- "],[1,1287,"可达性算法"],[-1,1296,"> "],[1,1305,"：从"],[-1,1369,"> "],[1,1378,"以作"],[-1,1397,"> "],[-1,1400,"> "],[1,1406,"虚拟"],[1,1407,"栈中"],[-1,1413,"> "],[1,1422,"类静"],[1,1430," "],[-1,1431,"> "],[1,1439,"区常"],[-1,1440,"\n"],[-1,1448,"> "],[1,1457,"法栈"],[-1,1466,"> "],[-1,1469,"> "],[1,1475,"算法"],[1,1476,"以判"],[-1,1540,">"],[1,1549,"回"],[-1,1582,">"],[1,1591,"性"],[-1,1698,">"],[1,1707,"要"],[-1,1935,"> "],[1,1944,"程序"],[-1,2100,"> "],[1,2109,"记-"],[-1,2115,"> "],[1,2124,"圾收"],[-1,2262,"> "],[-1,2270,"\n"],[1,2271,"复制算"],[-1,2276,">    "],[1,2285,"决效率问题"],[-1,2409,">    "],[1,2418,"该算法进行"],[-1,2603,"> "],[1,2612,"记-"],[-1,2617,"> "],[-1,2622," "],[-1,2625,"\n"],[1,2626,"法主要是"],[-1,2729,"> "],[1,2738,"代收"],[-1,2743,">    "],[1,2752,"虚拟机垃圾"],[-1,2906,"> "],[1,2915,"型("],[-1,3103,"> "],[1,3112,"p:"],[-1,3221,">"],[1,3230,"程"],[-1,3257,">"],[1,3258,"-"],[-1,3266,"- "],[1,3268,"线程"],[-1,3294,">"],[1,3295," -"],[1,3303,"线"],[-1,3304,"- "],[-1,3331,">"],[1,3339,"t"],[-1,3410,"> "],[1,3419,"需要"],[-1,3429,"> "],[1,3445,"第一"],[-1,3466,">"],[1,3467,"-"],[-1,3475,"- "],[1,3477,"个类"],[-1,3493,">"],[1,3494,"-"],[-1,3502,"- "],[1,3504,"进制"],[-1,3529,">"],[1,3530,"-"],[-1,3538,"- "],[1,3540,"中生"],[-1,3565,"> "],[-1,3568,"> "],[1,3574,"**"],[1,3575," "],[-1,3581,"\n"],[1,3582,"为了"],[-1,3624,">"],[1,3625,"-"],[-1,3632,"\n- "],[1,3635,"格式验"],[-1,3694,">"],[1,3695,"-"],[-1,3703,"- "],[1,3705,"验证"],[-1,3746,">"],[1,3747,"-"],[-1,3755,"- "],[1,3757,"验证"],[-1,3838,"> "],[1,3847,"用验"],[-1,3883,">"],[-1,3886,">"],[1,3892,"*"],[1,3902,"的"],[-1,4063,"> "],[1,4079,"符号"],[-1,4123,"> "],[-1,4126,"> "],[1,4132,"化"],[1,4133,"*\n"],[1,4141,"的"],[-1,4254,">"],[1,4263,"的"],[-1,4328,"### "],[1,4332,"类加载器"],[-1,4343,"> "],[1,4352,"类加"],[-1,4441,">"],[1,4450,"限"],[-1,4475,">"],[1,4484,"类"],[-1,4489,">"],[1,4498,"加"],[-1,4551,">"],[1,4560,"加"],[-1,4651,">"],[1,4660,"加"],[-1,4791,">"],[1,4800,"定"],[-1,4888,"> "],[1,4897,"先在"],[-1,4908,"> "],[1,4917,"直接"],[-1,4924,"> "],[1,4933,"活的"],[-1,4945,"> "],[-1,4950," "],[1,4954,"en区"]],[814,814],[4957,4957]]],[1554689395021,[null,[[-1,814,"**堆**\n j"],[-1,828,"有"],[1,883,">"],[1,885,">"],[-1,890,"计"],[-1,894,"*"],[1,896,">"],[-1,904,"节"],[1,1044,">"],[-1,1052,"否"],[1,1062,">"],[-1,1062,"-"],[1,1071,"-"],[-1,1071,"计"],[1,1077,">"],[1,1085," "],[-1,1085,"就是"],[1,1183,">"],[-1,1191,"个"],[1,1284,"> \n>"],[-1,1284,"\n-"],[1,1291,"性- "],[-1,1291,"可达性算法"],[1,1305,"> "],[-1,1312,"：从"],[1,1378,"> "],[-1,1385,"以作"],[1,1406,"> "],[1,1407,"> "],[-1,1411,"虚拟"],[-1,1414,"栈中"],[1,1422,"> "],[-1,1429,"类静"],[-1,1439," "],[1,1441,"> "],[-1,1447,"区常"],[1,1450,"\n"],[1,1457,"> "],[-1,1464,"法栈"],[1,1475,"> "],[1,1476,"> "],[-1,1480,"算法"],[-1,1483,"以判"],[1,1549,">"],[-1,1557,"回"],[1,1591,">"],[-1,1599,"性"],[1,1707,">"],[-1,1715,"要"],[1,1944,"> "],[-1,1951,"程序"],[1,2109,"> "],[-1,2116,"记-"],[1,2124,"> "],[-1,2131,"圾收"],[1,2271,"> "],[1,2277,"\n"],[-1,2277,"复制算"],[1,2285,">    "],[-1,2289,"决效率问题"],[1,2418,">    "],[-1,2422,"该算法进行"],[1,2612,"> "],[-1,2619,"记-"],[1,2626,"> "],[1,2629," "],[1,2631,"\n"],[-1,2631,"法主要是"],[1,2738,"> "],[-1,2745,"代收"],[1,2752,">    "],[-1,2756,"虚拟机垃圾"],[1,2915,"> "],[-1,2922,"型("],[1,3112,"> "],[-1,3119,"p:"],[1,3230,">"],[-1,3238,"程"],[1,3266,">"],[-1,3266,"-"],[1,3275,"- "],[-1,3275,"线程"],[1,3303,">"],[-1,3303," -"],[-1,3313,"线"],[1,3315,"- "],[1,3340,">"],[-1,3347,"t"],[1,3419,"> "],[-1,3426,"需要"],[1,3438,"> "],[-1,3452,"第一"],[1,3475,">"],[-1,3475,"-"],[1,3484,"- "],[-1,3484,"个类"],[1,3502,">"],[-1,3502,"-"],[1,3511,"- "],[-1,3511,"进制"],[1,3538,">"],[-1,3538,"-"],[1,3547,"- "],[-1,3547,"中生"],[1,3574,"> "],[1,3575,"> "],[-1,3579,"**"],[-1,3582," "],[1,3589,"\n"],[-1,3589,"为了"],[1,3633,">"],[-1,3633,"-"],[1,3641,"\n- "],[-1,3641,"格式验"],[1,3703,">"],[-1,3703,"-"],[1,3712,"- "],[-1,3712,"验证"],[1,3755,">"],[-1,3755,"-"],[1,3764,"- "],[-1,3764,"验证"],[1,3847,"> "],[-1,3854,"用验"],[1,3892,">"],[1,3894,">"],[-1,3899,"*"],[-1,3910,"的"],[1,4072,"> "],[-1,4086,"符号"],[1,4132,"> "],[1,4133,"> "],[-1,4137,"化"],[-1,4139,"*\n"],[-1,4149,"的"],[1,4263,">"],[-1,4271,"的"],[1,4337,"### "],[-1,4337,"类加载器"],[1,4352,"> "],[-1,4359,"类加"],[1,4450,">"],[-1,4458,"限"],[1,4484,">"],[-1,4492,"类"],[1,4498,">"],[-1,4506,"加"],[1,4560,">"],[-1,4568,"加"],[1,4660,">"],[-1,4668,"加"],[1,4800,">"],[-1,4808,"定"],[1,4897,"> "],[-1,4904,"先在"],[1,4917,"> "],[-1,4924,"直接"],[1,4933,"> "],[-1,4940,"活的"],[1,4954,"> "],[1,4957," "],[-1,4960,"en区"]],[4957,4957],[814,814]]],[1554689341552,["28447@DESKTOP-BE7HQ26",[[1,3847,"- "]],[3847,3847],[3849,3849]]],[1554689377545,["28447@DESKTOP-BE7HQ26",[[1,4501,"- "]],[4501,4501],[4503,4503]]],[1554689379711,["28447@DESKTOP-BE7HQ26",[[1,4565,"- "]],[4565,4565],[4567,4567]]],[1554689382343,["28447@DESKTOP-BE7HQ26",[[1,4667,"- "]],[4667,4667],[4669,4669]]],[1554689385267,["28447@DESKTOP-BE7HQ26",[[1,4809,"- "]],[4809,4809],[4811,4811]]],[1554689497234,[null,[[1,814,"**堆**\n j"],[1,820,"有"],[-1,874,">"],[-1,877,">"],[1,883,"计"],[1,886,"*"],[-1,887,">"],[1,896,"节"],[-1,1035,">"],[1,1044,"否"],[-1,1053,">"],[1,1054,"-"],[-1,1062,"-"],[1,1063,"计"],[-1,1068,">"],[-1,1077," "],[1,1078,"就是"],[-1,1174,">"],[1,1183,"个"],[-1,1275,"> \n>"],[1,1279,"\n-"],[-1,1284,"性- "],[1,1287,"可达性算法"],[-1,1296,"> "],[1,1305,"：从"],[-1,1369,"> "],[1,1378,"以作"],[-1,1397,"> "],[-1,1400,"> "],[1,1406,"虚拟"],[1,1407,"栈中"],[-1,1413,"> "],[1,1422,"类静"],[-1,1430,"\n>"],[1,1433,"\n"],[1,1439,"区常"],[-1,1440,"\n"],[-1,1448,"> "],[1,1457,"法栈"],[-1,1466,"> "],[-1,1469,"> "],[1,1475,"算法"],[1,1476,"以判"],[-1,1540,">"],[1,1549,"回"],[-1,1582,">"],[1,1591,"性"],[-1,1698,">"],[1,1707,"要"],[-1,1935,"> "],[1,1944,"程序"],[-1,2100,"> "],[1,2109,"记-"],[-1,2115,">"],[-1,2120," "],[1,2124,"圾收"],[-1,2262,"> "],[-1,2270,"\n"],[1,2271,"复制算"],[-1,2276,">    "],[1,2285,"决效率问题"],[-1,2409,">    "],[1,2418,"该算法进行"],[-1,2603,"> "],[1,2612,"记-"],[-1,2617,"> "],[-1,2622," "],[-1,2625,"\n"],[1,2626,"法主要是"],[-1,2729,"> "],[1,2738,"代收"],[-1,2743,">    "],[1,2752,"虚拟机垃圾"],[-1,2906,"> "],[1,2915,"型("],[-1,3103,"> "],[1,3112,"p:"],[-1,3221,">"],[1,3230,"程"],[-1,3257,">"],[1,3258,"-"],[-1,3266,"- "],[1,3268,"线程"],[-1,3294,">"],[1,3295," -"],[1,3303,"线"],[-1,3304,"- "],[-1,3331,">"],[1,3339,"t"],[-1,3410,"> "],[1,3419,"需要"],[-1,3429,"> "],[1,3445,"第一"],[-1,3466,">"],[1,3467,"-"],[-1,3475,"- "],[1,3477,"个类"],[-1,3493,">"],[1,3494,"-"],[-1,3502,"- "],[1,3504,"进制"],[-1,3529,">"],[1,3530,"-"],[-1,3538,"- "],[1,3540,"中生"],[-1,3565,"> "],[-1,3568,"> "],[1,3574,"**"],[1,3575," "],[-1,3581,"\n"],[1,3582,"为了"],[-1,3624,">"],[1,3625,"-"],[-1,3632,"\n- "],[1,3635,"格式验"],[-1,3694,">"],[1,3695,"-"],[-1,3703,"- "],[1,3705,"验证"],[-1,3746,">"],[1,3747,"-"],[-1,3755,"- "],[1,3757,"验证"],[-1,3838,">"],[1,3839,"-"],[-1,3847,"- "],[1,3849,"用验"],[-1,3885,">"],[-1,3888,">"],[1,3894,"*"],[1,3904,"的"],[-1,4065,"> "],[1,4081,"符号"],[-1,4125,"> "],[-1,4128,"> "],[1,4134,"化"],[1,4135,"*\n"],[1,4143,"的"],[-1,4256,">"],[1,4265,"的"],[-1,4330,"### "],[1,4334,"类加载器"],[-1,4345,"> "],[1,4354,"类加"],[-1,4443,">"],[1,4452,"限"],[-1,4477,">"],[1,4486,"类"],[-1,4491,">"],[1,4492," -"],[1,4500,"加"],[-1,4501,"- "],[-1,4555,">"],[1,4556," -"],[1,4564,"加"],[-1,4565,"- "],[-1,4657,">"],[1,4658," -"],[1,4666,"加"],[-1,4667,"- "],[-1,4799,">"],[1,4800," -"],[1,4808,"定"],[-1,4809,"- "],[-1,4898,"> "],[1,4907,"先在"],[-1,4918,"> "],[1,4927,"直接"],[-1,4934,"> "],[1,4943,"活的"],[-1,4955,"> "],[-1,4960," "],[1,4964,"en区"]],[814,814],[4967,4967]]],[1554689497234,[null,[[-1,814,"**堆**\n j"],[-1,828,"有"],[1,883,">"],[1,885,">"],[-1,890,"计"],[-1,894,"*"],[1,896,">"],[-1,904,"节"],[1,1044,">"],[-1,1052,"否"],[1,1062,">"],[-1,1062,"-"],[1,1071,"-"],[-1,1071,"计"],[1,1077,">"],[1,1085," "],[-1,1085,"就是"],[1,1183,">"],[-1,1191,"个"],[1,1284,"> \n>"],[-1,1284,"\n-"],[1,1291,"性- "],[-1,1291,"可达性算法"],[1,1305,"> "],[-1,1312,"：从"],[1,1378,"> "],[-1,1385,"以作"],[1,1406,"> "],[1,1407,"> "],[-1,1411,"虚拟"],[-1,1414,"栈中"],[1,1422,"> "],[-1,1429,"类静"],[1,1439,"\n>"],[-1,1440,"\n"],[-1,1447,"区常"],[1,1450,"\n"],[1,1457,"> "],[-1,1464,"法栈"],[1,1475,"> "],[1,1476,"> "],[-1,1480,"算法"],[-1,1483,"以判"],[1,1549,">"],[-1,1557,"回"],[1,1591,">"],[-1,1599,"性"],[1,1707,">"],[-1,1715,"要"],[1,1944,"> "],[-1,1951,"程序"],[1,2109,"> "],[-1,2116,"记-"],[1,2124,">"],[1,2128," "],[-1,2131,"圾收"],[1,2271,"> "],[1,2277,"\n"],[-1,2277,"复制算"],[1,2285,">    "],[-1,2289,"决效率问题"],[1,2418,">    "],[-1,2422,"该算法进行"],[1,2612,"> "],[-1,2619,"记-"],[1,2626,"> "],[1,2629," "],[1,2631,"\n"],[-1,2631,"法主要是"],[1,2738,"> "],[-1,2745,"代收"],[1,2752,">    "],[-1,2756,"虚拟机垃圾"],[1,2915,"> "],[-1,2922,"型("],[1,3112,"> "],[-1,3119,"p:"],[1,3230,">"],[-1,3238,"程"],[1,3266,">"],[-1,3266,"-"],[1,3275,"- "],[-1,3275,"线程"],[1,3303,">"],[-1,3303," -"],[-1,3313,"线"],[1,3315,"- "],[1,3340,">"],[-1,3347,"t"],[1,3419,"> "],[-1,3426,"需要"],[1,3438,"> "],[-1,3452,"第一"],[1,3475,">"],[-1,3475,"-"],[1,3484,"- "],[-1,3484,"个类"],[1,3502,">"],[-1,3502,"-"],[1,3511,"- "],[-1,3511,"进制"],[1,3538,">"],[-1,3538,"-"],[1,3547,"- "],[-1,3547,"中生"],[1,3574,"> "],[1,3575,"> "],[-1,3579,"**"],[-1,3582," "],[1,3589,"\n"],[-1,3589,"为了"],[1,3633,">"],[-1,3633,"-"],[1,3641,"\n- "],[-1,3641,"格式验"],[1,3703,">"],[-1,3703,"-"],[1,3712,"- "],[-1,3712,"验证"],[1,3755,">"],[-1,3755,"-"],[1,3764,"- "],[-1,3764,"验证"],[1,3847,">"],[-1,3847,"-"],[1,3856,"- "],[-1,3856,"用验"],[1,3894,">"],[1,3896,">"],[-1,3901,"*"],[-1,3912,"的"],[1,4074,"> "],[-1,4088,"符号"],[1,4134,"> "],[1,4135,"> "],[-1,4139,"化"],[-1,4141,"*\n"],[-1,4151,"的"],[1,4265,">"],[-1,4273,"的"],[1,4339,"### "],[-1,4339,"类加载器"],[1,4354,"> "],[-1,4361,"类加"],[1,4452,">"],[-1,4460,"限"],[1,4486,">"],[-1,4494,"类"],[1,4500,">"],[-1,4500," -"],[-1,4510,"加"],[1,4512,"- "],[1,4564,">"],[-1,4564," -"],[-1,4574,"加"],[1,4576,"- "],[1,4666,">"],[-1,4666," -"],[-1,4676,"加"],[1,4678,"- "],[1,4808,">"],[-1,4808," -"],[-1,4818,"定"],[1,4820,"- "],[1,4907,"> "],[-1,4914,"先在"],[1,4927,"> "],[-1,4934,"直接"],[1,4943,"> "],[-1,4950,"活的"],[1,4964,"> "],[1,4967," "],[-1,4970,"en区"]],[4967,4967],[814,814]]],[1554689463532,["28447@DESKTOP-BE7HQ26",[[1,1407,"- "]],[1407,1407],[1409,1409]]],[1554689467513,["28447@DESKTOP-BE7HQ26",[[1,1424,"- "]],[1424,1424],[1426,1426]]],[1554689469478,["28447@DESKTOP-BE7HQ26",[[1,1445,"- "]],[1445,1445],[1447,1447]]],[1554689471718,["28447@DESKTOP-BE7HQ26",[[1,1463,"- "]],[1463,1463],[1465,1465]]],[1554689478235,["28447@DESKTOP-BE7HQ26",[[-1,1407,"- "]],[1407,1409],[1407,1407]]],[1554689479276,["28447@DESKTOP-BE7HQ26",[[-1,1422,"- "]],[1422,1424],[1422,1422]]],[1554689480266,["28447@DESKTOP-BE7HQ26",[[-1,1441,"- "]],[1441,1443],[1441,1441]]],[1554689481317,["28447@DESKTOP-BE7HQ26",[[-1,1457,"- "]],[1457,1459],[1457,1457]]],[1554689483242,["28447@DESKTOP-BE7HQ26",[[-1,1406,"\n"]],[1407,1407],[1406,1406]]],[1554689484058,["28447@DESKTOP-BE7HQ26",[[1,1406,"  "]],[1406,1406],[1408,1408]]],[1554689485503,["28447@DESKTOP-BE7HQ26",[[1,1423,"  "]],[1423,1423],[1425,1425]]],[1554689487463,["28447@DESKTOP-BE7HQ26",[[1,1444,"  "]],[1444,1444],[1446,1446]]],[1554689488621,["28447@DESKTOP-BE7HQ26",[[1,1462,"  "]],[1462,1462],[1464,1464]]],[1554689557603,[null,[[1,814,"**堆**\n j"],[1,820,"有"],[-1,874,">"],[-1,877,">"],[1,883,"计"],[1,886,"*"],[-1,887,">"],[1,896,"节"],[-1,1035,">"],[1,1044,"否"],[-1,1053,">"],[1,1054,"-"],[-1,1062,"-"],[1,1063,"计"],[-1,1068,">"],[-1,1077," "],[1,1078,"就是"],[-1,1174,">"],[1,1183,"个"],[-1,1275,"> \n>"],[1,1279,"\n-"],[-1,1284,"性- "],[1,1287,"可达性算法"],[-1,1296,"> "],[1,1305,"：从"],[-1,1369,"> "],[1,1378,"以作"],[-1,1397,">"],[-1,1399,"\n>"],[-1,1406,"  "],[1,1408,"虚拟机栈中"],[-1,1414,">"],[1,1415," "],[-1,1423,"  "],[1,1425,"类静"],[-1,1433,"\n>"],[1,1435," \n "],[1,1442,"区常"],[-1,1443,"\n  "],[-1,1453,">"],[1,1454," "],[-1,1462,"  "],[1,1464,"法栈"],[-1,1473,"> "],[-1,1476,"> "],[1,1482,"算法"],[1,1483,"以判"],[-1,1547,">"],[1,1556,"回"],[-1,1589,">"],[1,1598,"性"],[-1,1705,">"],[1,1714,"要"],[-1,1942,"> "],[1,1951,"程序"],[-1,2107,"> "],[1,2116,"记-"],[-1,2122,"> "],[1,2131,"圾收"],[-1,2269,"> "],[-1,2277,"\n"],[1,2278,"复制算"],[-1,2283,">    "],[1,2292,"决效率问题"],[-1,2416,">    "],[1,2425,"该算法进行"],[-1,2610,"> "],[1,2619,"记-"],[-1,2624,"> "],[-1,2629," "],[-1,2632,"\n"],[1,2633,"法主要是"],[-1,2736,"> "],[1,2745,"代收"],[-1,2750,">    "],[1,2759,"虚拟机垃圾"],[-1,2913,"> "],[1,2922,"型("],[-1,3110,"> "],[1,3119,"p:"],[-1,3228,">"],[1,3237,"程"],[-1,3264,">"],[1,3265,"-"],[-1,3273,"- "],[1,3275,"线程"],[-1,3301,">"],[1,3302," -"],[1,3310,"线"],[-1,3311,"- "],[-1,3338,">"],[1,3346,"t"],[-1,3417,"> "],[1,3426,"需要"],[-1,3436,"> "],[1,3452,"第一"],[-1,3473,">"],[1,3474,"-"],[-1,3482,"- "],[1,3484,"个类"],[-1,3500,">"],[1,3501,"-"],[-1,3509,"- "],[1,3511,"进制"],[-1,3536,">"],[1,3537,"-"],[-1,3545,"- "],[1,3547,"中生"],[-1,3572,"> "],[-1,3575,"> "],[1,3581,"**"],[1,3582," "],[-1,3588,"\n"],[1,3589,"为了"],[-1,3631,">"],[1,3632,"-"],[-1,3639,"\n- "],[1,3642,"格式验"],[-1,3701,">"],[1,3702,"-"],[-1,3710,"- "],[1,3712,"验证"],[-1,3753,">"],[1,3754,"-"],[-1,3762,"- "],[1,3764,"验证"],[-1,3845,">"],[1,3846,"-"],[-1,3854,"- "],[1,3856,"用验"],[-1,3892,">"],[-1,3895,">"],[1,3901,"*"],[1,3911,"的"],[-1,4072,"> "],[1,4088,"符号"],[-1,4132,"> "],[-1,4135,"> "],[1,4141,"化"],[1,4142,"*\n"],[1,4150,"的"],[-1,4263,">"],[1,4272,"的"],[-1,4337,"### "],[1,4341,"类加载器"],[-1,4352,"> "],[1,4361,"类加"],[-1,4450,">"],[1,4459,"限"],[-1,4484,">"],[1,4493,"类"],[-1,4498,">"],[1,4499," -"],[1,4507,"加"],[-1,4508,"- "],[-1,4562,">"],[1,4563," -"],[1,4571,"加"],[-1,4572,"- "],[-1,4664,">"],[1,4665," -"],[1,4673,"加"],[-1,4674,"- "],[-1,4806,">"],[1,4807," -"],[1,4815,"定"],[-1,4816,"- "],[-1,4905,"> "],[1,4914,"先在"],[-1,4925,"> "],[1,4934,"直接"],[-1,4941,"> "],[1,4950,"活的"],[-1,4962,"> "],[-1,4967," "],[1,4971,"en区"]],[814,814],[4974,4974]]],[1554689557603,[null,[[-1,814,"**堆**\n j"],[-1,828,"有"],[1,883,">"],[1,885,">"],[-1,890,"计"],[-1,894,"*"],[1,896,">"],[-1,904,"节"],[1,1044,">"],[-1,1052,"否"],[1,1062,">"],[-1,1062,"-"],[1,1071,"-"],[-1,1071,"计"],[1,1077,">"],[1,1085," "],[-1,1085,"就是"],[1,1183,">"],[-1,1191,"个"],[1,1284,"> \n>"],[-1,1284,"\n-"],[1,1291,"性- "],[-1,1291,"可达性算法"],[1,1305,"> "],[-1,1312,"：从"],[1,1378,"> "],[-1,1385,"以作"],[1,1406,">"],[1,1407,"\n>"],[1,1412,"  "],[-1,1412,"虚拟机栈中"],[1,1423,">"],[-1,1423," "],[1,1432,"  "],[-1,1432,"类静"],[1,1442,"\n>"],[-1,1442," \n "],[-1,1452,"区常"],[1,1455,"\n  "],[1,1462,">"],[-1,1462," "],[1,1471,"  "],[-1,1471,"法栈"],[1,1482,"> "],[1,1483,"> "],[-1,1487,"算法"],[-1,1490,"以判"],[1,1556,">"],[-1,1564,"回"],[1,1598,">"],[-1,1606,"性"],[1,1714,">"],[-1,1722,"要"],[1,1951,"> "],[-1,1958,"程序"],[1,2116,"> "],[-1,2123,"记-"],[1,2131,"> "],[-1,2138,"圾收"],[1,2278,"> "],[1,2284,"\n"],[-1,2284,"复制算"],[1,2292,">    "],[-1,2296,"决效率问题"],[1,2425,">    "],[-1,2429,"该算法进行"],[1,2619,"> "],[-1,2626,"记-"],[1,2633,"> "],[1,2636," "],[1,2638,"\n"],[-1,2638,"法主要是"],[1,2745,"> "],[-1,2752,"代收"],[1,2759,">    "],[-1,2763,"虚拟机垃圾"],[1,2922,"> "],[-1,2929,"型("],[1,3119,"> "],[-1,3126,"p:"],[1,3237,">"],[-1,3245,"程"],[1,3273,">"],[-1,3273,"-"],[1,3282,"- "],[-1,3282,"线程"],[1,3310,">"],[-1,3310," -"],[-1,3320,"线"],[1,3322,"- "],[1,3347,">"],[-1,3354,"t"],[1,3426,"> "],[-1,3433,"需要"],[1,3445,"> "],[-1,3459,"第一"],[1,3482,">"],[-1,3482,"-"],[1,3491,"- "],[-1,3491,"个类"],[1,3509,">"],[-1,3509,"-"],[1,3518,"- "],[-1,3518,"进制"],[1,3545,">"],[-1,3545,"-"],[1,3554,"- "],[-1,3554,"中生"],[1,3581,"> "],[1,3582,"> "],[-1,3586,"**"],[-1,3589," "],[1,3596,"\n"],[-1,3596,"为了"],[1,3640,">"],[-1,3640,"-"],[1,3648,"\n- "],[-1,3648,"格式验"],[1,3710,">"],[-1,3710,"-"],[1,3719,"- "],[-1,3719,"验证"],[1,3762,">"],[-1,3762,"-"],[1,3771,"- "],[-1,3771,"验证"],[1,3854,">"],[-1,3854,"-"],[1,3863,"- "],[-1,3863,"用验"],[1,3901,">"],[1,3903,">"],[-1,3908,"*"],[-1,3919,"的"],[1,4081,"> "],[-1,4095,"符号"],[1,4141,"> "],[1,4142,"> "],[-1,4146,"化"],[-1,4148,"*\n"],[-1,4158,"的"],[1,4272,">"],[-1,4280,"的"],[1,4346,"### "],[-1,4346,"类加载器"],[1,4361,"> "],[-1,4368,"类加"],[1,4459,">"],[-1,4467,"限"],[1,4493,">"],[-1,4501,"类"],[1,4507,">"],[-1,4507," -"],[-1,4517,"加"],[1,4519,"- "],[1,4571,">"],[-1,4571," -"],[-1,4581,"加"],[1,4583,"- "],[1,4673,">"],[-1,4673," -"],[-1,4683,"加"],[1,4685,"- "],[1,4815,">"],[-1,4815," -"],[-1,4825,"定"],[1,4827,"- "],[1,4914,"> "],[-1,4921,"先在"],[1,4934,"> "],[-1,4941,"直接"],[1,4950,"> "],[-1,4957,"活的"],[1,4971,"> "],[1,4974," "],[-1,4977,"en区"]],[4974,4974],[814,814]]],[1554689557515,["28447@DESKTOP-BE7HQ26",[[1,3127,"s"],[-1,3130,"cdn2"],[1,3134,"static001"],[-1,3140,"static"],[-1,3148,"om/statics_s1_20151006-0049u2"],[1,3177,"n"],[-1,3187,"articles/java-memory-model-1/zh/resources/11"],[1,3231,"image/b0/9b/b098a84eb7598d70913444a991d1759b"]],[3119,3236],[3208,3208]]],[1554689677625,[null,[[1,814,"**堆**\n j"],[1,820,"有"],[-1,874,">"],[-1,877,">"],[1,883,"计"],[1,886,"*"],[-1,887,">"],[1,896,"节"],[-1,1035,">"],[1,1044,"否"],[-1,1053,">"],[1,1054,"-"],[-1,1062,"-"],[1,1063,"计"],[-1,1068,">"],[-1,1077," "],[1,1078,"就是"],[-1,1174,">"],[1,1183,"个"],[-1,1275,"> \n>"],[1,1279,"\n-"],[-1,1284,"性- "],[1,1287,"可达性算法"],[-1,1296,"> "],[1,1305,"：从"],[-1,1369,"> "],[1,1378,"以作"],[-1,1397,">"],[-1,1399,"\n>"],[-1,1406,"  "],[1,1408,"虚拟机栈中"],[-1,1414,">"],[1,1415," "],[-1,1423,"  "],[1,1425,"类静"],[-1,1433,"\n>"],[1,1435," \n "],[1,1442,"区常"],[-1,1443,"\n  "],[-1,1453,">"],[1,1454," "],[-1,1462,"  "],[1,1464,"法栈"],[-1,1473,"> "],[-1,1476,"> "],[1,1482,"算法"],[1,1483,"以判"],[-1,1547,">"],[1,1556,"回"],[-1,1589,">"],[1,1598,"性"],[-1,1705,">"],[1,1714,"要"],[-1,1942,"> "],[1,1951,"程序"],[-1,2107,"> "],[1,2116,"记-"],[-1,2122,"> "],[1,2131,"圾收"],[-1,2269,"> "],[-1,2277,"\n"],[1,2278,"复制算"],[-1,2283,">    "],[1,2292,"决效率问题"],[-1,2416,">    "],[1,2425,"该算法进行"],[-1,2610,"> "],[1,2619,"记-"],[-1,2624,"> "],[-1,2629," "],[-1,2632,"\n"],[1,2633,"法主要是"],[-1,2736,"> "],[1,2745,"代收"],[-1,2750,">    "],[1,2759,"虚拟机垃圾"],[-1,2913,"> "],[1,2922,"型("],[-1,3110,"> "],[1,3119,"ps:"],[-1,3121,"cdn2.isnfo"],[-1,3140,"tic"],[1,3143,".infoq"],[-1,3145,"oic"],[-1,3150,"articles"],[1,3158,"resource"],[1,3203,".png)\n 从"],[1,3209,"程"],[-1,3236,">"],[1,3237,"-"],[-1,3245,"- "],[1,3247,"线程"],[-1,3273,">"],[1,3274," -"],[1,3282,"线"],[-1,3283,"- "],[-1,3310,">"],[1,3318,"t"],[-1,3389,"> "],[1,3398,"需要"],[-1,3408,"> "],[1,3424,"第一"],[-1,3445,">"],[1,3446,"-"],[-1,3454,"- "],[1,3456,"个类"],[-1,3472,">"],[1,3473,"-"],[-1,3481,"- "],[1,3483,"进制"],[-1,3508,">"],[1,3509,"-"],[-1,3517,"- "],[1,3519,"中生"],[-1,3544,"> "],[-1,3547,"> "],[1,3553,"**"],[1,3554," "],[-1,3560,"\n"],[1,3561,"为了"],[-1,3603,">"],[1,3604,"-"],[-1,3611,"\n- "],[1,3614,"格式验"],[-1,3673,">"],[1,3674,"-"],[-1,3682,"- "],[1,3684,"验证"],[-1,3725,">"],[1,3726,"-"],[-1,3734,"- "],[1,3736,"验证"],[-1,3817,">"],[1,3818,"-"],[-1,3826,"- "],[1,3828,"用验"],[-1,3864,">"],[-1,3867,">"],[1,3873,"*"],[1,3883,"的"],[-1,4044,"> "],[1,4060,"符号"],[-1,4104,"> "],[-1,4107,"> "],[1,4113,"化"],[1,4114,"*\n"],[1,4122,"的"],[-1,4235,">"],[1,4244,"的"],[-1,4309,"### "],[1,4313,"类加载器"],[-1,4324,"> "],[1,4333,"类加"],[-1,4422,">"],[1,4431,"限"],[-1,4456,">"],[1,4465,"类"],[-1,4470,">"],[1,4471," -"],[1,4479,"加"],[-1,4480,"- "],[-1,4534,">"],[1,4535," -"],[1,4543,"加"],[-1,4544,"- "],[-1,4636,">"],[1,4637," -"],[1,4645,"加"],[-1,4646,"- "],[-1,4778,">"],[1,4779," -"],[1,4787,"定"],[-1,4788,"- "],[-1,4877,"> "],[1,4886,"先在"],[-1,4897,"> "],[1,4906,"直接"],[-1,4913,"> "],[1,4922,"活的"],[-1,4934,"> "],[-1,4939," "],[1,4943,"en区"]],[814,814],[4946,4946]]],[1554689677625,[null,[[-1,814,"**堆**\n j"],[-1,828,"有"],[1,883,">"],[1,885,">"],[-1,890,"计"],[-1,894,"*"],[1,896,">"],[-1,904,"节"],[1,1044,">"],[-1,1052,"否"],[1,1062,">"],[-1,1062,"-"],[1,1071,"-"],[-1,1071,"计"],[1,1077,">"],[1,1085," "],[-1,1085,"就是"],[1,1183,">"],[-1,1191,"个"],[1,1284,"> \n>"],[-1,1284,"\n-"],[1,1291,"性- "],[-1,1291,"可达性算法"],[1,1305,"> "],[-1,1312,"：从"],[1,1378,"> "],[-1,1385,"以作"],[1,1406,">"],[1,1407,"\n>"],[1,1412,"  "],[-1,1412,"虚拟机栈中"],[1,1423,">"],[-1,1423," "],[1,1432,"  "],[-1,1432,"类静"],[1,1442,"\n>"],[-1,1442," \n "],[-1,1452,"区常"],[1,1455,"\n  "],[1,1462,">"],[-1,1462," "],[1,1471,"  "],[-1,1471,"法栈"],[1,1482,"> "],[1,1483,"> "],[-1,1487,"算法"],[-1,1490,"以判"],[1,1556,">"],[-1,1564,"回"],[1,1598,">"],[-1,1606,"性"],[1,1714,">"],[-1,1722,"要"],[1,1951,"> "],[-1,1958,"程序"],[1,2116,"> "],[-1,2123,"记-"],[1,2131,"> "],[-1,2138,"圾收"],[1,2278,"> "],[1,2284,"\n"],[-1,2284,"复制算"],[1,2292,">    "],[-1,2296,"决效率问题"],[1,2425,">    "],[-1,2429,"该算法进行"],[1,2619,"> "],[-1,2626,"记-"],[1,2633,"> "],[1,2636," "],[1,2638,"\n"],[-1,2638,"法主要是"],[1,2745,"> "],[-1,2752,"代收"],[1,2759,">    "],[-1,2763,"虚拟机垃圾"],[1,2922,"> "],[-1,2929,"型("],[1,3119,"> "],[-1,3126,"ps:"],[1,3131,"cdn2.isnfo"],[1,3140,"tic"],[-1,3140,".infoq"],[1,3148,"oic"],[1,3150,"articles"],[-1,3150,"resource"],[-1,3203,".png)\n 从"],[-1,3217,"程"],[1,3245,">"],[-1,3245,"-"],[1,3254,"- "],[-1,3254,"线程"],[1,3282,">"],[-1,3282," -"],[-1,3292,"线"],[1,3294,"- "],[1,3319,">"],[-1,3326,"t"],[1,3398,"> "],[-1,3405,"需要"],[1,3417,"> "],[-1,3431,"第一"],[1,3454,">"],[-1,3454,"-"],[1,3463,"- "],[-1,3463,"个类"],[1,3481,">"],[-1,3481,"-"],[1,3490,"- "],[-1,3490,"进制"],[1,3517,">"],[-1,3517,"-"],[1,3526,"- "],[-1,3526,"中生"],[1,3553,"> "],[1,3554,"> "],[-1,3558,"**"],[-1,3561," "],[1,3568,"\n"],[-1,3568,"为了"],[1,3612,">"],[-1,3612,"-"],[1,3620,"\n- "],[-1,3620,"格式验"],[1,3682,">"],[-1,3682,"-"],[1,3691,"- "],[-1,3691,"验证"],[1,3734,">"],[-1,3734,"-"],[1,3743,"- "],[-1,3743,"验证"],[1,3826,">"],[-1,3826,"-"],[1,3835,"- "],[-1,3835,"用验"],[1,3873,">"],[1,3875,">"],[-1,3880,"*"],[-1,3891,"的"],[1,4053,"> "],[-1,4067,"符号"],[1,4113,"> "],[1,4114,"> "],[-1,4118,"化"],[-1,4120,"*\n"],[-1,4130,"的"],[1,4244,">"],[-1,4252,"的"],[1,4318,"### "],[-1,4318,"类加载器"],[1,4333,"> "],[-1,4340,"类加"],[1,4431,">"],[-1,4439,"限"],[1,4465,">"],[-1,4473,"类"],[1,4479,">"],[-1,4479," -"],[-1,4489,"加"],[1,4491,"- "],[1,4543,">"],[-1,4543," -"],[-1,4553,"加"],[1,4555,"- "],[1,4645,">"],[-1,4645," -"],[-1,4655,"加"],[1,4657,"- "],[1,4787,">"],[-1,4787," -"],[-1,4797,"定"],[1,4799,"- "],[1,4886,"> "],[-1,4893,"先在"],[1,4906,"> "],[-1,4913,"直接"],[1,4922,"> "],[-1,4929,"活的"],[1,4943,"> "],[1,4946," "],[-1,4949,"en区"]],[4946,4946],[814,814]]],[1554689623700,["28447@DESKTOP-BE7HQ26",[[1,1062," \n"]],[1061,1061],[1063,1063]]],[1554689625375,["28447@DESKTOP-BE7HQ26",[[-1,1062," "]],[1063,1063],[1062,1062]]],[1554689626230,["28447@DESKTOP-BE7HQ26",[[-1,1062,"\n"]],[1062,1062],[1061,1061]]],[1554689631602,["28447@DESKTOP-BE7HQ26",[[-1,1063," "]],[1064,1064],[1063,1063]]],[1554689632782,["28447@DESKTOP-BE7HQ26",[[1,1063," "]],[1063,1063],[1064,1064]]],[1554689641418,["28447@DESKTOP-BE7HQ26",[[-1,1286," "]],[1287,1287],[1286,1286]]],[1554689641978,["28447@DESKTOP-BE7HQ26",[[1,1286," "]],[1286,1286],[1287,1287]]],[1554689644316,["28447@DESKTOP-BE7HQ26",[[-1,1284,"\n"]],[1284,1284],[1283,1283]]],[1554689653936,["28447@DESKTOP-BE7HQ26",[[-1,1064,"1. **引用计数法**"]],[1064,1076],[1064,1064]]],[1554689661027,["28447@DESKTOP-BE7HQ26",[[1,1064,"1. 1. **引用计数法**"]],[1064,1064],[1079,1079]]],[1554689665377,["28447@DESKTOP-BE7HQ26",[[-1,1065,". 1"]],[1067,1067],[1064,1064]]],[1554689668384,["28447@DESKTOP-BE7HQ26",[[-1,1066," "]],[1067,1067],[1066,1066]]],[1554689676566,["28447@DESKTOP-BE7HQ26",[[1,1066," "]],[1066,1066],[1067,1067]]],[1554689689456,[null,[[1,814,"**堆**\n j"],[1,820,"有"],[-1,874,">"],[-1,877,">"],[1,883,"计"],[1,886,"*"],[-1,887,">"],[1,896,"节"],[-1,1035,">"],[1,1044,"否"],[-1,1053,"> 1. **引用"],[-1,1076,"法 "],[1,1078,"\n 所谓引用计数法就是"],[-1,1174,">"],[1,1183,"个"],[-1,1275,"> \n>"],[1,1279,"-"],[-1,1284,"- "],[1,1286,"可达性算法"],[-1,1295,"> "],[1,1304,"：从"],[-1,1368,"> "],[1,1377,"以作"],[-1,1396,">"],[-1,1398,"\n>"],[-1,1405,"  "],[1,1407,"虚拟机栈中"],[-1,1413,">"],[1,1414," "],[-1,1422,"  "],[1,1424,"类静"],[-1,1432,"\n>"],[1,1434," \n "],[1,1441,"区常"],[-1,1442,"\n  "],[-1,1452,">"],[1,1453," "],[-1,1461,"  "],[1,1463,"法栈"],[-1,1472,"> "],[-1,1475,"> "],[1,1481,"算法"],[1,1482,"以判"],[-1,1546,">"],[1,1555,"回"],[-1,1588,">"],[1,1597,"性"],[-1,1704,">"],[1,1713,"要"],[-1,1941,"> "],[1,1950,"程序"],[-1,2106,"> "],[1,2115,"记-"],[-1,2121,"> "],[1,2130,"圾收"],[-1,2268,"> "],[-1,2276,"\n"],[1,2277,"复制算"],[-1,2282,">    "],[1,2291,"决效率问题"],[-1,2415,">    "],[1,2424,"该算法进行"],[-1,2609,"> "],[1,2618,"记-"],[-1,2623,"> "],[-1,2628," "],[-1,2631,"\n"],[1,2632,"法主要是"],[-1,2735,"> "],[1,2744,"代收"],[-1,2749,">    "],[1,2758,"虚拟机垃圾"],[-1,2912,"> "],[1,2921,"型("],[-1,3109,"> "],[1,3118,"ps:"],[-1,3120,"cdn2.isnfo"],[-1,3139,"tic.coicn/articles"],[1,3157,".infoq.cn/resource"],[1,3202,".png)\n 从"],[1,3208,"程"],[-1,3235,">"],[1,3236,"-"],[-1,3244,"- "],[1,3246,"线程"],[-1,3272,">"],[1,3273," -"],[1,3281,"线"],[-1,3282,"- "],[-1,3309,">"],[1,3317,"t"],[-1,3388,"> "],[1,3397,"需要"],[-1,3407,"> "],[1,3423,"第一"],[-1,3444,">"],[1,3445,"-"],[-1,3453,"- "],[1,3455,"个类"],[-1,3471,">"],[1,3472,"-"],[-1,3480,"- "],[1,3482,"进制"],[-1,3507,">"],[1,3508,"-"],[-1,3516,"- "],[1,3518,"中生"],[-1,3543,"> "],[-1,3546,"> "],[1,3552,"**"],[1,3553," "],[-1,3559,"\n"],[1,3560,"为了"],[-1,3602,">"],[1,3603,"-"],[-1,3610,"\n- "],[1,3613,"格式验"],[-1,3672,">"],[1,3673,"-"],[-1,3681,"- "],[1,3683,"验证"],[-1,3724,">"],[1,3725,"-"],[-1,3733,"- "],[1,3735,"验证"],[-1,3816,">"],[1,3817,"-"],[-1,3825,"- "],[1,3827,"用验"],[-1,3863,">"],[-1,3866,">"],[1,3872,"*"],[1,3882,"的"],[-1,4043,"> "],[1,4059,"符号"],[-1,4103,"> "],[-1,4106,"> "],[1,4112,"化"],[1,4113,"*\n"],[1,4121,"的"],[-1,4234,">"],[1,4243,"的"],[-1,4308,"### "],[1,4312,"类加载器"],[-1,4323,"> "],[1,4332,"类加"],[-1,4421,">"],[1,4430,"限"],[-1,4455,">"],[1,4464,"类"],[-1,4469,">"],[1,4470," -"],[1,4478,"加"],[-1,4479,"- "],[-1,4533,">"],[1,4534," -"],[1,4542,"加"],[-1,4543,"- "],[-1,4635,">"],[1,4636," -"],[1,4644,"加"],[-1,4645,"- "],[-1,4777,">"],[1,4778," -"],[1,4786,"定"],[-1,4787,"- "],[-1,4876,"> "],[1,4885,"先在"],[-1,4896,"> "],[1,4905,"直接"],[-1,4912,"> "],[1,4921,"活的"],[-1,4933,"> "],[-1,4938," "],[1,4942,"en区"]],[814,814],[4945,4945]]],[1554689689456,[null,[[-1,814,"**堆**\n j"],[-1,828,"有"],[1,883,">"],[1,885,">"],[-1,890,"计"],[-1,894,"*"],[1,896,">"],[-1,904,"节"],[1,1044,">"],[-1,1052,"否"],[1,1062,"> 1. **引用"],[1,1076,"法 "],[-1,1076,"\n 所谓引用计数法就是"],[1,1183,">"],[-1,1191,"个"],[1,1284,"> \n>"],[-1,1284,"-"],[1,1290,"- "],[-1,1290,"可达性算法"],[1,1304,"> "],[-1,1311,"：从"],[1,1377,"> "],[-1,1384,"以作"],[1,1405,">"],[1,1406,"\n>"],[1,1411,"  "],[-1,1411,"虚拟机栈中"],[1,1422,">"],[-1,1422," "],[1,1431,"  "],[-1,1431,"类静"],[1,1441,"\n>"],[-1,1441," \n "],[-1,1451,"区常"],[1,1454,"\n  "],[1,1461,">"],[-1,1461," "],[1,1470,"  "],[-1,1470,"法栈"],[1,1481,"> "],[1,1482,"> "],[-1,1486,"算法"],[-1,1489,"以判"],[1,1555,">"],[-1,1563,"回"],[1,1597,">"],[-1,1605,"性"],[1,1713,">"],[-1,1721,"要"],[1,1950,"> "],[-1,1957,"程序"],[1,2115,"> "],[-1,2122,"记-"],[1,2130,"> "],[-1,2137,"圾收"],[1,2277,"> "],[1,2283,"\n"],[-1,2283,"复制算"],[1,2291,">    "],[-1,2295,"决效率问题"],[1,2424,">    "],[-1,2428,"该算法进行"],[1,2618,"> "],[-1,2625,"记-"],[1,2632,"> "],[1,2635," "],[1,2637,"\n"],[-1,2637,"法主要是"],[1,2744,"> "],[-1,2751,"代收"],[1,2758,">    "],[-1,2762,"虚拟机垃圾"],[1,2921,"> "],[-1,2928,"型("],[1,3118,"> "],[-1,3125,"ps:"],[1,3130,"cdn2.isnfo"],[1,3139,"tic.coicn/articles"],[-1,3139,".infoq.cn/resource"],[-1,3202,".png)\n 从"],[-1,3216,"程"],[1,3244,">"],[-1,3244,"-"],[1,3253,"- "],[-1,3253,"线程"],[1,3281,">"],[-1,3281," -"],[-1,3291,"线"],[1,3293,"- "],[1,3318,">"],[-1,3325,"t"],[1,3397,"> "],[-1,3404,"需要"],[1,3416,"> "],[-1,3430,"第一"],[1,3453,">"],[-1,3453,"-"],[1,3462,"- "],[-1,3462,"个类"],[1,3480,">"],[-1,3480,"-"],[1,3489,"- "],[-1,3489,"进制"],[1,3516,">"],[-1,3516,"-"],[1,3525,"- "],[-1,3525,"中生"],[1,3552,"> "],[1,3553,"> "],[-1,3557,"**"],[-1,3560," "],[1,3567,"\n"],[-1,3567,"为了"],[1,3611,">"],[-1,3611,"-"],[1,3619,"\n- "],[-1,3619,"格式验"],[1,3681,">"],[-1,3681,"-"],[1,3690,"- "],[-1,3690,"验证"],[1,3733,">"],[-1,3733,"-"],[1,3742,"- "],[-1,3742,"验证"],[1,3825,">"],[-1,3825,"-"],[1,3834,"- "],[-1,3834,"用验"],[1,3872,">"],[1,3874,">"],[-1,3879,"*"],[-1,3890,"的"],[1,4052,"> "],[-1,4066,"符号"],[1,4112,"> "],[1,4113,"> "],[-1,4117,"化"],[-1,4119,"*\n"],[-1,4129,"的"],[1,4243,">"],[-1,4251,"的"],[1,4317,"### "],[-1,4317,"类加载器"],[1,4332,"> "],[-1,4339,"类加"],[1,4430,">"],[-1,4438,"限"],[1,4464,">"],[-1,4472,"类"],[1,4478,">"],[-1,4478," -"],[-1,4488,"加"],[1,4490,"- "],[1,4542,">"],[-1,4542," -"],[-1,4552,"加"],[1,4554,"- "],[1,4644,">"],[-1,4644," -"],[-1,4654,"加"],[1,4656,"- "],[1,4786,">"],[-1,4786," -"],[-1,4796,"定"],[1,4798,"- "],[1,4885,"> "],[-1,4892,"先在"],[1,4905,"> "],[-1,4912,"直接"],[1,4921,"> "],[-1,4928,"活的"],[1,4942,"> "],[1,4945," "],[-1,4948,"en区"]],[4945,4945],[814,814]]],[1554689678690,["28447@DESKTOP-BE7HQ26",[[-1,1066," "]],[1067,1067],[1066,1066]]],[1554689701630,[null,[[1,814,"**堆**\n j"],[1,820,"有"],[-1,874,">"],[-1,877,">"],[1,883,"计"],[1,886,"*"],[-1,887,">"],[1,896,"节"],[-1,1035,">"],[1,1044,"否"],[-1,1053,"> 1. **引用"],[-1,1075,"法 "],[1,1077,"\n 所谓引用计数法就是"],[-1,1173,">"],[1,1182,"个"],[-1,1274,"> \n>"],[1,1278,"-"],[-1,1283,"- "],[1,1285,"可达性算法"],[-1,1294,"> "],[1,1303,"：从"],[-1,1367,"> "],[1,1376,"以作"],[-1,1395,">"],[-1,1397,"\n>"],[-1,1404,"  "],[1,1406,"虚拟机栈中"],[-1,1412,">"],[1,1413," "],[-1,1421,"  "],[1,1423,"类静"],[-1,1431,"\n>"],[1,1433," \n "],[1,1440,"区常"],[-1,1441,"\n  "],[-1,1451,">"],[1,1452," "],[-1,1460,"  "],[1,1462,"法栈"],[-1,1471,"> "],[-1,1474,"> "],[1,1480,"算法"],[1,1481,"以判"],[-1,1545,">"],[1,1554,"回"],[-1,1587,">"],[1,1596,"性"],[-1,1703,">"],[1,1712,"要"],[-1,1940,"> "],[1,1949,"程序"],[-1,2105,"> "],[1,2114,"记-"],[-1,2120,"> "],[1,2129,"圾收"],[-1,2267,"> "],[-1,2275,"\n"],[1,2276,"复制算"],[-1,2281,">    "],[1,2290,"决效率问题"],[-1,2414,">    "],[1,2423,"该算法进行"],[-1,2608,"> "],[1,2617,"记-"],[-1,2622,"> "],[-1,2627," "],[-1,2630,"\n"],[1,2631,"法主要是"],[-1,2734,"> "],[1,2743,"代收"],[-1,2748,">    "],[1,2757,"虚拟机垃圾"],[-1,2911,"> "],[1,2920,"型("],[-1,3108,"> "],[1,3117,"ps:"],[-1,3119,"cdn2.isnfo"],[-1,3138,"tic.coicn/articles"],[1,3156,".infoq.cn/resource"],[1,3201,".png)\n 从"],[1,3207,"程"],[-1,3234,">"],[1,3235,"-"],[-1,3243,"- "],[1,3245,"线程"],[-1,3271,">"],[1,3272," -"],[1,3280,"线"],[-1,3281,"- "],[-1,3308,">"],[1,3316,"t"],[-1,3387,"> "],[1,3396,"需要"],[-1,3406,"> "],[1,3422,"第一"],[-1,3443,">"],[1,3444,"-"],[-1,3452,"- "],[1,3454,"个类"],[-1,3470,">"],[1,3471,"-"],[-1,3479,"- "],[1,3481,"进制"],[-1,3506,">"],[1,3507,"-"],[-1,3515,"- "],[1,3517,"中生"],[-1,3542,"> "],[-1,3545,"> "],[1,3551,"**"],[1,3552," "],[-1,3558,"\n"],[1,3559,"为了"],[-1,3601,">"],[1,3602,"-"],[-1,3609,"\n- "],[1,3612,"格式验"],[-1,3671,">"],[1,3672,"-"],[-1,3680,"- "],[1,3682,"验证"],[-1,3723,">"],[1,3724,"-"],[-1,3732,"- "],[1,3734,"验证"],[-1,3815,">"],[1,3816,"-"],[-1,3824,"- "],[1,3826,"用验"],[-1,3862,">"],[-1,3865,">"],[1,3871,"*"],[1,3881,"的"],[-1,4042,"> "],[1,4058,"符号"],[-1,4102,"> "],[-1,4105,"> "],[1,4111,"化"],[1,4112,"*\n"],[1,4120,"的"],[-1,4233,">"],[1,4242,"的"],[-1,4307,"### "],[1,4311,"类加载器"],[-1,4322,"> "],[1,4331,"类加"],[-1,4420,">"],[1,4429,"限"],[-1,4454,">"],[1,4463,"类"],[-1,4468,">"],[1,4469," -"],[1,4477,"加"],[-1,4478,"- "],[-1,4532,">"],[1,4533," -"],[1,4541,"加"],[-1,4542,"- "],[-1,4634,">"],[1,4635," -"],[1,4643,"加"],[-1,4644,"- "],[-1,4776,">"],[1,4777," -"],[1,4785,"定"],[-1,4786,"- "],[-1,4875,"> "],[1,4884,"先在"],[-1,4895,"> "],[1,4904,"直接"],[-1,4911,"> "],[1,4920,"活的"],[-1,4932,"> "],[-1,4937," "],[1,4941,"en区"]],[814,814],[4944,4944]]],[1554689701630,[null,[[-1,814,"**堆**\n j"],[-1,828,"有"],[1,883,">"],[1,885,">"],[-1,890,"计"],[-1,894,"*"],[1,896,">"],[-1,904,"节"],[1,1044,">"],[-1,1052,"否"],[1,1062,"> 1. **引用"],[1,1075,"法 "],[-1,1075,"\n 所谓引用计数法就是"],[1,1182,">"],[-1,1190,"个"],[1,1283,"> \n>"],[-1,1283,"-"],[1,1289,"- "],[-1,1289,"可达性算法"],[1,1303,"> "],[-1,1310,"：从"],[1,1376,"> "],[-1,1383,"以作"],[1,1404,">"],[1,1405,"\n>"],[1,1410,"  "],[-1,1410,"虚拟机栈中"],[1,1421,">"],[-1,1421," "],[1,1430,"  "],[-1,1430,"类静"],[1,1440,"\n>"],[-1,1440," \n "],[-1,1450,"区常"],[1,1453,"\n  "],[1,1460,">"],[-1,1460," "],[1,1469,"  "],[-1,1469,"法栈"],[1,1480,"> "],[1,1481,"> "],[-1,1485,"算法"],[-1,1488,"以判"],[1,1554,">"],[-1,1562,"回"],[1,1596,">"],[-1,1604,"性"],[1,1712,">"],[-1,1720,"要"],[1,1949,"> "],[-1,1956,"程序"],[1,2114,"> "],[-1,2121,"记-"],[1,2129,"> "],[-1,2136,"圾收"],[1,2276,"> "],[1,2282,"\n"],[-1,2282,"复制算"],[1,2290,">    "],[-1,2294,"决效率问题"],[1,2423,">    "],[-1,2427,"该算法进行"],[1,2617,"> "],[-1,2624,"记-"],[1,2631,"> "],[1,2634," "],[1,2636,"\n"],[-1,2636,"法主要是"],[1,2743,"> "],[-1,2750,"代收"],[1,2757,">    "],[-1,2761,"虚拟机垃圾"],[1,2920,"> "],[-1,2927,"型("],[1,3117,"> "],[-1,3124,"ps:"],[1,3129,"cdn2.isnfo"],[1,3138,"tic.coicn/articles"],[-1,3138,".infoq.cn/resource"],[-1,3201,".png)\n 从"],[-1,3215,"程"],[1,3243,">"],[-1,3243,"-"],[1,3252,"- "],[-1,3252,"线程"],[1,3280,">"],[-1,3280," -"],[-1,3290,"线"],[1,3292,"- "],[1,3317,">"],[-1,3324,"t"],[1,3396,"> "],[-1,3403,"需要"],[1,3415,"> "],[-1,3429,"第一"],[1,3452,">"],[-1,3452,"-"],[1,3461,"- "],[-1,3461,"个类"],[1,3479,">"],[-1,3479,"-"],[1,3488,"- "],[-1,3488,"进制"],[1,3515,">"],[-1,3515,"-"],[1,3524,"- "],[-1,3524,"中生"],[1,3551,"> "],[1,3552,"> "],[-1,3556,"**"],[-1,3559," "],[1,3566,"\n"],[-1,3566,"为了"],[1,3610,">"],[-1,3610,"-"],[1,3618,"\n- "],[-1,3618,"格式验"],[1,3680,">"],[-1,3680,"-"],[1,3689,"- "],[-1,3689,"验证"],[1,3732,">"],[-1,3732,"-"],[1,3741,"- "],[-1,3741,"验证"],[1,3824,">"],[-1,3824,"-"],[1,3833,"- "],[-1,3833,"用验"],[1,3871,">"],[1,3873,">"],[-1,3878,"*"],[-1,3889,"的"],[1,4051,"> "],[-1,4065,"符号"],[1,4111,"> "],[1,4112,"> "],[-1,4116,"化"],[-1,4118,"*\n"],[-1,4128,"的"],[1,4242,">"],[-1,4250,"的"],[1,4316,"### "],[-1,4316,"类加载器"],[1,4331,"> "],[-1,4338,"类加"],[1,4429,">"],[-1,4437,"限"],[1,4463,">"],[-1,4471,"类"],[1,4477,">"],[-1,4477," -"],[-1,4487,"加"],[1,4489,"- "],[1,4541,">"],[-1,4541," -"],[-1,4551,"加"],[1,4553,"- "],[1,4643,">"],[-1,4643," -"],[-1,4653,"加"],[1,4655,"- "],[1,4785,">"],[-1,4785," -"],[-1,4795,"定"],[1,4797,"- "],[1,4884,"> "],[-1,4891,"先在"],[1,4904,"> "],[-1,4911,"直接"],[1,4920,"> "],[-1,4927,"活的"],[1,4941,"> "],[1,4944," "],[-1,4947,"en区"]],[4944,4944],[814,814]]],[1554689700284,["28447@DESKTOP-BE7HQ26",[[1,79,"\n"]],[77,77],[78,78]]],[1554689700483,["28447@DESKTOP-BE7HQ26",[[1,80,"\n"]],[78,78],[79,79]]],[1554689700867,["28447@DESKTOP-BE7HQ26",[[1,80,"![](https://images2017.cnblogs.com/blog/1072930/201712/1072930-20171229170534570-429539433.png)\n"]],[79,79],[175,175]]]],null,"28447@DESKTOP-BE7HQ26"],["0405a62d-4864-438d-8ff2-c7027d0a4b6f",1554875290670,"# JVM面试题\n\n\n[JVM常见面试题](https://www.cnblogs.com/goody9807/p/6511480.html)\n\n****\n\n\n![](https://images2017.cnblogs.com/blog/1072930/201712/1072930-20171229170534570-429539433.png)\n\n### 11.JVM内存分哪几个区，每个区的作用是什么?\n\nJava虚拟机主要分为以下一个区:\n\n**方法区：**\n- 1\\. 有时候也成为**永久代**，在该区内很少发生垃圾回收，但是并不代表不发生GC，在这里进行的GC主要是对方法区里的常量池和对类型的卸载\n- 2\\. 方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。\n- 3\\. 该区域是被线程共享的。\n- 4\\. 方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。\n\n **虚拟机栈:**\n- 1\\. 虚拟机栈也就是我们平常所称的**栈内存**,它为java方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。\n- 2\\. 虚拟机栈是线程私有的，它的生命周期与线程相同。\n- 3\\. 局部变量表里存储的是基本数据类型、returnAddress类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定\n- 4.操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式\n- 5.每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引用。\n \n **本地方法栈**\n 本地方法栈和虚拟机栈类似，只不过本地方法栈为Native方法服务。\n\n**堆**\n java堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。\n \n **程序计数器**\n 内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个java虚拟机规范没有规定任何OOM情况的区域。\n\n### 12.如和判断一个对象是否存活?(或者GC对象的判定方法)\n\n 判断一个对象是否存活有两种方法:\n- 1.**引用计数法**\n 所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象时，就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对象没有被引用，也就是“死对象”,将会被垃圾回收.\n 引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象A引用对象B，对象B又引用者对象A，那么此时A,B对象的引用计数器都不为零，也就造成无法完成垃圾回收，所以主流的虚拟机都没有采用这种算法。\n- 2.**可达性算法**(引用链法)\n该算法的思想是：从一个被称为**GC Roots**的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。\n在java中可以作为GC Roots的对象有以下几种:\n  *   虚拟机栈中引用的对象\n  *   方法区类静态属性引用的对象 \n  *   方法区常量池引用的对象\n  *   本地方法栈JNI引用的对象\n\n虽然这些算法可以判定一个对象是否能被回收，但是当满足上述条件时，一个对象比**不一定会被回收**。当一个对象不可达GC Root时，这个对象并 \n **不会立马被回收**，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记\n 如果对象在可达性分析中没有与GC Root的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行finalize()方法。当对象没有覆盖finalize()方法或者已被虚拟机调用过，那么就认为是没必要的。\n 如果该对象有必要执行finalize()方法，那么这个对象将会放在一个称为F-Queue的对队列中，虚拟机会触发一个Finalize()线程去执行，此线程是低优先级的，并且虚拟机不会承诺一直等待它运行完，这是因为如果finalize()执行缓慢或者发生了死锁，那么就会造成F-Queue队列一直等待，造成了内存回收系统的崩溃。GC对处于F-Queue中的对象进行第二次被标记，这时，该对象将被移除”即将回收”集合，等待回收。\n\n### 13.简述java垃圾回收机制?\n\n在java中，程序员是不需要显示的去释放一个对象的内存的，而是由虚拟机自行执行。在JVM中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫面那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。\n\n### 14.java中垃圾收集的方法有哪些?\n\n1.  **标记-清除:**\n    这是垃圾收集算法中最基础的，根据名字就可以知道，它的思想就是标记哪些要被回收的对象，然后统一回收。这种方法很简单，但是会有两个主要问题：1.效率不高，标记和清除的效率都很低；2.会产生大量不连续的内存碎片，导致以后程序在分配较大的对象时，由于没有充足的连续内存而提前触发一次GC动作。\n2.  **复制算法:**\n 为了解决效率问题，复制算法将可用内存按容量划分为相等的两部分，然后每次只使用其中的一块，当一块内存用完时，就将还存活的对象复制到第二块内存上，然后一次性清楚完第一块内存，再将第二块上的对象复制到第一块。但是这种方式，内存的代价太高，每次基本上都要浪费一般的内存。\n 于是将该算法进行了改进，内存区域不再是按照1：1去划分，而是将内存划分为8:1:1三部分，较大那份内存交Eden区，其余是两块较小的内存区叫Survior区。每次都会优先使用Eden区，若Eden区满，就将对象复制到第二块内存区上，然后清除Eden区，如果此时存活的对象太多，以至于Survivor不够时，会将这些对象通过分配担保机制复制到老年代中。(java堆又分为新生代和老年代)\n3.  **标记-整理**\n   该算法主要是为了解决标记-清除，产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。\n4.  **分代收集** \n 现在的虚拟机垃圾收集大多采用这种方式，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用**复制**算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用**标记-整理** 或者 **标记-清除**。\n\n### 15.java内存模型\n\njava内存模型(JMM)是线程间通信的控制机制.JMM定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java内存模型的抽象示意图如下：\n![](https://static001.infoq.cn/resource/image/b0/9b/b098a84eb7598d70913444a991d1759b.png)\n 从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：\n- 1\\. 首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。\n - 2\\. 然后，线程B到主内存中去读取线程A之前已更新过的共享变量。\n 写的很好:http://www.infoq.com/cn/articles/java-memory-model-1\n\n### 16.java类加载过程?\n\njava类加载需要经历一下7个过程：\n**加载**\n加载时类加载的第一个过程，在这个阶段，将完成一下三件事情：\n- 1\\. 通过一个类的全限定名获取该类的二进制流。\n- 2\\. 将该二进制流中的静态存储结构转化为方法去运行时数据结构。 \n- 3\\. 在内存中生成该类的Class对象，作为该类的数据访问入口。\n\n**验证**\n 验证的目的是为了确保Class文件的字节流中的信息不回危害到虚拟机.在该阶段主要完成以下四钟验证:\n- 1\\. 文件格式验证：验证字节流是否符合Class文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型.\n- 2\\. 元数据验证:对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。\n- 3\\. 字节码验证：是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如：方法中的类型转换是否正确，跳转指令是否正确等。\n- 4\\. 符号引用验证：这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。\n \n **准备**\n 准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。\n\n```\n    public static int value=123;//在准备阶段value初始值为0 。在初始化阶段才会变为123 。\n\n```\n\n**解析**\n该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。\n\n**初始化**\n 初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。\n\n### 17\\. 简述java类加载机制?\n\n 虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的java类型。\n\n### 18\\. 类加载器双亲委派模型机制？\n\n当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。\n\n### 19.什么是类加载器，类加载器有哪些?\n\n 实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。\n 主要有一下四种类加载器:\n - 1\\. 启动类加载器(Bootstrap ClassLoader)用来加载java核心类库，无法被java程序直接引用。\n - 2\\. 扩展类加载器(extensions class loader):它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。\n - 3\\. 系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。\n - 4\\. 用户自定义类加载器，通过继承 java.lang.ClassLoader类的方式实现。\n\n### **20.简述java内存分配与回收策率以及Minor GC和Major GC**\n\n1.  对象优先在堆的Eden区分配。\n2.  大对象直接进入老年代.\n3.  长期存活的对象将直接进入老年代.\n   当Eden区没有足够的空间进行分配时，虚拟机会执行一次Minor GC.Minor Gc通常发生在新生代的Eden区，在这个区的对象生存期短，往往发生Gc的频率较高，回收速度比较快;Full Gc/Major GC 发生在老年代，一般情况下，触发老年代GC的时候不会触发Minor GC,但是通过配置，可以在Full GC之前进行一次Minor GC这样可以加快老年代的回收速度。",[[1554875277431,["28447@DESKTOP-BE7HQ26",[[1,5232,"\n   "]],[5232,5232],[5236,5236]]],[1554875277585,["28447@DESKTOP-BE7HQ26",[[-1,5233,"   "],[1,5236,"\n\n"]],[5236,5236],[5234,5234]]],[1554875280000,["28447@DESKTOP-BE7HQ26",[[-1,5234,"\n"],[1,5235,"#"]],[5234,5234],[5235,5235]]],[1554875281453,["28447@DESKTOP-BE7HQ26",[[1,5235,"# ****"]],[5235,5235],[5239,5239]]],[1554875284713,["28447@DESKTOP-BE7HQ26",[[1,5239,"21."]],[5239,5239],[5242,5242]]],[1554875296069,["28447@DESKTOP-BE7HQ26",[[1,5242,"堆栈泄露"]],[5242,5242],[5246,5246]]],[1554875297335,["28447@DESKTOP-BE7HQ26",[[1,5248,"\n\n"]],[5248,5248],[5249,5249]]],[1554875298478,["28447@DESKTOP-BE7HQ26",[[1,5249,"https://blog.csdn.net/jenrey/article/details/80106154"]],[5249,5249],[5302,5302]]],[1554875299168,["28447@DESKTOP-BE7HQ26",[[-1,5249,"https://blog.csdn.net/jenrey/article/details/80106154"]],[5302,5302],[5249,5249]]],[1554875300136,["28447@DESKTOP-BE7HQ26",[[-1,5249,"\n"],[1,5250,"【"]],[5249,5249],[5250,5250]]],[1554875300337,["28447@DESKTOP-BE7HQ26",[[1,5250,"】"]],[5250,5250],[5251,5251]]],[1554875301151,["28447@DESKTOP-BE7HQ26",[[-1,5250,"】"]],[5251,5251],[5250,5250]]],[1554875301310,["28447@DESKTOP-BE7HQ26",[[-1,5249,"【"],[1,5250,"\n"]],[5250,5250],[5249,5249]]],[1554875307673,["28447@DESKTOP-BE7HQ26",[[-1,5249,"\n"],[1,5250,"["]],[5249,5249],[5250,5250]]],[1554875307872,["28447@DESKTOP-BE7HQ26",[[1,5250,"]"]],[5250,5250],[5251,5251]]],[1554875309168,["28447@DESKTOP-BE7HQ26",[[1,5250,"du"]],[5250,5250],[5252,5252]]],[1554875309719,["28447@DESKTOP-BE7HQ26",[[-1,5250,"du"]],[5252,5252],[5250,5250]]],[1554875315067,["28447@DESKTOP-BE7HQ26",[[1,5250,"堆、栈溢出"]],[5250,5250],[5255,5255]]],[1554875316571,["28447@DESKTOP-BE7HQ26",[[1,5256,"（"]],[5256,5256],[5257,5257]]],[1554875317097,["28447@DESKTOP-BE7HQ26",[[-1,5256,"（"]],[5257,5257],[5256,5256]]],[1554875317707,["28447@DESKTOP-BE7HQ26",[[1,5256,"("]],[5256,5256],[5257,5257]]],[1554875317742,["28447@DESKTOP-BE7HQ26",[[1,5257,"https://)"]],[5257,5257],[5257,5265]]],[1554875318134,["28447@DESKTOP-BE7HQ26",[[1,5265,"blog.csdn.net/jenrey/article/details/80106154"]],[5257,5265],[5310,5310]]],[1554875319870,["28447@DESKTOP-BE7HQ26",[[1,5311,"\n\n"]],[5311,5311],[5312,5312]]]],null,"28447@DESKTOP-BE7HQ26"]]}