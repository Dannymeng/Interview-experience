{"compress":true,"commitItems":[["58ab2e73-ce27-4dda-91c2-e7d880dd6d24",1554562983131,"",[[1554562925022,["28447@DESKTOP-BE7HQ26",[[1,0,"# JVM\n\n\n\n"]],[0,0],[8,8]]],[1554562926861,["28447@DESKTOP-BE7HQ26",[[1,8,"![](https://images2017.cnblogs.com/blog/1072930/201712/1072930-20171229170534570-429539433.png)"]],[8,8],[103,103]]],[1554562928892,["28447@DESKTOP-BE7HQ26",[[1,104,"\n"]],[103,103],[104,104]]],[1554562929102,["28447@DESKTOP-BE7HQ26",[[1,105,"\n"]],[104,104],[105,105]]],[1554564060578,["28447@DESKTOP-BE7HQ26",[[1,106,"\n"]],[103,103],[104,104]]],[1554564060818,["28447@DESKTOP-BE7HQ26",[[1,107,"\n"]],[104,104],[105,105]]],[1554612418117,["28447@DESKTOP-BE7HQ26",[[1,8,"\n"]],[7,7],[8,8]]],[1554612418614,["28447@DESKTOP-BE7HQ26",[[1,9,"\n"]],[8,8],[9,9]]],[1554612419171,["28447@DESKTOP-BE7HQ26",[[1,10,"\n"]],[9,9],[10,10]]],[1554612421231,["28447@DESKTOP-BE7HQ26",[[1,7,"*****"]],[7,7],[10,10]]],[1554612422184,["28447@DESKTOP-BE7HQ26",[[-1,11,"*"]],[10,10],[9,9]]],[1554612423144,["28447@DESKTOP-BE7HQ26",[[1,15,"\n"]],[11,11],[12,12]]],[1554612423364,["28447@DESKTOP-BE7HQ26",[[1,16,"\n"]],[12,12],[13,13]]],[1554612423604,["28447@DESKTOP-BE7HQ26",[[1,17,"\n"]],[13,13],[14,14]]],[1554612437374,["28447@DESKTOP-BE7HQ26",[[1,12,"JVM ： javaxun"]],[12,12],[25,25]]],[1554612438554,["28447@DESKTOP-BE7HQ26",[[-1,22,"xun"]],[25,25],[22,22]]],[1554612442453,["28447@DESKTOP-BE7HQ26",[[1,22,"虚拟机，是"]],[22,22],[27,27]]],[1554612445223,["28447@DESKTOP-BE7HQ26",[[1,27,"java"]],[27,27],[31,31]]],[1554612449713,["28447@DESKTOP-BE7HQ26",[[1,27,"cao"]],[27,27],[30,30]]],[1554612450884,["28447@DESKTOP-BE7HQ26",[[-1,27,"cao"]],[30,30],[27,27]]],[1554612455419,["28447@DESKTOP-BE7HQ26",[[1,27,"操作系统识别"]],[27,27],[33,33]]],[1554612464595,["28447@DESKTOP-BE7HQ26",[[1,37,"程序的工具"]],[37,37],[42,42]]],[1554642077960,["28447@DESKTOP-BE7HQ26",[[1,148,"\n"]],[143,143],[144,144]]],[1554642078122,["28447@DESKTOP-BE7HQ26",[[1,149,"\n"]],[144,144],[145,145]]],[1554642078284,["28447@DESKTOP-BE7HQ26",[[1,150,"\n"]],[145,145],[146,146]]],[1554642260452,["28447@DESKTOP-BE7HQ26",[[1,151,"\n"]],[143,143],[144,144]]],[1554642260708,["28447@DESKTOP-BE7HQ26",[[1,152,"\n"]],[144,144],[145,145]]],[1554642326757,["28447@DESKTOP-BE7HQ26",[[1,145,"## 程序计数器\n\n记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）"]],[145,145],[190,190]]],[1554642329342,["28447@DESKTOP-BE7HQ26",[[1,198,"\n"]],[190,190],[191,191]]],[1554642329547,["28447@DESKTOP-BE7HQ26",[[1,199,"\n"]],[191,191],[192,192]]],[1554642333538,["28447@DESKTOP-BE7HQ26",[[1,192,"## Java 虚拟机栈\n\n每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。"]],[192,192],[297,297]]],[1554642335435,["28447@DESKTOP-BE7HQ26",[[1,305,"\n"]],[297,297],[298,298]]],[1554642335757,["28447@DESKTOP-BE7HQ26",[[1,306,"\n"]],[298,298],[299,299]]],[1554642343081,["28447@DESKTOP-BE7HQ26",[[1,298,"![](https://camo.githubusercontent.com/c04a17cab5bca71fe4de0558b694fb7b167b6b3a/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f66663562383961632d373938652d346662632d623063652d6461326663323335383537302e6a7067)"]],[298,298],[571,571]]],[1554642346842,["28447@DESKTOP-BE7HQ26",[[1,298,"\n"]],[297,297],[298,298]]],[1554642352857,["28447@DESKTOP-BE7HQ26",[[1,581,"\n"]],[573,573],[574,574]]],[1554642377331,["28447@DESKTOP-BE7HQ26",[[1,575,"## 本地方法栈\n\n本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。\n\n本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。"]],[575,575],[694,694]]],[1554642379303,["28447@DESKTOP-BE7HQ26",[[1,701,"\n"]],[694,694],[695,695]]],[1554642379696,["28447@DESKTOP-BE7HQ26",[[1,702,"\n"]],[695,695],[696,696]]],[1554642419595,["28447@DESKTOP-BE7HQ26",[[1,703,"\n"]],[694,694],[695,695]]],[1554642419811,["28447@DESKTOP-BE7HQ26",[[1,704,"\n"]],[695,695],[696,696]]],[1554642426354,["28447@DESKTOP-BE7HQ26",[[1,697,"![](https://camo.githubusercontent.com/fe3ccc26ca7f5ea008fdbdee99dd76e65154a617/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f315f323030313535303534373236313831312e706e67)"]],[697,697],[934,934]]],[1554642428545,["28447@DESKTOP-BE7HQ26",[[-1,696,"\n"]],[696,696],[695,695]]],[1554642430295,["28447@DESKTOP-BE7HQ26",[[1,941,"\n"]],[934,934],[935,935]]],[1554642494485,["28447@DESKTOP-BE7HQ26",[[1,936,"## 堆\n\n所有对象都在这里分配内存，是垃圾收集的主要区域（\"GC 堆\"）。\n\n现代的垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法。可以将堆分成两块：\n\n*   新生代（Young Generation）\n*   老年代（Old Generation）\n\n堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。"]],[936,936],[1136,1136]]],[1554642497736,["28447@DESKTOP-BE7HQ26",[[1,1142,"\n"]],[1136,1136],[1137,1137]]],[1554642497978,["28447@DESKTOP-BE7HQ26",[[1,1143,"\n"]],[1137,1137],[1138,1138]]],[1554642504939,["28447@DESKTOP-BE7HQ26",[[1,1138,"## 方法区\n\n用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n\n和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。\n\n对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。\n\nHotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。"]],[1138,1138],[1447,1447]]],[1554642612739,["28447@DESKTOP-BE7HQ26",[[1,1449,"**默认的新生代（Young generation）、老年代（Old generation）所占空间比例为 1 : 2 。**"]],[1449,1449],[1512,1512]]],[1554642617163,["28447@DESKTOP-BE7HQ26",[[-1,1449,"**默认的新生代（Young generation）、老年代（Old generation）所占空间比例为 1 : 2 。**\n"]],[1448,1512],[1448,1448]]],[1554642621336,["28447@DESKTOP-BE7HQ26",[[1,1087,"\n"]],[1086,1086],[1087,1087]]],[1554642621942,["28447@DESKTOP-BE7HQ26",[[1,1087,"**默认的新生代（Young generation）、老年代（Old generation）所占空间比例为 1 : 2 。**\n"]],[1086,1086],[1150,1150]]],[1554642624020,["28447@DESKTOP-BE7HQ26",[[-1,1152,"堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。\n"]],[1151,1201],[1151,1151]]],[1554642628933,["28447@DESKTOP-BE7HQ26",[[1,1467,"\n"]],[1462,1462],[1463,1463]]],[1554642629211,["28447@DESKTOP-BE7HQ26",[[1,1468,"\n"]],[1463,1463],[1464,1464]]],[1554642698631,["28447@DESKTOP-BE7HQ26",[[1,1464,"## 运行时常量池\n\n运行时常量池是方法区的一部分。\n\nClass 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。\n\n除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。\n\n## [](https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98)"]],[1464,1464],[1721,1721]]],[1554642705306,["28447@DESKTOP-BE7HQ26",[[-1,1581,"## [](https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98)"]],[1581,1721],[1581,1581]]],[1554642728724,["28447@DESKTOP-BE7HQ26",[[1,1581,"## 垃圾护手"]],[1581,1581],[1588,1588]]],[1554642729615,["28447@DESKTOP-BE7HQ26",[[-1,1586,"护手"]],[1588,1588],[1586,1586]]],[1554642734087,["28447@DESKTOP-BE7HQ26",[[1,1586,"回收"]],[1586,1586],[1588,1588]]],[1554642734267,["28447@DESKTOP-BE7HQ26",[[1,1593,"\n"]],[1588,1588],[1589,1589]]],[1554642737568,["28447@DESKTOP-BE7HQ26",[[1,1594,"\n"]],[1589,1589],[1590,1590]]],[1554642748223,["28447@DESKTOP-BE7HQ26",[[1,1589,"垃圾收集主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后就会消失，因此不需要对这三个区域进行垃圾回收。"]],[1589,1589],[1677,1677]]],[1554642754610,["28447@DESKTOP-BE7HQ26",[[1,1683,"\n"]],[1677,1677],[1678,1678]]],[1554642754897,["28447@DESKTOP-BE7HQ26",[[1,1684,"\n"]],[1678,1678],[1679,1679]]],[1554642825506,["28447@DESKTOP-BE7HQ26",[[1,1679,"## 判断一个对象是否可被回收"]],[1679,1679],[1694,1694]]],[1554642828453,["28447@DESKTOP-BE7HQ26",[[1,1681,"#"]],[1681,1681],[1682,1682]]],[1554642828720,["28447@DESKTOP-BE7HQ26",[[1,1683," "]],[1682,1682],[1683,1683]]],[1554642830717,["28447@DESKTOP-BE7HQ26",[[1,1702,"\n"]],[1696,1696],[1697,1697]]],[1554642832022,["28447@DESKTOP-BE7HQ26",[[1,1703,"\n"]],[1697,1697],[1698,1698]]],[1554642838554,["28447@DESKTOP-BE7HQ26",[[1,1584,"二、"]],[1584,1584],[1586,1586]]],[1554642847876,["28447@DESKTOP-BE7HQ26",[[1,46,"# 原理"]],[46,46],[50,50]]],[1554642849333,["28447@DESKTOP-BE7HQ26",[[-1,48,"原理"]],[50,50],[48,48]]],[1554642853756,["28447@DESKTOP-BE7HQ26",[[1,48,"具体模块"]],[48,48],[52,52]]],[1554642856715,["28447@DESKTOP-BE7HQ26",[[1,48,"JVM"]],[48,48],[51,51]]],[1554642858240,["28447@DESKTOP-BE7HQ26",[[-1,51,"具体"]],[53,53],[51,51]]],[1554642859863,["28447@DESKTOP-BE7HQ26",[[1,48,"1\\"]],[48,48],[50,50]]],[1554642860802,["28447@DESKTOP-BE7HQ26",[[-1,49,"\\"]],[50,50],[49,49]]],[1554642861252,["28447@DESKTOP-BE7HQ26",[[1,49,"、"]],[49,49],[50,50]]],[1554642867089,["28447@DESKTOP-BE7HQ26",[[-1,48,"1"]],[49,49],[48,48]]],[1554642868669,["28447@DESKTOP-BE7HQ26",[[1,48,"一"]],[48,48],[49,49]]],[1554642871327,["28447@DESKTOP-BE7HQ26",[[1,1715,"\n"]],[1707,1707],[1708,1708]]],[1554642876379,["28447@DESKTOP-BE7HQ26",[[1,1708,"### 1\\. 引用计数算法\n\n为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。\n\n在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。"]],[1708,1708],[1859,1859]]],[1554642883790,["28447@DESKTOP-BE7HQ26",[[-1,1713,"\\"]],[1714,1714],[1713,1713]]],[1554642886604,["28447@DESKTOP-BE7HQ26",[[1,1713,"、"]],[1713,1713],[1714,1714]]],[1554642888366,["28447@DESKTOP-BE7HQ26",[[-1,1713,"、"]],[1714,1714],[1713,1713]]],[1554642889297,["28447@DESKTOP-BE7HQ26",[[1,1713,"\\"]],[1713,1713],[1714,1714]]],[1554642890355,["28447@DESKTOP-BE7HQ26",[[-1,1713,"\\"]],[1714,1714],[1713,1713]]],[1554642897924,["28447@DESKTOP-BE7HQ26",[[1,1866,"\n"]],[1858,1858],[1859,1859]]],[1554642898560,["28447@DESKTOP-BE7HQ26",[[1,1867,"\n"]],[1859,1859],[1860,1860]]],[1554643391813,["28447@DESKTOP-BE7HQ26",[[1,1708,"\n"]],[1707,1707],[1708,1708]]],[1554643402604,["28447@DESKTOP-BE7HQ26",[[1,1712,"#"]],[1712,1712],[1713,1713]]],[1554643405189,["28447@DESKTOP-BE7HQ26",[[1,1870,"\n"]],[1860,1860],[1861,1861]]],[1554643411838,["28447@DESKTOP-BE7HQ26",[[1,1862,"### 2\\. 可达性分析算法\n\n以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。\n\nJava 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：\n\n*   虚拟机栈中局部变量表中引用的对象\n*   本地方法栈中 JNI 中引用的对象\n*   方法区中类静态属性引用的对象\n*   方法区中的常量引用的对象"]],[1862,1862],[2046,2046]]],[1554643415270,["28447@DESKTOP-BE7HQ26",[[1,1865,"#"]],[1865,1865],[1866,1866]]],[1554643418888,["28447@DESKTOP-BE7HQ26",[[1,2048,"* \n"]],[2047,2047],[2050,2050]]],[1554643419131,["28447@DESKTOP-BE7HQ26",[[-1,2048,"* "]],[2050,2050],[2049,2049]]],[1554643545963,["28447@DESKTOP-BE7HQ26",[[1,2050,"### 3\\. 方法区的回收\n\n因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。\n\n主要是对常量池的回收和对类的卸载。\n\n为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。\n\n类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：\n\n*   该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。\n*   加载该类的 ClassLoader 已经被回收。\n*   该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。"]],[2050,2050],[2327,2327]]],[1554643548901,["28447@DESKTOP-BE7HQ26",[[1,2053,"#"]],[2053,2053],[2054,2054]]],[1554643552350,["28447@DESKTOP-BE7HQ26",[[1,2329,"* \n"]],[2328,2328],[2331,2331]]],[1554643552817,["28447@DESKTOP-BE7HQ26",[[-1,2329,"* "]],[2331,2331],[2330,2330]]],[1554643561833,["28447@DESKTOP-BE7HQ26",[[1,2330,"### 4\\. finalize()\n\n类似 C++ 的析构函数，用于关闭外部资源。但是 try-finally 等方式可以做得更好，并且该方法运行代价很高，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。\n\n当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。"]],[2330,2330],[2555,2555]]],[1554643564541,["28447@DESKTOP-BE7HQ26",[[1,2333,"#"]],[2333,2333],[2334,2334]]],[1554643567958,["28447@DESKTOP-BE7HQ26",[[1,2562,"\n"]],[2557,2557],[2558,2558]]],[1554643603963,["28447@DESKTOP-BE7HQ26",[[1,2559,"## 垃圾收集算法"]],[2559,2559],[2568,2568]]],[1554643605580,["28447@DESKTOP-BE7HQ26",[[1,2572,"\n"]],[2568,2568],[2569,2569]]],[1554643605927,["28447@DESKTOP-BE7HQ26",[[1,2573,"\n"]],[2569,2569],[2570,2570]]],[1554643610726,["28447@DESKTOP-BE7HQ26",[[1,2569,"### 1\\. 标记 - 清除"]],[2569,2569],[2584,2584]]],[1554643611927,["28447@DESKTOP-BE7HQ26",[[1,2569,"\n"]],[2568,2568],[2569,2569]]],[1554643613403,["28447@DESKTOP-BE7HQ26",[[1,2590,"\n"]],[2585,2585],[2586,2586]]],[1554643618650,["28447@DESKTOP-BE7HQ26",[[1,2586,"![](https://camo.githubusercontent.com/ee0b49489e3b60afe23731012f46372f925ebb79/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f335f323030313535303534373535383030382e706e67)"]],[2586,2586],[2823,2823]]],[1554643620226,["28447@DESKTOP-BE7HQ26",[[1,2828,"\n"]],[2823,2823],[2824,2824]]],[1554643621518,["28447@DESKTOP-BE7HQ26",[[1,2829,"\n"]],[2824,2824],[2825,2825]]],[1554643631424,["28447@DESKTOP-BE7HQ26",[[1,2824,"标记要回收的对象，然后清除。\n\n不足：\n\n*   标记和清除过程效率都不高；\n*   会产生大量不连续的内存碎片，导致无法给大对象分配内存。"]],[2824,2824],[2894,2894]]],[1554643644894,["28447@DESKTOP-BE7HQ26",[[1,2895,"* \n"]],[2894,2894],[2897,2897]]],[1554643645264,["28447@DESKTOP-BE7HQ26",[[-1,2895,"* "]],[2897,2897],[2896,2896]]],[1554643649905,["28447@DESKTOP-BE7HQ26",[[1,2896,"### 2\\. 标记 - 整理"]],[2896,2896],[2911,2911]]],[1554643652414,["28447@DESKTOP-BE7HQ26",[[1,2916,"\n"]],[2911,2911],[2912,2912]]],[1554643656242,["28447@DESKTOP-BE7HQ26",[[1,2912,"![](https://camo.githubusercontent.com/e3f09b2582cfa99a0800c7aecd0c8857b2de5972/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f325f323030313535303534373435363430332e706e67)"]],[2912,2912],[3149,3149]]],[1554643657260,["28447@DESKTOP-BE7HQ26",[[1,3154,"\n"]],[3149,3149],[3150,3150]]],[1554643657519,["28447@DESKTOP-BE7HQ26",[[1,3155,"\n"]],[3150,3150],[3151,3151]]],[1554643664111,["28447@DESKTOP-BE7HQ26",[[1,3150,"让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。\n\n优点:\n\n*   不会产生内存碎片\n\n不足:\n\n*   需要移动大量对象，处理效率比较低。"]],[3150,3150],[3228,3228]]],[1554643667668,["28447@DESKTOP-BE7HQ26",[[1,3150,"\n"]],[3149,3149],[3150,3150]]],[1554643669408,["28447@DESKTOP-BE7HQ26",[[1,2824,"\n"]],[2823,2823],[2824,2824]]],[1554643675934,["28447@DESKTOP-BE7HQ26",[[1,3232,"### 3\\. 复制"]],[3232,3232],[3242,3242]]],[1554643681081,["28447@DESKTOP-BE7HQ26",[[1,3246,"\n"]],[3242,3242],[3243,3243]]],[1554643681547,["28447@DESKTOP-BE7HQ26",[[1,3247,"\n"]],[3243,3243],[3244,3244]]],[1554643682183,["28447@DESKTOP-BE7HQ26",[[-1,3247,"\n"]],[3244,3244],[3243,3243]]],[1554643686057,["28447@DESKTOP-BE7HQ26",[[1,3243,"![](https://camo.githubusercontent.com/de862072fae499c11b03549c3b65d9d00ad8264d/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f345f323030313535303534373634303538352e706e67)"]],[3243,3243],[3480,3480]]],[1554643687463,["28447@DESKTOP-BE7HQ26",[[1,3484,"\n"]],[3480,3480],[3481,3481]]],[1554643688277,["28447@DESKTOP-BE7HQ26",[[1,3485,"\n"]],[3481,3481],[3482,3482]]],[1554643715327,["28447@DESKTOP-BE7HQ26",[[1,3482,"将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。\n\n主要不足是只使用了内存的一半。\n\n现在的商业虚拟机都采用这种收集算法回收新生代，但是并不是划分为大小相等的两块，而是一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象全部复制到另一块 Survivor 上，最后清理 Eden 和使用过的那一块 Survivor。\n\nHotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 就不够用了，此时需要依赖于老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。"]],[3482,3482],[3885,3885]]],[1554643716535,["28447@DESKTOP-BE7HQ26",[[1,3889,"\n"]],[3885,3885],[3886,3886]]],[1554643716878,["28447@DESKTOP-BE7HQ26",[[1,3890,"\n"]],[3886,3886],[3887,3887]]],[1554643766330,["28447@DESKTOP-BE7HQ26",[[1,3887,"### 4\\. 分代收集\n\n现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。\n\n一般将堆分为新生代和老年代。\n\n*   新生代使用：复制算法\n*   老年代使用：标记 - 清除 或者 标记 - 整理 算法"]],[3887,3887],[4013,4013]]],[1554643767847,["28447@DESKTOP-BE7HQ26",[[1,4014,"* \n"]],[4013,4013],[4016,4016]]],[1554643768571,["28447@DESKTOP-BE7HQ26",[[-1,4014,"* "]],[4016,4016],[4015,4015]]],[1554644728888,["28447@DESKTOP-BE7HQ26",[[1,45,"*****"]],[45,45],[48,48]]],[1554644729876,["28447@DESKTOP-BE7HQ26",[[-1,49,"*"]],[48,48],[47,47]]],[1554644733551,["28447@DESKTOP-BE7HQ26",[[1,44,"[]"]],[44,44],[46,46]]],[1554644737564,["28447@DESKTOP-BE7HQ26",[[1,45,"JVMmi"]],[45,45],[50,50]]],[1554644738105,["28447@DESKTOP-BE7HQ26",[[-1,48,"mi"]],[50,50],[48,48]]],[1554644738939,["28447@DESKTOP-BE7HQ26",[[1,48,"Mian"]],[48,48],[52,52]]],[1554644739806,["28447@DESKTOP-BE7HQ26",[[-1,48,"Mian"]],[52,52],[48,48]]],[1554644741670,["28447@DESKTOP-BE7HQ26",[[1,48,"面试题"]],[48,48],[51,51]]],[1554644743064,["28447@DESKTOP-BE7HQ26",[[1,52,"（"]],[52,52],[53,53]]],[1554644743695,["28447@DESKTOP-BE7HQ26",[[-1,52,"（"]],[53,53],[52,52]]],[1554644744432,["28447@DESKTOP-BE7HQ26",[[1,52,"("]],[52,52],[53,53]]],[1554644744465,["28447@DESKTOP-BE7HQ26",[[1,53,"https://)"]],[53,53],[53,61]]],[1554644744841,["28447@DESKTOP-BE7HQ26",[[1,61,"www.cnblogs.com/goody9807/p/6511480.html"]],[53,61],[101,101]]]],null,"28447@DESKTOP-BE7HQ26"],["7e4e9478-fc41-4bd7-bd07-7a6c0cadc703",1554650583638,"# JVM\n\n****\nJVM ： java虚拟机，是操作系统识别java程序的工具\n\n[JVM面试题](https://www.cnblogs.com/goody9807/p/6511480.html)\n****\n# 一、JVM模块\n\n![](https://images2017.cnblogs.com/blog/1072930/201712/1072930-20171229170534570-429539433.png)\n\n## 程序计数器\n\n记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）\n\n## Java 虚拟机栈\n\n每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。\n\n![](https://camo.githubusercontent.com/c04a17cab5bca71fe4de0558b694fb7b167b6b3a/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f66663562383961632d373938652d346662632d623063652d6461326663323335383537302e6a7067)\n\n\n## 本地方法栈\n\n本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。\n\n本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。\n\n![](https://camo.githubusercontent.com/fe3ccc26ca7f5ea008fdbdee99dd76e65154a617/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f315f323030313535303534373236313831312e706e67)\n\n\n## 堆\n\n所有对象都在这里分配内存，是垃圾收集的主要区域（\"GC 堆\"）。\n\n现代的垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法。可以将堆分成两块：\n\n*   新生代（Young Generation）\n*   老年代（Old Generation）\n\n**默认的新生代（Young generation）、老年代（Old generation）所占空间比例为 1 : 2 。**\n\n\n## 方法区\n\n用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n\n和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。\n\n对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。\n\nHotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。\n\n## 运行时常量池\n\n运行时常量池是方法区的一部分。\n\nClass 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。\n\n除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。\n\n## 二、垃圾回收\n垃圾收集主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后就会消失，因此不需要对这三个区域进行垃圾回收。\n\n###  判断一个对象是否可被回收\n\n#### 1. 引用计数算法\n\n为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。\n\n在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。\n\n#### 2\\. 可达性分析算法\n\n以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。\n\nJava 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：\n\n*   虚拟机栈中局部变量表中引用的对象\n*   本地方法栈中 JNI 中引用的对象\n*   方法区中类静态属性引用的对象\n*   方法区中的常量引用的对象\n\n\n#### 3\\. 方法区的回收\n\n因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。\n\n主要是对常量池的回收和对类的卸载。\n\n为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。\n\n类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：\n\n*   该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。\n*   加载该类的 ClassLoader 已经被回收。\n*   该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。\n\n#### 4\\. finalize()\n\n类似 C++ 的析构函数，用于关闭外部资源。但是 try-finally 等方式可以做得更好，并且该方法运行代价很高，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。\n\n当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。\n\n\n## 垃圾收集算法\n\n### 1\\. 标记 - 清除\n![](https://camo.githubusercontent.com/ee0b49489e3b60afe23731012f46372f925ebb79/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f335f323030313535303534373535383030382e706e67)\n\n标记要回收的对象，然后清除。\n\n不足：\n\n*   标记和清除过程效率都不高；\n*   会产生大量不连续的内存碎片，导致无法给大对象分配内存。\n\n### 2\\. 标记 - 整理\n![](https://camo.githubusercontent.com/e3f09b2582cfa99a0800c7aecd0c8857b2de5972/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f325f323030313535303534373435363430332e706e67)\n\n让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。\n\n优点:\n\n*   不会产生内存碎片\n\n不足:\n\n*   需要移动大量对象，处理效率比较低。\n\n### 3\\. 复制\n![](https://camo.githubusercontent.com/de862072fae499c11b03549c3b65d9d00ad8264d/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f345f323030313535303534373634303538352e706e67)\n\n将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。\n\n主要不足是只使用了内存的一半。\n\n现在的商业虚拟机都采用这种收集算法回收新生代，但是并不是划分为大小相等的两块，而是一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象全部复制到另一块 Survivor 上，最后清理 Eden 和使用过的那一块 Survivor。\n\nHotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 就不够用了，此时需要依赖于老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。\n\n### 4\\. 分代收集\n\n现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。\n\n一般将堆分为新生代和老年代。\n\n*   新生代使用：复制算法\n*   老年代使用：标记 - 清除 或者 标记 - 整理 算法\n\n\n\n\n",[[1554650558062,["28447@DESKTOP-BE7HQ26",[[-1,767,"![](https://camo.githubusercontent.com/fe3ccc26ca7f5ea008fdbdee99dd76e65154a617/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f315f323030313535303534373236313831312e706e67)\n"]],[767,1005],[767,767]]],[1554650559636,["28447@DESKTOP-BE7HQ26",[[1,767,"![](https://camo.githubusercontent.com/fe3ccc26ca7f5ea008fdbdee99dd76e65154a617/68747470733a2f2f67697465652e636f6d2f437943323031382f43532d4e6f7465732f7261772f6d61737465722f646f63732f706963732f315f323030313535303534373236313831312e706e67)\n"]],[767,767],[1005,1005]]]],null,"28447@DESKTOP-BE7HQ26"]]}